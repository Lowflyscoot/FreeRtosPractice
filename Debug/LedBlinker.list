
LedBlinker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080036d0  080036d0  000136d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800378c  0800378c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800378c  0800378c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800378c  0800378c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800378c  0800378c  0001378c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003790  08003790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010a8  20000080  08003814  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001128  08003814  00021128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104bc  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298a  00000000  00000000  00030565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00032ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00033e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191c9  00000000  00000000  00034c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102f7  00000000  00000000  0004ddf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009485f  00000000  00000000  0005e0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2947  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000411c  00000000  00000000  000f2998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	080036b8 	.word	0x080036b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	080036b8 	.word	0x080036b8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000009c 	.word	0x2000009c
 800017c:	20000150 	.word	0x20000150

08000180 <SetSegment>:
};

uint8_t currentFrame [4] = {0, 0, 0, 0};

void SetSegment (uint8_t numOfSegment, GPIO_PinState state)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	460a      	mov	r2, r1
 800018a:	71fb      	strb	r3, [r7, #7]
 800018c:	4613      	mov	r3, r2
 800018e:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState pinAction;
	if (state == 0)
 8000190:	79bb      	ldrb	r3, [r7, #6]
 8000192:	2b00      	cmp	r3, #0
 8000194:	d102      	bne.n	800019c <SetSegment+0x1c>
	{
		pinAction = GPIO_PIN_RESET;
 8000196:	2300      	movs	r3, #0
 8000198:	73fb      	strb	r3, [r7, #15]
 800019a:	e001      	b.n	80001a0 <SetSegment+0x20>
	}
	else
	{
		pinAction = GPIO_PIN_SET;
 800019c:	2301      	movs	r3, #1
 800019e:	73fb      	strb	r3, [r7, #15]
	}

	switch (numOfSegment)
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	3b01      	subs	r3, #1
 80001a4:	2b07      	cmp	r3, #7
 80001a6:	d852      	bhi.n	800024e <SetSegment+0xce>
 80001a8:	a201      	add	r2, pc, #4	; (adr r2, 80001b0 <SetSegment+0x30>)
 80001aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ae:	bf00      	nop
 80001b0:	080001d1 	.word	0x080001d1
 80001b4:	080001e1 	.word	0x080001e1
 80001b8:	080001ef 	.word	0x080001ef
 80001bc:	080001ff 	.word	0x080001ff
 80001c0:	0800020f 	.word	0x0800020f
 80001c4:	0800021f 	.word	0x0800021f
 80001c8:	0800022f 	.word	0x0800022f
 80001cc:	0800023f 	.word	0x0800023f
	{
		case 1:
			HAL_GPIO_WritePin(SSEG_A_GPIO_Port, SSEG_A_Pin, pinAction);
 80001d0:	7bfb      	ldrb	r3, [r7, #15]
 80001d2:	461a      	mov	r2, r3
 80001d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001d8:	481f      	ldr	r0, [pc, #124]	; (8000258 <SetSegment+0xd8>)
 80001da:	f001 f831 	bl	8001240 <HAL_GPIO_WritePin>
			break;
 80001de:	e037      	b.n	8000250 <SetSegment+0xd0>
		case 2:
			HAL_GPIO_WritePin(SSEG_B_GPIO_Port, SSEG_B_Pin, pinAction);
 80001e0:	7bfb      	ldrb	r3, [r7, #15]
 80001e2:	461a      	mov	r2, r3
 80001e4:	2110      	movs	r1, #16
 80001e6:	481d      	ldr	r0, [pc, #116]	; (800025c <SetSegment+0xdc>)
 80001e8:	f001 f82a 	bl	8001240 <HAL_GPIO_WritePin>
			break;
 80001ec:	e030      	b.n	8000250 <SetSegment+0xd0>
		case 3:
			HAL_GPIO_WritePin(SSEG_C_GPIO_Port, SSEG_C_Pin, pinAction);
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	461a      	mov	r2, r3
 80001f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f6:	4819      	ldr	r0, [pc, #100]	; (800025c <SetSegment+0xdc>)
 80001f8:	f001 f822 	bl	8001240 <HAL_GPIO_WritePin>
			break;
 80001fc:	e028      	b.n	8000250 <SetSegment+0xd0>
		case 4:
			HAL_GPIO_WritePin(SSEG_D_GPIO_Port, SSEG_D_Pin, pinAction);
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	461a      	mov	r2, r3
 8000202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000206:	4815      	ldr	r0, [pc, #84]	; (800025c <SetSegment+0xdc>)
 8000208:	f001 f81a 	bl	8001240 <HAL_GPIO_WritePin>
			break;
 800020c:	e020      	b.n	8000250 <SetSegment+0xd0>
		case 5:
			HAL_GPIO_WritePin(SSEG_E_GPIO_Port, SSEG_E_Pin, pinAction);
 800020e:	7bfb      	ldrb	r3, [r7, #15]
 8000210:	461a      	mov	r2, r3
 8000212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000216:	4810      	ldr	r0, [pc, #64]	; (8000258 <SetSegment+0xd8>)
 8000218:	f001 f812 	bl	8001240 <HAL_GPIO_WritePin>
			break;
 800021c:	e018      	b.n	8000250 <SetSegment+0xd0>
		case 6:
			HAL_GPIO_WritePin(SSEG_F_GPIO_Port, SSEG_F_Pin, pinAction);
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	461a      	mov	r2, r3
 8000222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000226:	480c      	ldr	r0, [pc, #48]	; (8000258 <SetSegment+0xd8>)
 8000228:	f001 f80a 	bl	8001240 <HAL_GPIO_WritePin>
			break;
 800022c:	e010      	b.n	8000250 <SetSegment+0xd0>
		case 7:
			HAL_GPIO_WritePin(SSEG_G_GPIO_Port, SSEG_G_Pin, pinAction);
 800022e:	7bfb      	ldrb	r3, [r7, #15]
 8000230:	461a      	mov	r2, r3
 8000232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000236:	4809      	ldr	r0, [pc, #36]	; (800025c <SetSegment+0xdc>)
 8000238:	f001 f802 	bl	8001240 <HAL_GPIO_WritePin>
			break;
 800023c:	e008      	b.n	8000250 <SetSegment+0xd0>
		case 8:
			HAL_GPIO_WritePin(SSEG_DOT_GPIO_Port, SSEG_DOT_Pin, pinAction);
 800023e:	7bfb      	ldrb	r3, [r7, #15]
 8000240:	461a      	mov	r2, r3
 8000242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000246:	4805      	ldr	r0, [pc, #20]	; (800025c <SetSegment+0xdc>)
 8000248:	f000 fffa 	bl	8001240 <HAL_GPIO_WritePin>
			break;
 800024c:	e000      	b.n	8000250 <SetSegment+0xd0>
		default:
			break;
 800024e:	bf00      	nop
	}
}
 8000250:	bf00      	nop
 8000252:	3710      	adds	r7, #16
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40010800 	.word	0x40010800
 800025c:	40010c00 	.word	0x40010c00

08000260 <SetFrame>:

void SetFrame (uint8_t frameNum, uint8_t frame)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	460a      	mov	r2, r1
 800026a:	71fb      	strb	r3, [r7, #7]
 800026c:	4613      	mov	r3, r2
 800026e:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SSEG_1_GPIO_Port, SSEG_1_Pin, 1);
 8000270:	2201      	movs	r2, #1
 8000272:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000276:	482f      	ldr	r0, [pc, #188]	; (8000334 <SetFrame+0xd4>)
 8000278:	f000 ffe2 	bl	8001240 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SSEG_2_GPIO_Port, SSEG_2_Pin, 1);
 800027c:	2201      	movs	r2, #1
 800027e:	2108      	movs	r1, #8
 8000280:	482d      	ldr	r0, [pc, #180]	; (8000338 <SetFrame+0xd8>)
 8000282:	f000 ffdd 	bl	8001240 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SSEG_3_GPIO_Port, SSEG_3_Pin, 1);
 8000286:	2201      	movs	r2, #1
 8000288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800028c:	4829      	ldr	r0, [pc, #164]	; (8000334 <SetFrame+0xd4>)
 800028e:	f000 ffd7 	bl	8001240 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SSEG_4_GPIO_Port, SSEG_4_Pin, 1);
 8000292:	2201      	movs	r2, #1
 8000294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000298:	4826      	ldr	r0, [pc, #152]	; (8000334 <SetFrame+0xd4>)
 800029a:	f000 ffd1 	bl	8001240 <HAL_GPIO_WritePin>

   switch(frameNum)
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	d826      	bhi.n	80002f2 <SetFrame+0x92>
 80002a4:	a201      	add	r2, pc, #4	; (adr r2, 80002ac <SetFrame+0x4c>)
 80002a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002aa:	bf00      	nop
 80002ac:	080002bd 	.word	0x080002bd
 80002b0:	080002cb 	.word	0x080002cb
 80002b4:	080002d7 	.word	0x080002d7
 80002b8:	080002e5 	.word	0x080002e5
   {
     case 0:
       HAL_GPIO_WritePin(SSEG_1_GPIO_Port, SSEG_1_Pin, 0);
 80002bc:	2200      	movs	r2, #0
 80002be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c2:	481c      	ldr	r0, [pc, #112]	; (8000334 <SetFrame+0xd4>)
 80002c4:	f000 ffbc 	bl	8001240 <HAL_GPIO_WritePin>
       break;
 80002c8:	e014      	b.n	80002f4 <SetFrame+0x94>
     case 1:
       HAL_GPIO_WritePin(SSEG_2_GPIO_Port, SSEG_2_Pin, 0);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2108      	movs	r1, #8
 80002ce:	481a      	ldr	r0, [pc, #104]	; (8000338 <SetFrame+0xd8>)
 80002d0:	f000 ffb6 	bl	8001240 <HAL_GPIO_WritePin>
       break;
 80002d4:	e00e      	b.n	80002f4 <SetFrame+0x94>
     case 2:
       HAL_GPIO_WritePin(SSEG_3_GPIO_Port, SSEG_3_Pin, 0);
 80002d6:	2200      	movs	r2, #0
 80002d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002dc:	4815      	ldr	r0, [pc, #84]	; (8000334 <SetFrame+0xd4>)
 80002de:	f000 ffaf 	bl	8001240 <HAL_GPIO_WritePin>
       break;
 80002e2:	e007      	b.n	80002f4 <SetFrame+0x94>
     case 3:
       HAL_GPIO_WritePin(SSEG_4_GPIO_Port, SSEG_4_Pin, 0);
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ea:	4812      	ldr	r0, [pc, #72]	; (8000334 <SetFrame+0xd4>)
 80002ec:	f000 ffa8 	bl	8001240 <HAL_GPIO_WritePin>
       break;
 80002f0:	e000      	b.n	80002f4 <SetFrame+0x94>
     default:
       break;
 80002f2:	bf00      	nop
   }
	 for (uint8_t i = 0; i < 8; i++)
 80002f4:	2300      	movs	r3, #0
 80002f6:	73fb      	strb	r3, [r7, #15]
 80002f8:	e013      	b.n	8000322 <SetFrame+0xc2>
	 {
	 	SetSegment(8 - i, ((frame >> (7 - i)) & 0x01));
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	f1c3 0308 	rsb	r3, r3, #8
 8000300:	b2d8      	uxtb	r0, r3
 8000302:	79ba      	ldrb	r2, [r7, #6]
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	f1c3 0307 	rsb	r3, r3, #7
 800030a:	fa42 f303 	asr.w	r3, r2, r3
 800030e:	b2db      	uxtb	r3, r3
 8000310:	f003 0301 	and.w	r3, r3, #1
 8000314:	b2db      	uxtb	r3, r3
 8000316:	4619      	mov	r1, r3
 8000318:	f7ff ff32 	bl	8000180 <SetSegment>
	 for (uint8_t i = 0; i < 8; i++)
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	3301      	adds	r3, #1
 8000320:	73fb      	strb	r3, [r7, #15]
 8000322:	7bfb      	ldrb	r3, [r7, #15]
 8000324:	2b07      	cmp	r3, #7
 8000326:	d9e8      	bls.n	80002fa <SetFrame+0x9a>
	 }
}
 8000328:	bf00      	nop
 800032a:	bf00      	nop
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010800 	.word	0x40010800
 8000338:	40010c00 	.word	0x40010c00

0800033c <ssegOutputTask>:

void ssegOutputTask (void* pvParameters)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint8_t Frame = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
    SetFrame(Frame, currentFrame[Frame]);
 8000348:	7bfb      	ldrb	r3, [r7, #15]
 800034a:	4a09      	ldr	r2, [pc, #36]	; (8000370 <ssegOutputTask+0x34>)
 800034c:	5cd2      	ldrb	r2, [r2, r3]
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	4611      	mov	r1, r2
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff84 	bl	8000260 <SetFrame>
    Frame++;
 8000358:	7bfb      	ldrb	r3, [r7, #15]
 800035a:	3301      	adds	r3, #1
 800035c:	73fb      	strb	r3, [r7, #15]
    if (Frame == 4)
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	2b04      	cmp	r3, #4
 8000362:	d101      	bne.n	8000368 <ssegOutputTask+0x2c>
    {
    	Frame = 0;
 8000364:	2300      	movs	r3, #0
 8000366:	73fb      	strb	r3, [r7, #15]
    }

    vTaskDelay((3 / portTICK_PERIOD_MS));
 8000368:	2003      	movs	r0, #3
 800036a:	f002 f985 	bl	8002678 <vTaskDelay>
    SetFrame(Frame, currentFrame[Frame]);
 800036e:	e7eb      	b.n	8000348 <ssegOutputTask+0xc>
 8000370:	20000384 	.word	0x20000384

08000374 <framesUpdateTask>:
	}
}

void framesUpdateTask (void* pvParameters)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	uint8_t numOfFrame = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
    for(uint8_t i = 0; i < 4; i++)
 8000380:	2300      	movs	r3, #0
 8000382:	73bb      	strb	r3, [r7, #14]
 8000384:	e008      	b.n	8000398 <framesUpdateTask+0x24>
    {
      currentFrame[i] = SsegNumbersArray[numOfFrame];
 8000386:	7bfa      	ldrb	r2, [r7, #15]
 8000388:	7bbb      	ldrb	r3, [r7, #14]
 800038a:	490b      	ldr	r1, [pc, #44]	; (80003b8 <framesUpdateTask+0x44>)
 800038c:	5c89      	ldrb	r1, [r1, r2]
 800038e:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <framesUpdateTask+0x48>)
 8000390:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 0; i < 4; i++)
 8000392:	7bbb      	ldrb	r3, [r7, #14]
 8000394:	3301      	adds	r3, #1
 8000396:	73bb      	strb	r3, [r7, #14]
 8000398:	7bbb      	ldrb	r3, [r7, #14]
 800039a:	2b03      	cmp	r3, #3
 800039c:	d9f3      	bls.n	8000386 <framesUpdateTask+0x12>
    }
    numOfFrame++;
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	3301      	adds	r3, #1
 80003a2:	73fb      	strb	r3, [r7, #15]
    if (numOfFrame == sizeof(SsegNumbersArray))
 80003a4:	7bfb      	ldrb	r3, [r7, #15]
 80003a6:	2b0a      	cmp	r3, #10
 80003a8:	d101      	bne.n	80003ae <framesUpdateTask+0x3a>
    {
      numOfFrame = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	73fb      	strb	r3, [r7, #15]
    }
		vTaskDelay((1000 / portTICK_PERIOD_MS));
 80003ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b2:	f002 f961 	bl	8002678 <vTaskDelay>
    for(uint8_t i = 0; i < 4; i++)
 80003b6:	e7e3      	b.n	8000380 <framesUpdateTask+0xc>
 80003b8:	20000000 	.word	0x20000000
 80003bc:	20000384 	.word	0x20000384

080003c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c0:	b5b0      	push	{r4, r5, r7, lr}
 80003c2:	b08a      	sub	sp, #40	; 0x28
 80003c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c6:	f000 fa93 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ca:	f000 f837 	bl	800043c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ce:	f000 f8c3 	bl	8000558 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003d2:	f000 f883 	bl	80004dc <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80003d6:	4b14      	ldr	r3, [pc, #80]	; (8000428 <main+0x68>)
 80003d8:	1d3c      	adds	r4, r7, #4
 80003da:	461d      	mov	r5, r3
 80003dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2100      	movs	r1, #0
 80003ec:	4618      	mov	r0, r3
 80003ee:	f001 fe93 	bl	8002118 <osThreadCreate>
 80003f2:	4603      	mov	r3, r0
 80003f4:	4a0d      	ldr	r2, [pc, #52]	; (800042c <main+0x6c>)
 80003f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(ssegOutputTask, "LED", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 80003f8:	2300      	movs	r3, #0
 80003fa:	9301      	str	r3, [sp, #4]
 80003fc:	2302      	movs	r3, #2
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2300      	movs	r3, #0
 8000402:	2280      	movs	r2, #128	; 0x80
 8000404:	490a      	ldr	r1, [pc, #40]	; (8000430 <main+0x70>)
 8000406:	480b      	ldr	r0, [pc, #44]	; (8000434 <main+0x74>)
 8000408:	f001 fff1 	bl	80023ee <xTaskCreate>
  xTaskCreate(framesUpdateTask, "LED", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 800040c:	2300      	movs	r3, #0
 800040e:	9301      	str	r3, [sp, #4]
 8000410:	2302      	movs	r3, #2
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	2300      	movs	r3, #0
 8000416:	2280      	movs	r2, #128	; 0x80
 8000418:	4905      	ldr	r1, [pc, #20]	; (8000430 <main+0x70>)
 800041a:	4807      	ldr	r0, [pc, #28]	; (8000438 <main+0x78>)
 800041c:	f001 ffe7 	bl	80023ee <xTaskCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000420:	f001 fe73 	bl	800210a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000424:	e7fe      	b.n	8000424 <main+0x64>
 8000426:	bf00      	nop
 8000428:	080036e0 	.word	0x080036e0
 800042c:	20000380 	.word	0x20000380
 8000430:	080036dc 	.word	0x080036dc
 8000434:	0800033d 	.word	0x0800033d
 8000438:	08000375 	.word	0x08000375

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b094      	sub	sp, #80	; 0x50
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000446:	2228      	movs	r2, #40	; 0x28
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f003 f86e 	bl	800352c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800046c:	2302      	movs	r3, #2
 800046e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000470:	2301      	movs	r3, #1
 8000472:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000474:	2310      	movs	r3, #16
 8000476:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000478:	2300      	movs	r3, #0
 800047a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000480:	4618      	mov	r0, r3
 8000482:	f000 fef5 	bl	8001270 <HAL_RCC_OscConfig>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800048c:	f000 f8f8 	bl	8000680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000490:	230f      	movs	r3, #15
 8000492:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f001 f962 	bl	8001774 <HAL_RCC_ClockConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80004b6:	f000 f8e3 	bl	8000680 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004ba:	2302      	movs	r3, #2
 80004bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4618      	mov	r0, r3
 80004c6:	f001 fb09 	bl	8001adc <HAL_RCCEx_PeriphCLKConfig>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80004d0:	f000 f8d6 	bl	8000680 <Error_Handler>
  }
}
 80004d4:	bf00      	nop
 80004d6:	3750      	adds	r7, #80	; 0x50
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <MX_ADC1_Init+0x74>)
 80004ee:	4a19      	ldr	r2, [pc, #100]	; (8000554 <MX_ADC1_Init+0x78>)
 80004f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_ADC1_Init+0x74>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <MX_ADC1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_ADC1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_ADC1_Init+0x74>)
 8000506:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800050a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050c:	4b10      	ldr	r3, [pc, #64]	; (8000550 <MX_ADC1_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_ADC1_Init+0x74>)
 8000514:	2201      	movs	r2, #1
 8000516:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <MX_ADC1_Init+0x74>)
 800051a:	f000 fa1b 	bl	8000954 <HAL_ADC_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000524:	f000 f8ac 	bl	8000680 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000528:	2309      	movs	r3, #9
 800052a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800052c:	2301      	movs	r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	4619      	mov	r1, r3
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <MX_ADC1_Init+0x74>)
 800053a:	f000 fae3 	bl	8000b04 <HAL_ADC_ConfigChannel>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000544:	f000 f89c 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000350 	.word	0x20000350
 8000554:	40012400 	.word	0x40012400

08000558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056c:	4b33      	ldr	r3, [pc, #204]	; (800063c <MX_GPIO_Init+0xe4>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a32      	ldr	r2, [pc, #200]	; (800063c <MX_GPIO_Init+0xe4>)
 8000572:	f043 0310 	orr.w	r3, r3, #16
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b30      	ldr	r3, [pc, #192]	; (800063c <MX_GPIO_Init+0xe4>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0310 	and.w	r3, r3, #16
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000584:	4b2d      	ldr	r3, [pc, #180]	; (800063c <MX_GPIO_Init+0xe4>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a2c      	ldr	r2, [pc, #176]	; (800063c <MX_GPIO_Init+0xe4>)
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b2a      	ldr	r3, [pc, #168]	; (800063c <MX_GPIO_Init+0xe4>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	4b27      	ldr	r3, [pc, #156]	; (800063c <MX_GPIO_Init+0xe4>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a26      	ldr	r2, [pc, #152]	; (800063c <MX_GPIO_Init+0xe4>)
 80005a2:	f043 0304 	orr.w	r3, r3, #4
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b24      	ldr	r3, [pc, #144]	; (800063c <MX_GPIO_Init+0xe4>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ba:	4821      	ldr	r0, [pc, #132]	; (8000640 <MX_GPIO_Init+0xe8>)
 80005bc:	f000 fe40 	bl	8001240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SSEG_G_Pin|SSEG_C_Pin|SSEG_DOT_Pin|SSEG_D_Pin
 80005c0:	2200      	movs	r2, #0
 80005c2:	f24f 0118 	movw	r1, #61464	; 0xf018
 80005c6:	481f      	ldr	r0, [pc, #124]	; (8000644 <MX_GPIO_Init+0xec>)
 80005c8:	f000 fe3a 	bl	8001240 <HAL_GPIO_WritePin>
                          |SSEG_2_Pin|SSEG_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSEG_E_Pin|SSEG_4_Pin|SSEG_1_Pin|SSEG_A_Pin
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 80005d2:	481d      	ldr	r0, [pc, #116]	; (8000648 <MX_GPIO_Init+0xf0>)
 80005d4:	f000 fe34 	bl	8001240 <HAL_GPIO_WritePin>
                          |SSEG_F_Pin|SSEG_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 80005d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	4619      	mov	r1, r3
 80005f0:	4813      	ldr	r0, [pc, #76]	; (8000640 <MX_GPIO_Init+0xe8>)
 80005f2:	f000 fca1 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSEG_G_Pin SSEG_C_Pin SSEG_DOT_Pin SSEG_D_Pin
                           SSEG_2_Pin SSEG_B_Pin */
  GPIO_InitStruct.Pin = SSEG_G_Pin|SSEG_C_Pin|SSEG_DOT_Pin|SSEG_D_Pin
 80005f6:	f24f 0318 	movw	r3, #61464	; 0xf018
 80005fa:	613b      	str	r3, [r7, #16]
                          |SSEG_2_Pin|SSEG_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2302      	movs	r3, #2
 8000606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	4619      	mov	r1, r3
 800060e:	480d      	ldr	r0, [pc, #52]	; (8000644 <MX_GPIO_Init+0xec>)
 8000610:	f000 fc92 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSEG_E_Pin SSEG_4_Pin SSEG_1_Pin SSEG_A_Pin
                           SSEG_F_Pin SSEG_3_Pin */
  GPIO_InitStruct.Pin = SSEG_E_Pin|SSEG_4_Pin|SSEG_1_Pin|SSEG_A_Pin
 8000614:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 8000618:	613b      	str	r3, [r7, #16]
                          |SSEG_F_Pin|SSEG_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2302      	movs	r3, #2
 8000624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4619      	mov	r1, r3
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <MX_GPIO_Init+0xf0>)
 800062e:	f000 fc83 	bl	8000f38 <HAL_GPIO_Init>

}
 8000632:	bf00      	nop
 8000634:	3720      	adds	r7, #32
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000
 8000640:	40011000 	.word	0x40011000
 8000644:	40010c00 	.word	0x40010c00
 8000648:	40010800 	.word	0x40010800

0800064c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f001 fdab 	bl	80021b0 <osDelay>
 800065a:	e7fb      	b.n	8000654 <StartDefaultTask+0x8>

0800065c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a04      	ldr	r2, [pc, #16]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d101      	bne.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800066e:	f000 f955 	bl	800091c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40012c00 	.word	0x40012c00

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000688:	e7fe      	b.n	8000688 <Error_Handler+0x8>
	...

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_MspInit+0x68>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <HAL_MspInit+0x68>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6193      	str	r3, [r2, #24]
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_MspInit+0x68>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_MspInit+0x68>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <HAL_MspInit+0x68>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <HAL_MspInit+0x68>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	210f      	movs	r1, #15
 80006c6:	f06f 0001 	mvn.w	r0, #1
 80006ca:	f000 fc0a 	bl	8000ee2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <HAL_MspInit+0x6c>)
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <HAL_MspInit+0x6c>)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40010000 	.word	0x40010000

080006fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a14      	ldr	r2, [pc, #80]	; (8000768 <HAL_ADC_MspInit+0x6c>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d121      	bne.n	8000760 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <HAL_ADC_MspInit+0x70>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a12      	ldr	r2, [pc, #72]	; (800076c <HAL_ADC_MspInit+0x70>)
 8000722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b10      	ldr	r3, [pc, #64]	; (800076c <HAL_ADC_MspInit+0x70>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <HAL_ADC_MspInit+0x70>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a0c      	ldr	r2, [pc, #48]	; (800076c <HAL_ADC_MspInit+0x70>)
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <HAL_ADC_MspInit+0x70>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0308 	and.w	r3, r3, #8
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_POT_Pin;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000750:	2303      	movs	r3, #3
 8000752:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC1_POT_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <HAL_ADC_MspInit+0x74>)
 800075c:	f000 fbec 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000760:	bf00      	nop
 8000762:	3720      	adds	r7, #32
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40012400 	.word	0x40012400
 800076c:	40021000 	.word	0x40021000
 8000770:	40010c00 	.word	0x40010c00

08000774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	; 0x30
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000784:	2300      	movs	r3, #0
 8000786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800078a:	4b2e      	ldr	r3, [pc, #184]	; (8000844 <HAL_InitTick+0xd0>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	4a2d      	ldr	r2, [pc, #180]	; (8000844 <HAL_InitTick+0xd0>)
 8000790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000794:	6193      	str	r3, [r2, #24]
 8000796:	4b2b      	ldr	r3, [pc, #172]	; (8000844 <HAL_InitTick+0xd0>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007a2:	f107 020c 	add.w	r2, r7, #12
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f947 	bl	8001a40 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007b2:	f001 f931 	bl	8001a18 <HAL_RCC_GetPCLK2Freq>
 80007b6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ba:	4a23      	ldr	r2, [pc, #140]	; (8000848 <HAL_InitTick+0xd4>)
 80007bc:	fba2 2303 	umull	r2, r3, r2, r3
 80007c0:	0c9b      	lsrs	r3, r3, #18
 80007c2:	3b01      	subs	r3, #1
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <HAL_InitTick+0xd8>)
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <HAL_InitTick+0xdc>)
 80007ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <HAL_InitTick+0xd8>)
 80007ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007d2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007d4:	4a1d      	ldr	r2, [pc, #116]	; (800084c <HAL_InitTick+0xd8>)
 80007d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <HAL_InitTick+0xd8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <HAL_InitTick+0xd8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <HAL_InitTick+0xd8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80007ec:	4817      	ldr	r0, [pc, #92]	; (800084c <HAL_InitTick+0xd8>)
 80007ee:	f001 fa2b 	bl	8001c48 <HAL_TIM_Base_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80007f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d11b      	bne.n	8000838 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000800:	4812      	ldr	r0, [pc, #72]	; (800084c <HAL_InitTick+0xd8>)
 8000802:	f001 fa79 	bl	8001cf8 <HAL_TIM_Base_Start_IT>
 8000806:	4603      	mov	r3, r0
 8000808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800080c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000810:	2b00      	cmp	r3, #0
 8000812:	d111      	bne.n	8000838 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000814:	2019      	movs	r0, #25
 8000816:	f000 fb80 	bl	8000f1a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d808      	bhi.n	8000832 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000820:	2200      	movs	r2, #0
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	2019      	movs	r0, #25
 8000826:	f000 fb5c 	bl	8000ee2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <HAL_InitTick+0xe0>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	e002      	b.n	8000838 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000838:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800083c:	4618      	mov	r0, r3
 800083e:	3730      	adds	r7, #48	; 0x30
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40021000 	.word	0x40021000
 8000848:	431bde83 	.word	0x431bde83
 800084c:	20000388 	.word	0x20000388
 8000850:	40012c00 	.word	0x40012c00
 8000854:	20000010 	.word	0x20000010

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
	...

08000884 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <TIM1_UP_IRQHandler+0x10>)
 800088a:	f001 fa87 	bl	8001d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000388 	.word	0x20000388

08000898 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a4:	480c      	ldr	r0, [pc, #48]	; (80008d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008a6:	490d      	ldr	r1, [pc, #52]	; (80008dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008bc:	4c0a      	ldr	r4, [pc, #40]	; (80008e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008ca:	f7ff ffe5 	bl	8000898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ce:	f002 fe07 	bl	80034e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d2:	f7ff fd75 	bl	80003c0 <main>
  bx lr
 80008d6:	4770      	bx	lr
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80008e0:	08003794 	.word	0x08003794
  ldr r2, =_sbss
 80008e4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80008e8:	20001128 	.word	0x20001128

080008ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC1_2_IRQHandler>
	...

080008f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_Init+0x28>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_Init+0x28>)
 80008fa:	f043 0310 	orr.w	r3, r3, #16
 80008fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 fae3 	bl	8000ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000906:	200f      	movs	r0, #15
 8000908:	f7ff ff34 	bl	8000774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090c:	f7ff febe 	bl	800068c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40022000 	.word	0x40022000

0800091c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_IncTick+0x1c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_IncTick+0x20>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a03      	ldr	r2, [pc, #12]	; (800093c <HAL_IncTick+0x20>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000014 	.word	0x20000014
 800093c:	200003d0 	.word	0x200003d0

08000940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <HAL_GetTick+0x10>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	200003d0 	.word	0x200003d0

08000954 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800095c:	2300      	movs	r3, #0
 800095e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e0be      	b.n	8000af4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000980:	2b00      	cmp	r3, #0
 8000982:	d109      	bne.n	8000998 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff feb2 	bl	80006fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f000 f9ab 	bl	8000cf4 <ADC_ConversionStop_Disable>
 800099e:	4603      	mov	r3, r0
 80009a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a6:	f003 0310 	and.w	r3, r3, #16
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f040 8099 	bne.w	8000ae2 <HAL_ADC_Init+0x18e>
 80009b0:	7dfb      	ldrb	r3, [r7, #23]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f040 8095 	bne.w	8000ae2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009c0:	f023 0302 	bic.w	r3, r3, #2
 80009c4:	f043 0202 	orr.w	r2, r3, #2
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	7b1b      	ldrb	r3, [r3, #12]
 80009da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009ec:	d003      	beq.n	80009f6 <HAL_ADC_Init+0xa2>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d102      	bne.n	80009fc <HAL_ADC_Init+0xa8>
 80009f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fa:	e000      	b.n	80009fe <HAL_ADC_Init+0xaa>
 80009fc:	2300      	movs	r3, #0
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	7d1b      	ldrb	r3, [r3, #20]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d119      	bne.n	8000a40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	7b1b      	ldrb	r3, [r3, #12]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d109      	bne.n	8000a28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	035a      	lsls	r2, r3, #13
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	e00b      	b.n	8000a40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a2c:	f043 0220 	orr.w	r2, r3, #32
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a38:	f043 0201 	orr.w	r2, r3, #1
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	430a      	orrs	r2, r1
 8000a52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	4b28      	ldr	r3, [pc, #160]	; (8000afc <HAL_ADC_Init+0x1a8>)
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	6812      	ldr	r2, [r2, #0]
 8000a62:	68b9      	ldr	r1, [r7, #8]
 8000a64:	430b      	orrs	r3, r1
 8000a66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a70:	d003      	beq.n	8000a7a <HAL_ADC_Init+0x126>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d104      	bne.n	8000a84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	691b      	ldr	r3, [r3, #16]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	051b      	lsls	r3, r3, #20
 8000a82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	430a      	orrs	r2, r1
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_ADC_Init+0x1ac>)
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d10b      	bne.n	8000ac0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab2:	f023 0303 	bic.w	r3, r3, #3
 8000ab6:	f043 0201 	orr.w	r2, r3, #1
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000abe:	e018      	b.n	8000af2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac4:	f023 0312 	bic.w	r3, r3, #18
 8000ac8:	f043 0210 	orr.w	r2, r3, #16
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad4:	f043 0201 	orr.w	r2, r3, #1
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ae0:	e007      	b.n	8000af2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae6:	f043 0210 	orr.w	r2, r3, #16
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	ffe1f7fd 	.word	0xffe1f7fd
 8000b00:	ff1f0efe 	.word	0xff1f0efe

08000b04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d101      	bne.n	8000b24 <HAL_ADC_ConfigChannel+0x20>
 8000b20:	2302      	movs	r3, #2
 8000b22:	e0dc      	b.n	8000cde <HAL_ADC_ConfigChannel+0x1da>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2201      	movs	r2, #1
 8000b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	2b06      	cmp	r3, #6
 8000b32:	d81c      	bhi.n	8000b6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	3b05      	subs	r3, #5
 8000b46:	221f      	movs	r2, #31
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	4019      	ands	r1, r3
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	3b05      	subs	r3, #5
 8000b60:	fa00 f203 	lsl.w	r2, r0, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	635a      	str	r2, [r3, #52]	; 0x34
 8000b6c:	e03c      	b.n	8000be8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2b0c      	cmp	r3, #12
 8000b74:	d81c      	bhi.n	8000bb0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	4613      	mov	r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4413      	add	r3, r2
 8000b86:	3b23      	subs	r3, #35	; 0x23
 8000b88:	221f      	movs	r2, #31
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	4019      	ands	r1, r3
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4413      	add	r3, r2
 8000ba0:	3b23      	subs	r3, #35	; 0x23
 8000ba2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	430a      	orrs	r2, r1
 8000bac:	631a      	str	r2, [r3, #48]	; 0x30
 8000bae:	e01b      	b.n	8000be8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685a      	ldr	r2, [r3, #4]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	4413      	add	r3, r2
 8000bc0:	3b41      	subs	r3, #65	; 0x41
 8000bc2:	221f      	movs	r2, #31
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	4019      	ands	r1, r3
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4413      	add	r3, r2
 8000bda:	3b41      	subs	r3, #65	; 0x41
 8000bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	430a      	orrs	r2, r1
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b09      	cmp	r3, #9
 8000bee:	d91c      	bls.n	8000c2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	68d9      	ldr	r1, [r3, #12]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4413      	add	r3, r2
 8000c00:	3b1e      	subs	r3, #30
 8000c02:	2207      	movs	r2, #7
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	4019      	ands	r1, r3
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	6898      	ldr	r0, [r3, #8]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4613      	mov	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	3b1e      	subs	r3, #30
 8000c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	e019      	b.n	8000c5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	6919      	ldr	r1, [r3, #16]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4613      	mov	r3, r2
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	4413      	add	r3, r2
 8000c3a:	2207      	movs	r2, #7
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	4019      	ands	r1, r3
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	6898      	ldr	r0, [r3, #8]
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	fa00 f203 	lsl.w	r2, r0, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b10      	cmp	r3, #16
 8000c64:	d003      	beq.n	8000c6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c6a:	2b11      	cmp	r3, #17
 8000c6c:	d132      	bne.n	8000cd4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a1d      	ldr	r2, [pc, #116]	; (8000ce8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d125      	bne.n	8000cc4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d126      	bne.n	8000cd4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000c94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b10      	cmp	r3, #16
 8000c9c:	d11a      	bne.n	8000cd4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_ADC_ConfigChannel+0x1e8>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca8:	0c9a      	lsrs	r2, r3, #18
 8000caa:	4613      	mov	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cb4:	e002      	b.n	8000cbc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f9      	bne.n	8000cb6 <HAL_ADC_ConfigChannel+0x1b2>
 8000cc2:	e007      	b.n	8000cd4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc8:	f043 0220 	orr.w	r2, r3, #32
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	40012400 	.word	0x40012400
 8000cec:	2000000c 	.word	0x2000000c
 8000cf0:	431bde83 	.word	0x431bde83

08000cf4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d12e      	bne.n	8000d6c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 0201 	bic.w	r2, r2, #1
 8000d1c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d1e:	f7ff fe0f 	bl	8000940 <HAL_GetTick>
 8000d22:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d24:	e01b      	b.n	8000d5e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d26:	f7ff fe0b 	bl	8000940 <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d914      	bls.n	8000d5e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d10d      	bne.n	8000d5e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d46:	f043 0210 	orr.w	r2, r3, #16
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d52:	f043 0201 	orr.w	r2, r3, #1
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e007      	b.n	8000d6e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d0dc      	beq.n	8000d26 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db0b      	blt.n	8000e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 021f 	and.w	r2, r3, #31
 8000df4:	4906      	ldr	r1, [pc, #24]	; (8000e10 <__NVIC_EnableIRQ+0x34>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	095b      	lsrs	r3, r3, #5
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	; (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff4f 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef4:	f7ff ff64 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	6978      	ldr	r0, [r7, #20]
 8000f00:	f7ff ffb2 	bl	8000e68 <NVIC_EncodePriority>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff81 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff57 	bl	8000ddc <__NVIC_EnableIRQ>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b08b      	sub	sp, #44	; 0x2c
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4a:	e169      	b.n	8001220 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 8158 	bne.w	800121a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	4a9a      	ldr	r2, [pc, #616]	; (80011d8 <HAL_GPIO_Init+0x2a0>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d05e      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
 8000f74:	4a98      	ldr	r2, [pc, #608]	; (80011d8 <HAL_GPIO_Init+0x2a0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d875      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000f7a:	4a98      	ldr	r2, [pc, #608]	; (80011dc <HAL_GPIO_Init+0x2a4>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d058      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
 8000f80:	4a96      	ldr	r2, [pc, #600]	; (80011dc <HAL_GPIO_Init+0x2a4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d86f      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000f86:	4a96      	ldr	r2, [pc, #600]	; (80011e0 <HAL_GPIO_Init+0x2a8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d052      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
 8000f8c:	4a94      	ldr	r2, [pc, #592]	; (80011e0 <HAL_GPIO_Init+0x2a8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d869      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000f92:	4a94      	ldr	r2, [pc, #592]	; (80011e4 <HAL_GPIO_Init+0x2ac>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d04c      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
 8000f98:	4a92      	ldr	r2, [pc, #584]	; (80011e4 <HAL_GPIO_Init+0x2ac>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d863      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000f9e:	4a92      	ldr	r2, [pc, #584]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d046      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
 8000fa4:	4a90      	ldr	r2, [pc, #576]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d85d      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000faa:	2b12      	cmp	r3, #18
 8000fac:	d82a      	bhi.n	8001004 <HAL_GPIO_Init+0xcc>
 8000fae:	2b12      	cmp	r3, #18
 8000fb0:	d859      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000fb2:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <HAL_GPIO_Init+0x80>)
 8000fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb8:	08001033 	.word	0x08001033
 8000fbc:	0800100d 	.word	0x0800100d
 8000fc0:	0800101f 	.word	0x0800101f
 8000fc4:	08001061 	.word	0x08001061
 8000fc8:	08001067 	.word	0x08001067
 8000fcc:	08001067 	.word	0x08001067
 8000fd0:	08001067 	.word	0x08001067
 8000fd4:	08001067 	.word	0x08001067
 8000fd8:	08001067 	.word	0x08001067
 8000fdc:	08001067 	.word	0x08001067
 8000fe0:	08001067 	.word	0x08001067
 8000fe4:	08001067 	.word	0x08001067
 8000fe8:	08001067 	.word	0x08001067
 8000fec:	08001067 	.word	0x08001067
 8000ff0:	08001067 	.word	0x08001067
 8000ff4:	08001067 	.word	0x08001067
 8000ff8:	08001067 	.word	0x08001067
 8000ffc:	08001015 	.word	0x08001015
 8001000:	08001029 	.word	0x08001029
 8001004:	4a79      	ldr	r2, [pc, #484]	; (80011ec <HAL_GPIO_Init+0x2b4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800100a:	e02c      	b.n	8001066 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	623b      	str	r3, [r7, #32]
          break;
 8001012:	e029      	b.n	8001068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	3304      	adds	r3, #4
 800101a:	623b      	str	r3, [r7, #32]
          break;
 800101c:	e024      	b.n	8001068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	3308      	adds	r3, #8
 8001024:	623b      	str	r3, [r7, #32]
          break;
 8001026:	e01f      	b.n	8001068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	330c      	adds	r3, #12
 800102e:	623b      	str	r3, [r7, #32]
          break;
 8001030:	e01a      	b.n	8001068 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800103a:	2304      	movs	r3, #4
 800103c:	623b      	str	r3, [r7, #32]
          break;
 800103e:	e013      	b.n	8001068 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d105      	bne.n	8001054 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001048:	2308      	movs	r3, #8
 800104a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	611a      	str	r2, [r3, #16]
          break;
 8001052:	e009      	b.n	8001068 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001054:	2308      	movs	r3, #8
 8001056:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69fa      	ldr	r2, [r7, #28]
 800105c:	615a      	str	r2, [r3, #20]
          break;
 800105e:	e003      	b.n	8001068 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
          break;
 8001064:	e000      	b.n	8001068 <HAL_GPIO_Init+0x130>
          break;
 8001066:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	2bff      	cmp	r3, #255	; 0xff
 800106c:	d801      	bhi.n	8001072 <HAL_GPIO_Init+0x13a>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	e001      	b.n	8001076 <HAL_GPIO_Init+0x13e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3304      	adds	r3, #4
 8001076:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	2bff      	cmp	r3, #255	; 0xff
 800107c:	d802      	bhi.n	8001084 <HAL_GPIO_Init+0x14c>
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	e002      	b.n	800108a <HAL_GPIO_Init+0x152>
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	3b08      	subs	r3, #8
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	210f      	movs	r1, #15
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	401a      	ands	r2, r3
 800109c:	6a39      	ldr	r1, [r7, #32]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	431a      	orrs	r2, r3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 80b1 	beq.w	800121a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010b8:	4b4d      	ldr	r3, [pc, #308]	; (80011f0 <HAL_GPIO_Init+0x2b8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a4c      	ldr	r2, [pc, #304]	; (80011f0 <HAL_GPIO_Init+0x2b8>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b4a      	ldr	r3, [pc, #296]	; (80011f0 <HAL_GPIO_Init+0x2b8>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010d0:	4a48      	ldr	r2, [pc, #288]	; (80011f4 <HAL_GPIO_Init+0x2bc>)
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	4013      	ands	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a40      	ldr	r2, [pc, #256]	; (80011f8 <HAL_GPIO_Init+0x2c0>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d013      	beq.n	8001124 <HAL_GPIO_Init+0x1ec>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a3f      	ldr	r2, [pc, #252]	; (80011fc <HAL_GPIO_Init+0x2c4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d00d      	beq.n	8001120 <HAL_GPIO_Init+0x1e8>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a3e      	ldr	r2, [pc, #248]	; (8001200 <HAL_GPIO_Init+0x2c8>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d007      	beq.n	800111c <HAL_GPIO_Init+0x1e4>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a3d      	ldr	r2, [pc, #244]	; (8001204 <HAL_GPIO_Init+0x2cc>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d101      	bne.n	8001118 <HAL_GPIO_Init+0x1e0>
 8001114:	2303      	movs	r3, #3
 8001116:	e006      	b.n	8001126 <HAL_GPIO_Init+0x1ee>
 8001118:	2304      	movs	r3, #4
 800111a:	e004      	b.n	8001126 <HAL_GPIO_Init+0x1ee>
 800111c:	2302      	movs	r3, #2
 800111e:	e002      	b.n	8001126 <HAL_GPIO_Init+0x1ee>
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <HAL_GPIO_Init+0x1ee>
 8001124:	2300      	movs	r3, #0
 8001126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001128:	f002 0203 	and.w	r2, r2, #3
 800112c:	0092      	lsls	r2, r2, #2
 800112e:	4093      	lsls	r3, r2
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	4313      	orrs	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001136:	492f      	ldr	r1, [pc, #188]	; (80011f4 <HAL_GPIO_Init+0x2bc>)
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3302      	adds	r3, #2
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	492c      	ldr	r1, [pc, #176]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	600b      	str	r3, [r1, #0]
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800115e:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	43db      	mvns	r3, r3
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001168:	4013      	ands	r3, r2
 800116a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d006      	beq.n	8001186 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	4922      	ldr	r1, [pc, #136]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	43db      	mvns	r3, r3
 800118e:	491e      	ldr	r1, [pc, #120]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001190:	4013      	ands	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d006      	beq.n	80011ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	4918      	ldr	r1, [pc, #96]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	608b      	str	r3, [r1, #8]
 80011ac:	e006      	b.n	80011bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	4914      	ldr	r1, [pc, #80]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d021      	beq.n	800120c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	490e      	ldr	r1, [pc, #56]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	60cb      	str	r3, [r1, #12]
 80011d4:	e021      	b.n	800121a <HAL_GPIO_Init+0x2e2>
 80011d6:	bf00      	nop
 80011d8:	10320000 	.word	0x10320000
 80011dc:	10310000 	.word	0x10310000
 80011e0:	10220000 	.word	0x10220000
 80011e4:	10210000 	.word	0x10210000
 80011e8:	10120000 	.word	0x10120000
 80011ec:	10110000 	.word	0x10110000
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010000 	.word	0x40010000
 80011f8:	40010800 	.word	0x40010800
 80011fc:	40010c00 	.word	0x40010c00
 8001200:	40011000 	.word	0x40011000
 8001204:	40011400 	.word	0x40011400
 8001208:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_GPIO_Init+0x304>)
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	43db      	mvns	r3, r3
 8001214:	4909      	ldr	r1, [pc, #36]	; (800123c <HAL_GPIO_Init+0x304>)
 8001216:	4013      	ands	r3, r2
 8001218:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	3301      	adds	r3, #1
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	fa22 f303 	lsr.w	r3, r2, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	f47f ae8e 	bne.w	8000f4c <HAL_GPIO_Init+0x14>
  }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	372c      	adds	r7, #44	; 0x2c
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	40010400 	.word	0x40010400

08001240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
 800124c:	4613      	mov	r3, r2
 800124e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800125c:	e003      	b.n	8001266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800125e:	887b      	ldrh	r3, [r7, #2]
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	611a      	str	r2, [r3, #16]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e272      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8087 	beq.w	800139e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001290:	4b92      	ldr	r3, [pc, #584]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 030c 	and.w	r3, r3, #12
 8001298:	2b04      	cmp	r3, #4
 800129a:	d00c      	beq.n	80012b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800129c:	4b8f      	ldr	r3, [pc, #572]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 030c 	and.w	r3, r3, #12
 80012a4:	2b08      	cmp	r3, #8
 80012a6:	d112      	bne.n	80012ce <HAL_RCC_OscConfig+0x5e>
 80012a8:	4b8c      	ldr	r3, [pc, #560]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b4:	d10b      	bne.n	80012ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b6:	4b89      	ldr	r3, [pc, #548]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d06c      	beq.n	800139c <HAL_RCC_OscConfig+0x12c>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d168      	bne.n	800139c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e24c      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d6:	d106      	bne.n	80012e6 <HAL_RCC_OscConfig+0x76>
 80012d8:	4b80      	ldr	r3, [pc, #512]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a7f      	ldr	r2, [pc, #508]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	e02e      	b.n	8001344 <HAL_RCC_OscConfig+0xd4>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10c      	bne.n	8001308 <HAL_RCC_OscConfig+0x98>
 80012ee:	4b7b      	ldr	r3, [pc, #492]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a7a      	ldr	r2, [pc, #488]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b78      	ldr	r3, [pc, #480]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a77      	ldr	r2, [pc, #476]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e01d      	b.n	8001344 <HAL_RCC_OscConfig+0xd4>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0xbc>
 8001312:	4b72      	ldr	r3, [pc, #456]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a71      	ldr	r2, [pc, #452]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b6f      	ldr	r3, [pc, #444]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a6e      	ldr	r2, [pc, #440]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e00b      	b.n	8001344 <HAL_RCC_OscConfig+0xd4>
 800132c:	4b6b      	ldr	r3, [pc, #428]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a6a      	ldr	r2, [pc, #424]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b68      	ldr	r3, [pc, #416]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a67      	ldr	r2, [pc, #412]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 800133e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001342:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d013      	beq.n	8001374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff faf8 	bl	8000940 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff faf4 	bl	8000940 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	; 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e200      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0xe4>
 8001372:	e014      	b.n	800139e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fae4 	bl	8000940 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fae0 	bl	8000940 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e1ec      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	4b53      	ldr	r3, [pc, #332]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x10c>
 800139a:	e000      	b.n	800139e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d063      	beq.n	8001472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013aa:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00b      	beq.n	80013ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013b6:	4b49      	ldr	r3, [pc, #292]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d11c      	bne.n	80013fc <HAL_RCC_OscConfig+0x18c>
 80013c2:	4b46      	ldr	r3, [pc, #280]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d116      	bne.n	80013fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ce:	4b43      	ldr	r3, [pc, #268]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d005      	beq.n	80013e6 <HAL_RCC_OscConfig+0x176>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e1c0      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e6:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4939      	ldr	r1, [pc, #228]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fa:	e03a      	b.n	8001472 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d020      	beq.n	8001446 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140a:	f7ff fa99 	bl	8000940 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001412:	f7ff fa95 	bl	8000940 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e1a1      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001430:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4927      	ldr	r1, [pc, #156]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
 8001444:	e015      	b.n	8001472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fa78 	bl	8000940 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001454:	f7ff fa74 	bl	8000940 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e180      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d03a      	beq.n	80014f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d019      	beq.n	80014ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_RCC_OscConfig+0x274>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148c:	f7ff fa58 	bl	8000940 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff fa54 	bl	8000940 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e160      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <HAL_RCC_OscConfig+0x26c>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f000 faf4 	bl	8001aa0 <RCC_Delay>
 80014b8:	e01c      	b.n	80014f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_RCC_OscConfig+0x274>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c0:	f7ff fa3e 	bl	8000940 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c6:	e00f      	b.n	80014e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c8:	f7ff fa3a 	bl	8000940 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d908      	bls.n	80014e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e146      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000
 80014e0:	42420000 	.word	0x42420000
 80014e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	4b92      	ldr	r3, [pc, #584]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1e9      	bne.n	80014c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80a6 	beq.w	800164e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001506:	4b8b      	ldr	r3, [pc, #556]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10d      	bne.n	800152e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b88      	ldr	r3, [pc, #544]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a87      	ldr	r2, [pc, #540]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	61d3      	str	r3, [r2, #28]
 800151e:	4b85      	ldr	r3, [pc, #532]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152a:	2301      	movs	r3, #1
 800152c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152e:	4b82      	ldr	r3, [pc, #520]	; (8001738 <HAL_RCC_OscConfig+0x4c8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001536:	2b00      	cmp	r3, #0
 8001538:	d118      	bne.n	800156c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153a:	4b7f      	ldr	r3, [pc, #508]	; (8001738 <HAL_RCC_OscConfig+0x4c8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a7e      	ldr	r2, [pc, #504]	; (8001738 <HAL_RCC_OscConfig+0x4c8>)
 8001540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001546:	f7ff f9fb 	bl	8000940 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154e:	f7ff f9f7 	bl	8000940 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b64      	cmp	r3, #100	; 0x64
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e103      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	4b75      	ldr	r3, [pc, #468]	; (8001738 <HAL_RCC_OscConfig+0x4c8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x312>
 8001574:	4b6f      	ldr	r3, [pc, #444]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	4a6e      	ldr	r2, [pc, #440]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6213      	str	r3, [r2, #32]
 8001580:	e02d      	b.n	80015de <HAL_RCC_OscConfig+0x36e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x334>
 800158a:	4b6a      	ldr	r3, [pc, #424]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4a69      	ldr	r2, [pc, #420]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	6213      	str	r3, [r2, #32]
 8001596:	4b67      	ldr	r3, [pc, #412]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4a66      	ldr	r2, [pc, #408]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	f023 0304 	bic.w	r3, r3, #4
 80015a0:	6213      	str	r3, [r2, #32]
 80015a2:	e01c      	b.n	80015de <HAL_RCC_OscConfig+0x36e>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	2b05      	cmp	r3, #5
 80015aa:	d10c      	bne.n	80015c6 <HAL_RCC_OscConfig+0x356>
 80015ac:	4b61      	ldr	r3, [pc, #388]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4a60      	ldr	r2, [pc, #384]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	6213      	str	r3, [r2, #32]
 80015b8:	4b5e      	ldr	r3, [pc, #376]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	4a5d      	ldr	r2, [pc, #372]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6213      	str	r3, [r2, #32]
 80015c4:	e00b      	b.n	80015de <HAL_RCC_OscConfig+0x36e>
 80015c6:	4b5b      	ldr	r3, [pc, #364]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4a5a      	ldr	r2, [pc, #360]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	6213      	str	r3, [r2, #32]
 80015d2:	4b58      	ldr	r3, [pc, #352]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	4a57      	ldr	r2, [pc, #348]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	f023 0304 	bic.w	r3, r3, #4
 80015dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d015      	beq.n	8001612 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7ff f9ab 	bl	8000940 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f7ff f9a7 	bl	8000940 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e0b1      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001604:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ee      	beq.n	80015ee <HAL_RCC_OscConfig+0x37e>
 8001610:	e014      	b.n	800163c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001612:	f7ff f995 	bl	8000940 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff f991 	bl	8000940 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e09b      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001630:	4b40      	ldr	r3, [pc, #256]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1ee      	bne.n	800161a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d105      	bne.n	800164e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001642:	4b3c      	ldr	r3, [pc, #240]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a3b      	ldr	r2, [pc, #236]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 8087 	beq.w	8001766 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001658:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 030c 	and.w	r3, r3, #12
 8001660:	2b08      	cmp	r3, #8
 8001662:	d061      	beq.n	8001728 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d146      	bne.n	80016fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166c:	4b33      	ldr	r3, [pc, #204]	; (800173c <HAL_RCC_OscConfig+0x4cc>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff f965 	bl	8000940 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167a:	f7ff f961 	bl	8000940 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e06d      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f0      	bne.n	800167a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a0:	d108      	bne.n	80016b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016a2:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	4921      	ldr	r1, [pc, #132]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b4:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a19      	ldr	r1, [r3, #32]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	430b      	orrs	r3, r1
 80016c6:	491b      	ldr	r1, [pc, #108]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_RCC_OscConfig+0x4cc>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff f935 	bl	8000940 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff f931 	bl	8000940 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e03d      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x46a>
 80016f8:	e035      	b.n	8001766 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_RCC_OscConfig+0x4cc>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff f91e 	bl	8000940 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff f91a 	bl	8000940 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e026      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x498>
 8001726:	e01e      	b.n	8001766 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d107      	bne.n	8001740 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e019      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
 8001734:	40021000 	.word	0x40021000
 8001738:	40007000 	.word	0x40007000
 800173c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_RCC_OscConfig+0x500>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	429a      	cmp	r2, r3
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d001      	beq.n	8001766 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0d0      	b.n	800192a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b6a      	ldr	r3, [pc, #424]	; (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d910      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b67      	ldr	r3, [pc, #412]	; (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 0207 	bic.w	r2, r3, #7
 800179e:	4965      	ldr	r1, [pc, #404]	; (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b63      	ldr	r3, [pc, #396]	; (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0b8      	b.n	800192a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d020      	beq.n	8001806 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d0:	4b59      	ldr	r3, [pc, #356]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4a58      	ldr	r2, [pc, #352]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	4a52      	ldr	r2, [pc, #328]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f4:	4b50      	ldr	r3, [pc, #320]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	494d      	ldr	r1, [pc, #308]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d040      	beq.n	8001894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	4b47      	ldr	r3, [pc, #284]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d115      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e07f      	b.n	800192a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d109      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e073      	b.n	800192a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001842:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e06b      	b.n	800192a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001852:	4b39      	ldr	r3, [pc, #228]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f023 0203 	bic.w	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4936      	ldr	r1, [pc, #216]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001864:	f7ff f86c 	bl	8000940 <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	e00a      	b.n	8001882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186c:	f7ff f868 	bl	8000940 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e053      	b.n	800192a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 020c 	and.w	r2, r3, #12
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	429a      	cmp	r2, r3
 8001892:	d1eb      	bne.n	800186c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001894:	4b27      	ldr	r3, [pc, #156]	; (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d210      	bcs.n	80018c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 0207 	bic.w	r2, r3, #7
 80018aa:	4922      	ldr	r1, [pc, #136]	; (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e032      	b.n	800192a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4916      	ldr	r1, [pc, #88]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	490e      	ldr	r1, [pc, #56]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001902:	f000 f821 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8001906:	4602      	mov	r2, r0
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	490a      	ldr	r1, [pc, #40]	; (800193c <HAL_RCC_ClockConfig+0x1c8>)
 8001914:	5ccb      	ldrb	r3, [r1, r3]
 8001916:	fa22 f303 	lsr.w	r3, r2, r3
 800191a:	4a09      	ldr	r2, [pc, #36]	; (8001940 <HAL_RCC_ClockConfig+0x1cc>)
 800191c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1d0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe ff26 	bl	8000774 <HAL_InitTick>

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40022000 	.word	0x40022000
 8001938:	40021000 	.word	0x40021000
 800193c:	08003714 	.word	0x08003714
 8001940:	2000000c 	.word	0x2000000c
 8001944:	20000010 	.word	0x20000010

08001948 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001948:	b490      	push	{r4, r7}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800194e:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001950:	1d3c      	adds	r4, r7, #4
 8001952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001958:	f240 2301 	movw	r3, #513	; 0x201
 800195c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b04      	cmp	r3, #4
 8001980:	d002      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x40>
 8001982:	2b08      	cmp	r3, #8
 8001984:	d003      	beq.n	800198e <HAL_RCC_GetSysClockFreq+0x46>
 8001986:	e02b      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001988:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800198a:	623b      	str	r3, [r7, #32]
      break;
 800198c:	e02b      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	0c9b      	lsrs	r3, r3, #18
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3328      	adds	r3, #40	; 0x28
 8001998:	443b      	add	r3, r7
 800199a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800199e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d012      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	0c5b      	lsrs	r3, r3, #17
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	3328      	adds	r3, #40	; 0x28
 80019b6:	443b      	add	r3, r7
 80019b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80019c2:	fb03 f202 	mul.w	r2, r3, r2
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
 80019ce:	e004      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019d4:	fb02 f303 	mul.w	r3, r2, r3
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	623b      	str	r3, [r7, #32]
      break;
 80019de:	e002      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80019e2:	623b      	str	r3, [r7, #32]
      break;
 80019e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e6:	6a3b      	ldr	r3, [r7, #32]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3728      	adds	r7, #40	; 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc90      	pop	{r4, r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	080036fc 	.word	0x080036fc
 80019f8:	40021000 	.word	0x40021000
 80019fc:	007a1200 	.word	0x007a1200
 8001a00:	003d0900 	.word	0x003d0900

08001a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a08:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	2000000c 	.word	0x2000000c

08001a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a1c:	f7ff fff2 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	0adb      	lsrs	r3, r3, #11
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	4903      	ldr	r1, [pc, #12]	; (8001a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a2e:	5ccb      	ldrb	r3, [r1, r3]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	08003724 	.word	0x08003724

08001a40 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_RCC_GetClockConfig+0x58>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0203 	and.w	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_RCC_GetClockConfig+0x58>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_GetClockConfig+0x58>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_RCC_GetClockConfig+0x58>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	08db      	lsrs	r3, r3, #3
 8001a7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_RCC_GetClockConfig+0x5c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0207 	and.w	r2, r3, #7
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40022000 	.word	0x40022000

08001aa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <RCC_Delay+0x34>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <RCC_Delay+0x38>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	0a5b      	lsrs	r3, r3, #9
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	fb02 f303 	mul.w	r3, r2, r3
 8001aba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001abc:	bf00      	nop
  }
  while (Delay --);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1e5a      	subs	r2, r3, #1
 8001ac2:	60fa      	str	r2, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f9      	bne.n	8001abc <RCC_Delay+0x1c>
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	2000000c 	.word	0x2000000c
 8001ad8:	10624dd3 	.word	0x10624dd3

08001adc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d07d      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afc:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10d      	bne.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b08:	4b4c      	ldr	r3, [pc, #304]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	4a4b      	ldr	r2, [pc, #300]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b12:	61d3      	str	r3, [r2, #28]
 8001b14:	4b49      	ldr	r3, [pc, #292]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b20:	2301      	movs	r3, #1
 8001b22:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b24:	4b46      	ldr	r3, [pc, #280]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d118      	bne.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b30:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a42      	ldr	r2, [pc, #264]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3c:	f7fe ff00 	bl	8000940 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b42:	e008      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b44:	f7fe fefc 	bl	8000940 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e06d      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b56:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b62:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d02e      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d027      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b80:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b90:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b96:	4a29      	ldr	r2, [pc, #164]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d014      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7fe fecb 	bl	8000940 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7fe fec7 	bl	8000940 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e036      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0ee      	beq.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4917      	ldr	r1, [pc, #92]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	490b      	ldr	r1, [pc, #44]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d008      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	4904      	ldr	r1, [pc, #16]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40007000 	.word	0x40007000
 8001c44:	42420440 	.word	0x42420440

08001c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e041      	b.n	8001cde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f839 	bl	8001ce6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3304      	adds	r3, #4
 8001c84:	4619      	mov	r1, r3
 8001c86:	4610      	mov	r0, r2
 8001c88:	f000 f9b4 	bl	8001ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d001      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e03a      	b.n	8001d86 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <HAL_TIM_Base_Start_IT+0x98>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00e      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0x58>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3a:	d009      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0x58>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <HAL_TIM_Base_Start_IT+0x9c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d004      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0x58>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a13      	ldr	r2, [pc, #76]	; (8001d98 <HAL_TIM_Base_Start_IT+0xa0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d111      	bne.n	8001d74 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d010      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d72:	e007      	b.n	8001d84 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	40012c00 	.word	0x40012c00
 8001d94:	40000400 	.word	0x40000400
 8001d98:	40000800 	.word	0x40000800

08001d9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d122      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d11b      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0202 	mvn.w	r2, #2
 8001dc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8ed 	bl	8001fbe <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8e0 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f8ef 	bl	8001fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d122      	bne.n	8001e4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d11b      	bne.n	8001e4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0204 	mvn.w	r2, #4
 8001e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2202      	movs	r2, #2
 8001e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8c3 	bl	8001fbe <HAL_TIM_IC_CaptureCallback>
 8001e38:	e005      	b.n	8001e46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8b6 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f8c5 	bl	8001fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d122      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d11b      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0208 	mvn.w	r2, #8
 8001e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2204      	movs	r2, #4
 8001e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f899 	bl	8001fbe <HAL_TIM_IC_CaptureCallback>
 8001e8c:	e005      	b.n	8001e9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f88c 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f89b 	bl	8001fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d122      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b10      	cmp	r3, #16
 8001eba:	d11b      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0210 	mvn.w	r2, #16
 8001ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f86f 	bl	8001fbe <HAL_TIM_IC_CaptureCallback>
 8001ee0:	e005      	b.n	8001eee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f862 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f871 	bl	8001fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d10e      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d107      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0201 	mvn.w	r2, #1
 8001f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe fb9e 	bl	800065c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2a:	2b80      	cmp	r3, #128	; 0x80
 8001f2c:	d10e      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f38:	2b80      	cmp	r3, #128	; 0x80
 8001f3a:	d107      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f8bf 	bl	80020ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f56:	2b40      	cmp	r3, #64	; 0x40
 8001f58:	d10e      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f64:	2b40      	cmp	r3, #64	; 0x40
 8001f66:	d107      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f835 	bl	8001fe2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	d10e      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d107      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0220 	mvn.w	r2, #32
 8001f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f88a 	bl	80020b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a29      	ldr	r2, [pc, #164]	; (80020ac <TIM_Base_SetConfig+0xb8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00b      	beq.n	8002024 <TIM_Base_SetConfig+0x30>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002012:	d007      	beq.n	8002024 <TIM_Base_SetConfig+0x30>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a26      	ldr	r2, [pc, #152]	; (80020b0 <TIM_Base_SetConfig+0xbc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d003      	beq.n	8002024 <TIM_Base_SetConfig+0x30>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a25      	ldr	r2, [pc, #148]	; (80020b4 <TIM_Base_SetConfig+0xc0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d108      	bne.n	8002036 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <TIM_Base_SetConfig+0xb8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00b      	beq.n	8002056 <TIM_Base_SetConfig+0x62>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002044:	d007      	beq.n	8002056 <TIM_Base_SetConfig+0x62>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <TIM_Base_SetConfig+0xbc>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d003      	beq.n	8002056 <TIM_Base_SetConfig+0x62>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <TIM_Base_SetConfig+0xc0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d108      	bne.n	8002068 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800205c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a07      	ldr	r2, [pc, #28]	; (80020ac <TIM_Base_SetConfig+0xb8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d103      	bne.n	800209c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	615a      	str	r2, [r3, #20]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	40012c00 	.word	0x40012c00
 80020b0:	40000400 	.word	0x40000400
 80020b4:	40000800 	.word	0x40000800

080020b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80020ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ee:	2b84      	cmp	r3, #132	; 0x84
 80020f0:	d005      	beq.n	80020fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80020f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4413      	add	r3, r2
 80020fa:	3303      	adds	r3, #3
 80020fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80020fe:	68fb      	ldr	r3, [r7, #12]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr

0800210a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800210e:	f000 fae7 	bl	80026e0 <vTaskStartScheduler>
  
  return osOK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}

08002118 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af04      	add	r7, sp, #16
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d020      	beq.n	800216c <osThreadCreate+0x54>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01c      	beq.n	800216c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685c      	ldr	r4, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681d      	ldr	r5, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691e      	ldr	r6, [r3, #16]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ffc9 	bl	80020dc <makeFreeRtosPriority>
 800214a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002154:	9202      	str	r2, [sp, #8]
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	9100      	str	r1, [sp, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	4632      	mov	r2, r6
 800215e:	4629      	mov	r1, r5
 8002160:	4620      	mov	r0, r4
 8002162:	f000 f8e8 	bl	8002336 <xTaskCreateStatic>
 8002166:	4603      	mov	r3, r0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	e01c      	b.n	80021a6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685c      	ldr	r4, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002178:	b29e      	uxth	r6, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ffab 	bl	80020dc <makeFreeRtosPriority>
 8002186:	4602      	mov	r2, r0
 8002188:	f107 030c 	add.w	r3, r7, #12
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	9200      	str	r2, [sp, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4632      	mov	r2, r6
 8002194:	4629      	mov	r1, r5
 8002196:	4620      	mov	r0, r4
 8002198:	f000 f929 	bl	80023ee <xTaskCreate>
 800219c:	4603      	mov	r3, r0
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d001      	beq.n	80021a6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e000      	b.n	80021a8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80021a6:	68fb      	ldr	r3, [r7, #12]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021b0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <osDelay+0x16>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	e000      	b.n	80021c8 <osDelay+0x18>
 80021c6:	2301      	movs	r3, #1
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fa55 	bl	8002678 <vTaskDelay>
  
  return osOK;
 80021ce:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f103 0208 	add.w	r2, r3, #8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295
 80021f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f103 0208 	add.w	r2, r3, #8
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f103 0208 	add.w	r2, r3, #8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr

08002216 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	601a      	str	r2, [r3, #0]
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228a:	d103      	bne.n	8002294 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	e00c      	b.n	80022ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3308      	adds	r3, #8
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	e002      	b.n	80022a2 <vListInsert+0x2e>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d2f6      	bcs.n	800229c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	601a      	str	r2, [r3, #0]
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6892      	ldr	r2, [r2, #8]
 80022fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6852      	ldr	r2, [r2, #4]
 8002304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	d103      	bne.n	8002318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	1e5a      	subs	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002336:	b580      	push	{r7, lr}
 8002338:	b08e      	sub	sp, #56	; 0x38
 800233a:	af04      	add	r7, sp, #16
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10a      	bne.n	8002360 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234e:	f383 8811 	msr	BASEPRI, r3
 8002352:	f3bf 8f6f 	isb	sy
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800235c:	bf00      	nop
 800235e:	e7fe      	b.n	800235e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10a      	bne.n	800237c <xTaskCreateStatic+0x46>
	__asm volatile
 8002366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236a:	f383 8811 	msr	BASEPRI, r3
 800236e:	f3bf 8f6f 	isb	sy
 8002372:	f3bf 8f4f 	dsb	sy
 8002376:	61fb      	str	r3, [r7, #28]
}
 8002378:	bf00      	nop
 800237a:	e7fe      	b.n	800237a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800237c:	23b4      	movs	r3, #180	; 0xb4
 800237e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	2bb4      	cmp	r3, #180	; 0xb4
 8002384:	d00a      	beq.n	800239c <xTaskCreateStatic+0x66>
	__asm volatile
 8002386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238a:	f383 8811 	msr	BASEPRI, r3
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	f3bf 8f4f 	dsb	sy
 8002396:	61bb      	str	r3, [r7, #24]
}
 8002398:	bf00      	nop
 800239a:	e7fe      	b.n	800239a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800239c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d01e      	beq.n	80023e0 <xTaskCreateStatic+0xaa>
 80023a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01b      	beq.n	80023e0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80023ba:	2300      	movs	r3, #0
 80023bc:	9303      	str	r3, [sp, #12]
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	9302      	str	r3, [sp, #8]
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f850 	bl	8002478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80023d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023da:	f000 f8e3 	bl	80025a4 <prvAddNewTaskToReadyList>
 80023de:	e001      	b.n	80023e4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80023e4:	697b      	ldr	r3, [r7, #20]
	}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3728      	adds	r7, #40	; 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b08c      	sub	sp, #48	; 0x30
 80023f2:	af04      	add	r7, sp, #16
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fe94 	bl	8003130 <pvPortMalloc>
 8002408:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00e      	beq.n	800242e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002410:	20b4      	movs	r0, #180	; 0xb4
 8002412:	f000 fe8d 	bl	8003130 <pvPortMalloc>
 8002416:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
 8002424:	e005      	b.n	8002432 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002426:	6978      	ldr	r0, [r7, #20]
 8002428:	f000 ff46 	bl	80032b8 <vPortFree>
 800242c:	e001      	b.n	8002432 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d017      	beq.n	8002468 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002440:	88fa      	ldrh	r2, [r7, #6]
 8002442:	2300      	movs	r3, #0
 8002444:	9303      	str	r3, [sp, #12]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	9302      	str	r3, [sp, #8]
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f80e 	bl	8002478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800245c:	69f8      	ldr	r0, [r7, #28]
 800245e:	f000 f8a1 	bl	80025a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002462:	2301      	movs	r3, #1
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	e002      	b.n	800246e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002468:	f04f 33ff 	mov.w	r3, #4294967295
 800246c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800246e:	69bb      	ldr	r3, [r7, #24]
	}
 8002470:	4618      	mov	r0, r3
 8002472:	3720      	adds	r7, #32
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002490:	3b01      	subs	r3, #1
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f023 0307 	bic.w	r3, r3, #7
 800249e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80024aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	617b      	str	r3, [r7, #20]
}
 80024bc:	bf00      	nop
 80024be:	e7fe      	b.n	80024be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	e012      	b.n	80024ec <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	7819      	ldrb	r1, [r3, #0]
 80024ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	4413      	add	r3, r2
 80024d4:	3334      	adds	r3, #52	; 0x34
 80024d6:	460a      	mov	r2, r1
 80024d8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4413      	add	r3, r2
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b0f      	cmp	r3, #15
 80024f0:	d9e9      	bls.n	80024c6 <prvInitialiseNewTask+0x4e>
 80024f2:	e000      	b.n	80024f6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80024f4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	2b06      	cmp	r3, #6
 8002502:	d901      	bls.n	8002508 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002504:	2306      	movs	r3, #6
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800250c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002512:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	2200      	movs	r2, #0
 8002518:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251c:	3304      	adds	r3, #4
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fe79 	bl	8002216 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	3318      	adds	r3, #24
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fe74 	bl	8002216 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002532:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	f1c3 0207 	rsb	r2, r3, #7
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002542:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	2200      	movs	r2, #0
 8002548:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	2200      	movs	r2, #0
 8002550:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002556:	334c      	adds	r3, #76	; 0x4c
 8002558:	2260      	movs	r2, #96	; 0x60
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f000 ffe5 	bl	800352c <memset>
 8002562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002564:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <prvInitialiseNewTask+0x120>)
 8002566:	651a      	str	r2, [r3, #80]	; 0x50
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	4a0c      	ldr	r2, [pc, #48]	; (800259c <prvInitialiseNewTask+0x124>)
 800256c:	655a      	str	r2, [r3, #84]	; 0x54
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	4a0b      	ldr	r2, [pc, #44]	; (80025a0 <prvInitialiseNewTask+0x128>)
 8002572:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	68f9      	ldr	r1, [r7, #12]
 8002578:	69b8      	ldr	r0, [r7, #24]
 800257a:	f000 fc29 	bl	8002dd0 <pxPortInitialiseStack>
 800257e:	4602      	mov	r2, r0
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800258e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002590:	bf00      	nop
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	0800374c 	.word	0x0800374c
 800259c:	0800376c 	.word	0x0800376c
 80025a0:	0800372c 	.word	0x0800372c

080025a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80025ac:	f000 fcfe 	bl	8002fac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80025b0:	4b2a      	ldr	r3, [pc, #168]	; (800265c <prvAddNewTaskToReadyList+0xb8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	4a29      	ldr	r2, [pc, #164]	; (800265c <prvAddNewTaskToReadyList+0xb8>)
 80025b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80025ba:	4b29      	ldr	r3, [pc, #164]	; (8002660 <prvAddNewTaskToReadyList+0xbc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80025c2:	4a27      	ldr	r2, [pc, #156]	; (8002660 <prvAddNewTaskToReadyList+0xbc>)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025c8:	4b24      	ldr	r3, [pc, #144]	; (800265c <prvAddNewTaskToReadyList+0xb8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d110      	bne.n	80025f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80025d0:	f000 fad2 	bl	8002b78 <prvInitialiseTaskLists>
 80025d4:	e00d      	b.n	80025f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80025d6:	4b23      	ldr	r3, [pc, #140]	; (8002664 <prvAddNewTaskToReadyList+0xc0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <prvAddNewTaskToReadyList+0xbc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d802      	bhi.n	80025f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80025ec:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <prvAddNewTaskToReadyList+0xbc>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <prvAddNewTaskToReadyList+0xc4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3301      	adds	r3, #1
 80025f8:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <prvAddNewTaskToReadyList+0xc4>)
 80025fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	2201      	movs	r2, #1
 8002602:	409a      	lsls	r2, r3
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <prvAddNewTaskToReadyList+0xc8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4313      	orrs	r3, r2
 800260a:	4a18      	ldr	r2, [pc, #96]	; (800266c <prvAddNewTaskToReadyList+0xc8>)
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4a15      	ldr	r2, [pc, #84]	; (8002670 <prvAddNewTaskToReadyList+0xcc>)
 800261c:	441a      	add	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3304      	adds	r3, #4
 8002622:	4619      	mov	r1, r3
 8002624:	4610      	mov	r0, r2
 8002626:	f7ff fe02 	bl	800222e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800262a:	f000 fcef 	bl	800300c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <prvAddNewTaskToReadyList+0xc0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00e      	beq.n	8002654 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <prvAddNewTaskToReadyList+0xbc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	429a      	cmp	r2, r3
 8002642:	d207      	bcs.n	8002654 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <prvAddNewTaskToReadyList+0xd0>)
 8002646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	200004d4 	.word	0x200004d4
 8002660:	200003d4 	.word	0x200003d4
 8002664:	200004e0 	.word	0x200004e0
 8002668:	200004f0 	.word	0x200004f0
 800266c:	200004dc 	.word	0x200004dc
 8002670:	200003d8 	.word	0x200003d8
 8002674:	e000ed04 	.word	0xe000ed04

08002678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d017      	beq.n	80026ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800268a:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <vTaskDelay+0x60>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <vTaskDelay+0x30>
	__asm volatile
 8002692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	f3bf 8f6f 	isb	sy
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	60bb      	str	r3, [r7, #8]
}
 80026a4:	bf00      	nop
 80026a6:	e7fe      	b.n	80026a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80026a8:	f000 f884 	bl	80027b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80026ac:	2100      	movs	r1, #0
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fb28 	bl	8002d04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80026b4:	f000 f88c 	bl	80027d0 <xTaskResumeAll>
 80026b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d107      	bne.n	80026d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <vTaskDelay+0x64>)
 80026c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	200004fc 	.word	0x200004fc
 80026dc:	e000ed04 	.word	0xe000ed04

080026e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80026ee:	463a      	mov	r2, r7
 80026f0:	1d39      	adds	r1, r7, #4
 80026f2:	f107 0308 	add.w	r3, r7, #8
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd fd2a 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80026fc:	6839      	ldr	r1, [r7, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	9202      	str	r2, [sp, #8]
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	2300      	movs	r3, #0
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2300      	movs	r3, #0
 800270c:	460a      	mov	r2, r1
 800270e:	4921      	ldr	r1, [pc, #132]	; (8002794 <vTaskStartScheduler+0xb4>)
 8002710:	4821      	ldr	r0, [pc, #132]	; (8002798 <vTaskStartScheduler+0xb8>)
 8002712:	f7ff fe10 	bl	8002336 <xTaskCreateStatic>
 8002716:	4603      	mov	r3, r0
 8002718:	4a20      	ldr	r2, [pc, #128]	; (800279c <vTaskStartScheduler+0xbc>)
 800271a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800271c:	4b1f      	ldr	r3, [pc, #124]	; (800279c <vTaskStartScheduler+0xbc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002724:	2301      	movs	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	e001      	b.n	800272e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d11b      	bne.n	800276c <vTaskStartScheduler+0x8c>
	__asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	613b      	str	r3, [r7, #16]
}
 8002746:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002748:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <vTaskStartScheduler+0xc0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	334c      	adds	r3, #76	; 0x4c
 800274e:	4a15      	ldr	r2, [pc, #84]	; (80027a4 <vTaskStartScheduler+0xc4>)
 8002750:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002752:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <vTaskStartScheduler+0xc8>)
 8002754:	f04f 32ff 	mov.w	r2, #4294967295
 8002758:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800275a:	4b14      	ldr	r3, [pc, #80]	; (80027ac <vTaskStartScheduler+0xcc>)
 800275c:	2201      	movs	r2, #1
 800275e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <vTaskStartScheduler+0xd0>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002766:	f000 fbaf 	bl	8002ec8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800276a:	e00e      	b.n	800278a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002772:	d10a      	bne.n	800278a <vTaskStartScheduler+0xaa>
	__asm volatile
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	60fb      	str	r3, [r7, #12]
}
 8002786:	bf00      	nop
 8002788:	e7fe      	b.n	8002788 <vTaskStartScheduler+0xa8>
}
 800278a:	bf00      	nop
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	0800370c 	.word	0x0800370c
 8002798:	08002b49 	.word	0x08002b49
 800279c:	200004f8 	.word	0x200004f8
 80027a0:	200003d4 	.word	0x200003d4
 80027a4:	2000001c 	.word	0x2000001c
 80027a8:	200004f4 	.word	0x200004f4
 80027ac:	200004e0 	.word	0x200004e0
 80027b0:	200004d8 	.word	0x200004d8

080027b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <vTaskSuspendAll+0x18>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	4a03      	ldr	r2, [pc, #12]	; (80027cc <vTaskSuspendAll+0x18>)
 80027c0:	6013      	str	r3, [r2, #0]
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	200004fc 	.word	0x200004fc

080027d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80027de:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <xTaskResumeAll+0x114>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <xTaskResumeAll+0x2c>
	__asm volatile
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	603b      	str	r3, [r7, #0]
}
 80027f8:	bf00      	nop
 80027fa:	e7fe      	b.n	80027fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80027fc:	f000 fbd6 	bl	8002fac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002800:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <xTaskResumeAll+0x114>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3b01      	subs	r3, #1
 8002806:	4a37      	ldr	r2, [pc, #220]	; (80028e4 <xTaskResumeAll+0x114>)
 8002808:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800280a:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <xTaskResumeAll+0x114>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d161      	bne.n	80028d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002812:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <xTaskResumeAll+0x118>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d05d      	beq.n	80028d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800281a:	e02e      	b.n	800287a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800281c:	4b33      	ldr	r3, [pc, #204]	; (80028ec <xTaskResumeAll+0x11c>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3318      	adds	r3, #24
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fd5b 	bl	80022e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3304      	adds	r3, #4
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fd56 	bl	80022e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	2201      	movs	r2, #1
 800283e:	409a      	lsls	r2, r3
 8002840:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <xTaskResumeAll+0x120>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4313      	orrs	r3, r2
 8002846:	4a2a      	ldr	r2, [pc, #168]	; (80028f0 <xTaskResumeAll+0x120>)
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <xTaskResumeAll+0x124>)
 8002858:	441a      	add	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3304      	adds	r3, #4
 800285e:	4619      	mov	r1, r3
 8002860:	4610      	mov	r0, r2
 8002862:	f7ff fce4 	bl	800222e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286a:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <xTaskResumeAll+0x128>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	429a      	cmp	r2, r3
 8002872:	d302      	bcc.n	800287a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002874:	4b21      	ldr	r3, [pc, #132]	; (80028fc <xTaskResumeAll+0x12c>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <xTaskResumeAll+0x11c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1cc      	bne.n	800281c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002888:	f000 fa18 	bl	8002cbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800288c:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <xTaskResumeAll+0x130>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d010      	beq.n	80028ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002898:	f000 f836 	bl	8002908 <xTaskIncrementTick>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80028a2:	4b16      	ldr	r3, [pc, #88]	; (80028fc <xTaskResumeAll+0x12c>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f1      	bne.n	8002898 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <xTaskResumeAll+0x130>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <xTaskResumeAll+0x12c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80028c6:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <xTaskResumeAll+0x134>)
 80028c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80028d6:	f000 fb99 	bl	800300c <vPortExitCritical>

	return xAlreadyYielded;
 80028da:	68bb      	ldr	r3, [r7, #8]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	200004fc 	.word	0x200004fc
 80028e8:	200004d4 	.word	0x200004d4
 80028ec:	20000494 	.word	0x20000494
 80028f0:	200004dc 	.word	0x200004dc
 80028f4:	200003d8 	.word	0x200003d8
 80028f8:	200003d4 	.word	0x200003d4
 80028fc:	200004e8 	.word	0x200004e8
 8002900:	200004e4 	.word	0x200004e4
 8002904:	e000ed04 	.word	0xe000ed04

08002908 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002912:	4b51      	ldr	r3, [pc, #324]	; (8002a58 <xTaskIncrementTick+0x150>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 808d 	bne.w	8002a36 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800291c:	4b4f      	ldr	r3, [pc, #316]	; (8002a5c <xTaskIncrementTick+0x154>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002924:	4a4d      	ldr	r2, [pc, #308]	; (8002a5c <xTaskIncrementTick+0x154>)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d120      	bne.n	8002972 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002930:	4b4b      	ldr	r3, [pc, #300]	; (8002a60 <xTaskIncrementTick+0x158>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <xTaskIncrementTick+0x48>
	__asm volatile
 800293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	603b      	str	r3, [r7, #0]
}
 800294c:	bf00      	nop
 800294e:	e7fe      	b.n	800294e <xTaskIncrementTick+0x46>
 8002950:	4b43      	ldr	r3, [pc, #268]	; (8002a60 <xTaskIncrementTick+0x158>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	4b43      	ldr	r3, [pc, #268]	; (8002a64 <xTaskIncrementTick+0x15c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a41      	ldr	r2, [pc, #260]	; (8002a60 <xTaskIncrementTick+0x158>)
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4a41      	ldr	r2, [pc, #260]	; (8002a64 <xTaskIncrementTick+0x15c>)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b40      	ldr	r3, [pc, #256]	; (8002a68 <xTaskIncrementTick+0x160>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3301      	adds	r3, #1
 800296a:	4a3f      	ldr	r2, [pc, #252]	; (8002a68 <xTaskIncrementTick+0x160>)
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	f000 f9a5 	bl	8002cbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002972:	4b3e      	ldr	r3, [pc, #248]	; (8002a6c <xTaskIncrementTick+0x164>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	429a      	cmp	r2, r3
 800297a:	d34d      	bcc.n	8002a18 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800297c:	4b38      	ldr	r3, [pc, #224]	; (8002a60 <xTaskIncrementTick+0x158>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <xTaskIncrementTick+0x82>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <xTaskIncrementTick+0x84>
 800298a:	2300      	movs	r3, #0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002990:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <xTaskIncrementTick+0x164>)
 8002992:	f04f 32ff 	mov.w	r2, #4294967295
 8002996:	601a      	str	r2, [r3, #0]
					break;
 8002998:	e03e      	b.n	8002a18 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800299a:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <xTaskIncrementTick+0x158>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d203      	bcs.n	80029ba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80029b2:	4a2e      	ldr	r2, [pc, #184]	; (8002a6c <xTaskIncrementTick+0x164>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6013      	str	r3, [r2, #0]
						break;
 80029b8:	e02e      	b.n	8002a18 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	3304      	adds	r3, #4
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fc90 	bl	80022e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	3318      	adds	r3, #24
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fc87 	bl	80022e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	2201      	movs	r2, #1
 80029dc:	409a      	lsls	r2, r3
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <xTaskIncrementTick+0x168>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	4a22      	ldr	r2, [pc, #136]	; (8002a70 <xTaskIncrementTick+0x168>)
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4a1f      	ldr	r2, [pc, #124]	; (8002a74 <xTaskIncrementTick+0x16c>)
 80029f6:	441a      	add	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	3304      	adds	r3, #4
 80029fc:	4619      	mov	r1, r3
 80029fe:	4610      	mov	r0, r2
 8002a00:	f7ff fc15 	bl	800222e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <xTaskIncrementTick+0x170>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d3b4      	bcc.n	800297c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002a12:	2301      	movs	r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a16:	e7b1      	b.n	800297c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a18:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <xTaskIncrementTick+0x170>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1e:	4915      	ldr	r1, [pc, #84]	; (8002a74 <xTaskIncrementTick+0x16c>)
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d907      	bls.n	8002a40 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002a30:	2301      	movs	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e004      	b.n	8002a40 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <xTaskIncrementTick+0x174>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <xTaskIncrementTick+0x174>)
 8002a3e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <xTaskIncrementTick+0x178>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002a4c:	697b      	ldr	r3, [r7, #20]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200004fc 	.word	0x200004fc
 8002a5c:	200004d8 	.word	0x200004d8
 8002a60:	2000048c 	.word	0x2000048c
 8002a64:	20000490 	.word	0x20000490
 8002a68:	200004ec 	.word	0x200004ec
 8002a6c:	200004f4 	.word	0x200004f4
 8002a70:	200004dc 	.word	0x200004dc
 8002a74:	200003d8 	.word	0x200003d8
 8002a78:	200003d4 	.word	0x200003d4
 8002a7c:	200004e4 	.word	0x200004e4
 8002a80:	200004e8 	.word	0x200004e8

08002a84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a8a:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <vTaskSwitchContext+0xac>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002a92:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <vTaskSwitchContext+0xb0>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002a98:	e044      	b.n	8002b24 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002a9a:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <vTaskSwitchContext+0xb0>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002aa0:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <vTaskSwitchContext+0xb4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002aae:	7afb      	ldrb	r3, [r7, #11]
 8002ab0:	f1c3 031f 	rsb	r3, r3, #31
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	4921      	ldr	r1, [pc, #132]	; (8002b3c <vTaskSwitchContext+0xb8>)
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10a      	bne.n	8002ae0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	607b      	str	r3, [r7, #4]
}
 8002adc:	bf00      	nop
 8002ade:	e7fe      	b.n	8002ade <vTaskSwitchContext+0x5a>
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <vTaskSwitchContext+0xb8>)
 8002aec:	4413      	add	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	3308      	adds	r3, #8
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d104      	bne.n	8002b10 <vTaskSwitchContext+0x8c>
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <vTaskSwitchContext+0xbc>)
 8002b18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <vTaskSwitchContext+0xbc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	334c      	adds	r3, #76	; 0x4c
 8002b20:	4a08      	ldr	r2, [pc, #32]	; (8002b44 <vTaskSwitchContext+0xc0>)
 8002b22:	6013      	str	r3, [r2, #0]
}
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	200004fc 	.word	0x200004fc
 8002b34:	200004e8 	.word	0x200004e8
 8002b38:	200004dc 	.word	0x200004dc
 8002b3c:	200003d8 	.word	0x200003d8
 8002b40:	200003d4 	.word	0x200003d4
 8002b44:	2000001c 	.word	0x2000001c

08002b48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002b50:	f000 f852 	bl	8002bf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <prvIdleTask+0x28>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d9f9      	bls.n	8002b50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <prvIdleTask+0x2c>)
 8002b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002b6c:	e7f0      	b.n	8002b50 <prvIdleTask+0x8>
 8002b6e:	bf00      	nop
 8002b70:	200003d8 	.word	0x200003d8
 8002b74:	e000ed04 	.word	0xe000ed04

08002b78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	e00c      	b.n	8002b9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <prvInitialiseTaskLists+0x60>)
 8002b90:	4413      	add	r3, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fb20 	bl	80021d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b06      	cmp	r3, #6
 8002ba2:	d9ef      	bls.n	8002b84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ba4:	480d      	ldr	r0, [pc, #52]	; (8002bdc <prvInitialiseTaskLists+0x64>)
 8002ba6:	f7ff fb17 	bl	80021d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002baa:	480d      	ldr	r0, [pc, #52]	; (8002be0 <prvInitialiseTaskLists+0x68>)
 8002bac:	f7ff fb14 	bl	80021d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002bb0:	480c      	ldr	r0, [pc, #48]	; (8002be4 <prvInitialiseTaskLists+0x6c>)
 8002bb2:	f7ff fb11 	bl	80021d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002bb6:	480c      	ldr	r0, [pc, #48]	; (8002be8 <prvInitialiseTaskLists+0x70>)
 8002bb8:	f7ff fb0e 	bl	80021d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002bbc:	480b      	ldr	r0, [pc, #44]	; (8002bec <prvInitialiseTaskLists+0x74>)
 8002bbe:	f7ff fb0b 	bl	80021d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <prvInitialiseTaskLists+0x78>)
 8002bc4:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <prvInitialiseTaskLists+0x64>)
 8002bc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <prvInitialiseTaskLists+0x7c>)
 8002bca:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <prvInitialiseTaskLists+0x68>)
 8002bcc:	601a      	str	r2, [r3, #0]
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	200003d8 	.word	0x200003d8
 8002bdc:	20000464 	.word	0x20000464
 8002be0:	20000478 	.word	0x20000478
 8002be4:	20000494 	.word	0x20000494
 8002be8:	200004a8 	.word	0x200004a8
 8002bec:	200004c0 	.word	0x200004c0
 8002bf0:	2000048c 	.word	0x2000048c
 8002bf4:	20000490 	.word	0x20000490

08002bf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bfe:	e019      	b.n	8002c34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002c00:	f000 f9d4 	bl	8002fac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002c04:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <prvCheckTasksWaitingTermination+0x50>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fb67 	bl	80022e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <prvCheckTasksWaitingTermination+0x54>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	4a0b      	ldr	r2, [pc, #44]	; (8002c4c <prvCheckTasksWaitingTermination+0x54>)
 8002c1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <prvCheckTasksWaitingTermination+0x58>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <prvCheckTasksWaitingTermination+0x58>)
 8002c28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002c2a:	f000 f9ef 	bl	800300c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f810 	bl	8002c54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <prvCheckTasksWaitingTermination+0x58>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e1      	bne.n	8002c00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200004a8 	.word	0x200004a8
 8002c4c:	200004d4 	.word	0x200004d4
 8002c50:	200004bc 	.word	0x200004bc

08002c54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	334c      	adds	r3, #76	; 0x4c
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 fc79 	bl	8003558 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d108      	bne.n	8002c82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fb1f 	bl	80032b8 <vPortFree>
				vPortFree( pxTCB );
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fb1c 	bl	80032b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002c80:	e018      	b.n	8002cb4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d103      	bne.n	8002c94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fb13 	bl	80032b8 <vPortFree>
	}
 8002c92:	e00f      	b.n	8002cb4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d00a      	beq.n	8002cb4 <prvDeleteTCB+0x60>
	__asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	60fb      	str	r3, [r7, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	e7fe      	b.n	8002cb2 <prvDeleteTCB+0x5e>
	}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <prvResetNextTaskUnblockTime+0x40>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <prvResetNextTaskUnblockTime+0x14>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <prvResetNextTaskUnblockTime+0x16>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d004      	beq.n	8002ce0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <prvResetNextTaskUnblockTime+0x44>)
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cdc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002cde:	e008      	b.n	8002cf2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <prvResetNextTaskUnblockTime+0x40>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <prvResetNextTaskUnblockTime+0x44>)
 8002cf0:	6013      	str	r3, [r2, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	2000048c 	.word	0x2000048c
 8002d00:	200004f4 	.word	0x200004f4

08002d04 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d0e:	4b29      	ldr	r3, [pc, #164]	; (8002db4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d14:	4b28      	ldr	r3, [pc, #160]	; (8002db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fae2 	bl	80022e4 <uxListRemove>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10b      	bne.n	8002d3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002d26:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	4a20      	ldr	r2, [pc, #128]	; (8002dbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d10a      	bne.n	8002d5c <prvAddCurrentTaskToDelayedList+0x58>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d4c:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3304      	adds	r3, #4
 8002d52:	4619      	mov	r1, r3
 8002d54:	481a      	ldr	r0, [pc, #104]	; (8002dc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002d56:	f7ff fa6a 	bl	800222e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d5a:	e026      	b.n	8002daa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d64:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d209      	bcs.n	8002d88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4610      	mov	r0, r2
 8002d82:	f7ff fa77 	bl	8002274 <vListInsert>
}
 8002d86:	e010      	b.n	8002daa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3304      	adds	r3, #4
 8002d92:	4619      	mov	r1, r3
 8002d94:	4610      	mov	r0, r2
 8002d96:	f7ff fa6d 	bl	8002274 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d202      	bcs.n	8002daa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002da4:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	6013      	str	r3, [r2, #0]
}
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	200004d8 	.word	0x200004d8
 8002db8:	200003d4 	.word	0x200003d4
 8002dbc:	200004dc 	.word	0x200004dc
 8002dc0:	200004c0 	.word	0x200004c0
 8002dc4:	20000490 	.word	0x20000490
 8002dc8:	2000048c 	.word	0x2000048c
 8002dcc:	200004f4 	.word	0x200004f4

08002dd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3b04      	subs	r3, #4
 8002de0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3b04      	subs	r3, #4
 8002dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f023 0201 	bic.w	r2, r3, #1
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3b04      	subs	r3, #4
 8002dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e00:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <pxPortInitialiseStack+0x54>)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3b14      	subs	r3, #20
 8002e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3b20      	subs	r3, #32
 8002e16:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002e18:	68fb      	ldr	r3, [r7, #12]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	08002e29 	.word	0x08002e29

08002e28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <prvTaskExitError+0x54>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3a:	d00a      	beq.n	8002e52 <prvTaskExitError+0x2a>
	__asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	60fb      	str	r3, [r7, #12]
}
 8002e4e:	bf00      	nop
 8002e50:	e7fe      	b.n	8002e50 <prvTaskExitError+0x28>
	__asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	60bb      	str	r3, [r7, #8]
}
 8002e64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002e66:	bf00      	nop
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0fc      	beq.n	8002e68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000018 	.word	0x20000018

08002e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002e80:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <pxCurrentTCBConst2>)
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	6808      	ldr	r0, [r1, #0]
 8002e86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e8a:	f380 8809 	msr	PSP, r0
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f04f 0000 	mov.w	r0, #0
 8002e96:	f380 8811 	msr	BASEPRI, r0
 8002e9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002e9e:	4770      	bx	lr

08002ea0 <pxCurrentTCBConst2>:
 8002ea0:	200003d4 	.word	0x200003d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop

08002ea8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002ea8:	4806      	ldr	r0, [pc, #24]	; (8002ec4 <prvPortStartFirstTask+0x1c>)
 8002eaa:	6800      	ldr	r0, [r0, #0]
 8002eac:	6800      	ldr	r0, [r0, #0]
 8002eae:	f380 8808 	msr	MSP, r0
 8002eb2:	b662      	cpsie	i
 8002eb4:	b661      	cpsie	f
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	df00      	svc	0
 8002ec0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002ec2:	bf00      	nop
 8002ec4:	e000ed08 	.word	0xe000ed08

08002ec8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002ece:	4b32      	ldr	r3, [pc, #200]	; (8002f98 <xPortStartScheduler+0xd0>)
 8002ed0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	22ff      	movs	r2, #255	; 0xff
 8002ede:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <xPortStartScheduler+0xd4>)
 8002ef4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ef6:	4b2a      	ldr	r3, [pc, #168]	; (8002fa0 <xPortStartScheduler+0xd8>)
 8002ef8:	2207      	movs	r2, #7
 8002efa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002efc:	e009      	b.n	8002f12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002efe:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <xPortStartScheduler+0xd8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	4a26      	ldr	r2, [pc, #152]	; (8002fa0 <xPortStartScheduler+0xd8>)
 8002f06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1a:	2b80      	cmp	r3, #128	; 0x80
 8002f1c:	d0ef      	beq.n	8002efe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <xPortStartScheduler+0xd8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f1c3 0307 	rsb	r3, r3, #7
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d00a      	beq.n	8002f40 <xPortStartScheduler+0x78>
	__asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	60bb      	str	r3, [r7, #8]
}
 8002f3c:	bf00      	nop
 8002f3e:	e7fe      	b.n	8002f3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f40:	4b17      	ldr	r3, [pc, #92]	; (8002fa0 <xPortStartScheduler+0xd8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	4a16      	ldr	r2, [pc, #88]	; (8002fa0 <xPortStartScheduler+0xd8>)
 8002f48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f4a:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <xPortStartScheduler+0xd8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f52:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <xPortStartScheduler+0xd8>)
 8002f54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <xPortStartScheduler+0xdc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a10      	ldr	r2, [pc, #64]	; (8002fa4 <xPortStartScheduler+0xdc>)
 8002f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <xPortStartScheduler+0xdc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <xPortStartScheduler+0xdc>)
 8002f70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002f76:	f000 f8b9 	bl	80030ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <xPortStartScheduler+0xe0>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002f80:	f7ff ff92 	bl	8002ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002f84:	f7ff fd7e 	bl	8002a84 <vTaskSwitchContext>
	prvTaskExitError();
 8002f88:	f7ff ff4e 	bl	8002e28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	e000e400 	.word	0xe000e400
 8002f9c:	20000500 	.word	0x20000500
 8002fa0:	20000504 	.word	0x20000504
 8002fa4:	e000ed20 	.word	0xe000ed20
 8002fa8:	20000018 	.word	0x20000018

08002fac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	607b      	str	r3, [r7, #4]
}
 8002fc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <vPortEnterCritical+0x58>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	4a0d      	ldr	r2, [pc, #52]	; (8003004 <vPortEnterCritical+0x58>)
 8002fce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <vPortEnterCritical+0x58>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d10f      	bne.n	8002ff8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <vPortEnterCritical+0x5c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <vPortEnterCritical+0x4c>
	__asm volatile
 8002fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe6:	f383 8811 	msr	BASEPRI, r3
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	603b      	str	r3, [r7, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	e7fe      	b.n	8002ff6 <vPortEnterCritical+0x4a>
	}
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000018 	.word	0x20000018
 8003008:	e000ed04 	.word	0xe000ed04

0800300c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <vPortExitCritical+0x4c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <vPortExitCritical+0x24>
	__asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	607b      	str	r3, [r7, #4]
}
 800302c:	bf00      	nop
 800302e:	e7fe      	b.n	800302e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <vPortExitCritical+0x4c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3b01      	subs	r3, #1
 8003036:	4a08      	ldr	r2, [pc, #32]	; (8003058 <vPortExitCritical+0x4c>)
 8003038:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800303a:	4b07      	ldr	r3, [pc, #28]	; (8003058 <vPortExitCritical+0x4c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d105      	bne.n	800304e <vPortExitCritical+0x42>
 8003042:	2300      	movs	r3, #0
 8003044:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800304c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	20000018 	.word	0x20000018
 800305c:	00000000 	.word	0x00000000

08003060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003060:	f3ef 8009 	mrs	r0, PSP
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <pxCurrentTCBConst>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003070:	6010      	str	r0, [r2, #0]
 8003072:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003076:	f04f 0050 	mov.w	r0, #80	; 0x50
 800307a:	f380 8811 	msr	BASEPRI, r0
 800307e:	f7ff fd01 	bl	8002a84 <vTaskSwitchContext>
 8003082:	f04f 0000 	mov.w	r0, #0
 8003086:	f380 8811 	msr	BASEPRI, r0
 800308a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800308e:	6819      	ldr	r1, [r3, #0]
 8003090:	6808      	ldr	r0, [r1, #0]
 8003092:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003096:	f380 8809 	msr	PSP, r0
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	4770      	bx	lr

080030a0 <pxCurrentTCBConst>:
 80030a0:	200003d4 	.word	0x200003d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop

080030a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
	__asm volatile
 80030ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	607b      	str	r3, [r7, #4]
}
 80030c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80030c2:	f7ff fc21 	bl	8002908 <xTaskIncrementTick>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <SysTick_Handler+0x40>)
 80030ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	2300      	movs	r3, #0
 80030d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	f383 8811 	msr	BASEPRI, r3
}
 80030de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	e000ed04 	.word	0xe000ed04

080030ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80030f0:	4b0a      	ldr	r3, [pc, #40]	; (800311c <vPortSetupTimerInterrupt+0x30>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <vPortSetupTimerInterrupt+0x34>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <vPortSetupTimerInterrupt+0x38>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a09      	ldr	r2, [pc, #36]	; (8003128 <vPortSetupTimerInterrupt+0x3c>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	099b      	lsrs	r3, r3, #6
 8003108:	4a08      	ldr	r2, [pc, #32]	; (800312c <vPortSetupTimerInterrupt+0x40>)
 800310a:	3b01      	subs	r3, #1
 800310c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800310e:	4b03      	ldr	r3, [pc, #12]	; (800311c <vPortSetupTimerInterrupt+0x30>)
 8003110:	2207      	movs	r2, #7
 8003112:	601a      	str	r2, [r3, #0]
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr
 800311c:	e000e010 	.word	0xe000e010
 8003120:	e000e018 	.word	0xe000e018
 8003124:	2000000c 	.word	0x2000000c
 8003128:	10624dd3 	.word	0x10624dd3
 800312c:	e000e014 	.word	0xe000e014

08003130 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800313c:	f7ff fb3a 	bl	80027b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003140:	4b58      	ldr	r3, [pc, #352]	; (80032a4 <pvPortMalloc+0x174>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003148:	f000 f910 	bl	800336c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800314c:	4b56      	ldr	r3, [pc, #344]	; (80032a8 <pvPortMalloc+0x178>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 808e 	bne.w	8003276 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01d      	beq.n	800319c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003160:	2208      	movs	r2, #8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	2b00      	cmp	r3, #0
 8003170:	d014      	beq.n	800319c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f023 0307 	bic.w	r3, r3, #7
 8003178:	3308      	adds	r3, #8
 800317a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <pvPortMalloc+0x6c>
	__asm volatile
 8003186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	617b      	str	r3, [r7, #20]
}
 8003198:	bf00      	nop
 800319a:	e7fe      	b.n	800319a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d069      	beq.n	8003276 <pvPortMalloc+0x146>
 80031a2:	4b42      	ldr	r3, [pc, #264]	; (80032ac <pvPortMalloc+0x17c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d864      	bhi.n	8003276 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80031ac:	4b40      	ldr	r3, [pc, #256]	; (80032b0 <pvPortMalloc+0x180>)
 80031ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80031b0:	4b3f      	ldr	r3, [pc, #252]	; (80032b0 <pvPortMalloc+0x180>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031b6:	e004      	b.n	80031c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d903      	bls.n	80031d4 <pvPortMalloc+0xa4>
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f1      	bne.n	80031b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80031d4:	4b33      	ldr	r3, [pc, #204]	; (80032a4 <pvPortMalloc+0x174>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031da:	429a      	cmp	r2, r3
 80031dc:	d04b      	beq.n	8003276 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2208      	movs	r2, #8
 80031e4:	4413      	add	r3, r2
 80031e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	1ad2      	subs	r2, r2, r3
 80031f8:	2308      	movs	r3, #8
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d91f      	bls.n	8003240 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <pvPortMalloc+0xf8>
	__asm volatile
 8003212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	613b      	str	r3, [r7, #16]
}
 8003224:	bf00      	nop
 8003226:	e7fe      	b.n	8003226 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	1ad2      	subs	r2, r2, r3
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800323a:	69b8      	ldr	r0, [r7, #24]
 800323c:	f000 f8f8 	bl	8003430 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003240:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <pvPortMalloc+0x17c>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	4a18      	ldr	r2, [pc, #96]	; (80032ac <pvPortMalloc+0x17c>)
 800324c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800324e:	4b17      	ldr	r3, [pc, #92]	; (80032ac <pvPortMalloc+0x17c>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4b18      	ldr	r3, [pc, #96]	; (80032b4 <pvPortMalloc+0x184>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d203      	bcs.n	8003262 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800325a:	4b14      	ldr	r3, [pc, #80]	; (80032ac <pvPortMalloc+0x17c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <pvPortMalloc+0x184>)
 8003260:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <pvPortMalloc+0x178>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	431a      	orrs	r2, r3
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003276:	f7ff faab 	bl	80027d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <pvPortMalloc+0x16a>
	__asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	60fb      	str	r3, [r7, #12]
}
 8003296:	bf00      	nop
 8003298:	e7fe      	b.n	8003298 <pvPortMalloc+0x168>
	return pvReturn;
 800329a:	69fb      	ldr	r3, [r7, #28]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3728      	adds	r7, #40	; 0x28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20001110 	.word	0x20001110
 80032a8:	2000111c 	.word	0x2000111c
 80032ac:	20001114 	.word	0x20001114
 80032b0:	20001108 	.word	0x20001108
 80032b4:	20001118 	.word	0x20001118

080032b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d048      	beq.n	800335c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80032ca:	2308      	movs	r3, #8
 80032cc:	425b      	negs	r3, r3
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4413      	add	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	4b21      	ldr	r3, [pc, #132]	; (8003364 <vPortFree+0xac>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <vPortFree+0x44>
	__asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	60fb      	str	r3, [r7, #12]
}
 80032f8:	bf00      	nop
 80032fa:	e7fe      	b.n	80032fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <vPortFree+0x62>
	__asm volatile
 8003304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	60bb      	str	r3, [r7, #8]
}
 8003316:	bf00      	nop
 8003318:	e7fe      	b.n	8003318 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	4b11      	ldr	r3, [pc, #68]	; (8003364 <vPortFree+0xac>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d019      	beq.n	800335c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d115      	bne.n	800335c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <vPortFree+0xac>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	43db      	mvns	r3, r3
 800333a:	401a      	ands	r2, r3
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003340:	f7ff fa38 	bl	80027b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	4b07      	ldr	r3, [pc, #28]	; (8003368 <vPortFree+0xb0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4413      	add	r3, r2
 800334e:	4a06      	ldr	r2, [pc, #24]	; (8003368 <vPortFree+0xb0>)
 8003350:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003352:	6938      	ldr	r0, [r7, #16]
 8003354:	f000 f86c 	bl	8003430 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003358:	f7ff fa3a 	bl	80027d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800335c:	bf00      	nop
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	2000111c 	.word	0x2000111c
 8003368:	20001114 	.word	0x20001114

0800336c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003372:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003376:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003378:	4b27      	ldr	r3, [pc, #156]	; (8003418 <prvHeapInit+0xac>)
 800337a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00c      	beq.n	80033a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3307      	adds	r3, #7
 800338a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0307 	bic.w	r3, r3, #7
 8003392:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <prvHeapInit+0xac>)
 800339c:	4413      	add	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033a4:	4a1d      	ldr	r2, [pc, #116]	; (800341c <prvHeapInit+0xb0>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80033aa:	4b1c      	ldr	r3, [pc, #112]	; (800341c <prvHeapInit+0xb0>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	4413      	add	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80033b8:	2208      	movs	r2, #8
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0307 	bic.w	r3, r3, #7
 80033c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a15      	ldr	r2, [pc, #84]	; (8003420 <prvHeapInit+0xb4>)
 80033cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80033ce:	4b14      	ldr	r3, [pc, #80]	; (8003420 <prvHeapInit+0xb4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2200      	movs	r2, #0
 80033d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <prvHeapInit+0xb4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	1ad2      	subs	r2, r2, r3
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <prvHeapInit+0xb4>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <prvHeapInit+0xb8>)
 80033fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4a09      	ldr	r2, [pc, #36]	; (8003428 <prvHeapInit+0xbc>)
 8003402:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003404:	4b09      	ldr	r3, [pc, #36]	; (800342c <prvHeapInit+0xc0>)
 8003406:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800340a:	601a      	str	r2, [r3, #0]
}
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000508 	.word	0x20000508
 800341c:	20001108 	.word	0x20001108
 8003420:	20001110 	.word	0x20001110
 8003424:	20001118 	.word	0x20001118
 8003428:	20001114 	.word	0x20001114
 800342c:	2000111c 	.word	0x2000111c

08003430 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003438:	4b27      	ldr	r3, [pc, #156]	; (80034d8 <prvInsertBlockIntoFreeList+0xa8>)
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	e002      	b.n	8003444 <prvInsertBlockIntoFreeList+0x14>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	d8f7      	bhi.n	800343e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	4413      	add	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d108      	bne.n	8003472 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	441a      	add	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	441a      	add	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d118      	bne.n	80034b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4b14      	ldr	r3, [pc, #80]	; (80034dc <prvInsertBlockIntoFreeList+0xac>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d00d      	beq.n	80034ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	441a      	add	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e008      	b.n	80034c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <prvInsertBlockIntoFreeList+0xac>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e003      	b.n	80034c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d002      	beq.n	80034ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr
 80034d8:	20001108 	.word	0x20001108
 80034dc:	20001110 	.word	0x20001110

080034e0 <__libc_init_array>:
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	2600      	movs	r6, #0
 80034e4:	4d0c      	ldr	r5, [pc, #48]	; (8003518 <__libc_init_array+0x38>)
 80034e6:	4c0d      	ldr	r4, [pc, #52]	; (800351c <__libc_init_array+0x3c>)
 80034e8:	1b64      	subs	r4, r4, r5
 80034ea:	10a4      	asrs	r4, r4, #2
 80034ec:	42a6      	cmp	r6, r4
 80034ee:	d109      	bne.n	8003504 <__libc_init_array+0x24>
 80034f0:	f000 f8e2 	bl	80036b8 <_init>
 80034f4:	2600      	movs	r6, #0
 80034f6:	4d0a      	ldr	r5, [pc, #40]	; (8003520 <__libc_init_array+0x40>)
 80034f8:	4c0a      	ldr	r4, [pc, #40]	; (8003524 <__libc_init_array+0x44>)
 80034fa:	1b64      	subs	r4, r4, r5
 80034fc:	10a4      	asrs	r4, r4, #2
 80034fe:	42a6      	cmp	r6, r4
 8003500:	d105      	bne.n	800350e <__libc_init_array+0x2e>
 8003502:	bd70      	pop	{r4, r5, r6, pc}
 8003504:	f855 3b04 	ldr.w	r3, [r5], #4
 8003508:	4798      	blx	r3
 800350a:	3601      	adds	r6, #1
 800350c:	e7ee      	b.n	80034ec <__libc_init_array+0xc>
 800350e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003512:	4798      	blx	r3
 8003514:	3601      	adds	r6, #1
 8003516:	e7f2      	b.n	80034fe <__libc_init_array+0x1e>
 8003518:	0800378c 	.word	0x0800378c
 800351c:	0800378c 	.word	0x0800378c
 8003520:	0800378c 	.word	0x0800378c
 8003524:	08003790 	.word	0x08003790

08003528 <__retarget_lock_acquire_recursive>:
 8003528:	4770      	bx	lr

0800352a <__retarget_lock_release_recursive>:
 800352a:	4770      	bx	lr

0800352c <memset>:
 800352c:	4603      	mov	r3, r0
 800352e:	4402      	add	r2, r0
 8003530:	4293      	cmp	r3, r2
 8003532:	d100      	bne.n	8003536 <memset+0xa>
 8003534:	4770      	bx	lr
 8003536:	f803 1b01 	strb.w	r1, [r3], #1
 800353a:	e7f9      	b.n	8003530 <memset+0x4>

0800353c <cleanup_glue>:
 800353c:	b538      	push	{r3, r4, r5, lr}
 800353e:	460c      	mov	r4, r1
 8003540:	6809      	ldr	r1, [r1, #0]
 8003542:	4605      	mov	r5, r0
 8003544:	b109      	cbz	r1, 800354a <cleanup_glue+0xe>
 8003546:	f7ff fff9 	bl	800353c <cleanup_glue>
 800354a:	4621      	mov	r1, r4
 800354c:	4628      	mov	r0, r5
 800354e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003552:	f000 b869 	b.w	8003628 <_free_r>
	...

08003558 <_reclaim_reent>:
 8003558:	4b2c      	ldr	r3, [pc, #176]	; (800360c <_reclaim_reent+0xb4>)
 800355a:	b570      	push	{r4, r5, r6, lr}
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4604      	mov	r4, r0
 8003560:	4283      	cmp	r3, r0
 8003562:	d051      	beq.n	8003608 <_reclaim_reent+0xb0>
 8003564:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003566:	b143      	cbz	r3, 800357a <_reclaim_reent+0x22>
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d14a      	bne.n	8003604 <_reclaim_reent+0xac>
 800356e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	b111      	cbz	r1, 800357a <_reclaim_reent+0x22>
 8003574:	4620      	mov	r0, r4
 8003576:	f000 f857 	bl	8003628 <_free_r>
 800357a:	6961      	ldr	r1, [r4, #20]
 800357c:	b111      	cbz	r1, 8003584 <_reclaim_reent+0x2c>
 800357e:	4620      	mov	r0, r4
 8003580:	f000 f852 	bl	8003628 <_free_r>
 8003584:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003586:	b111      	cbz	r1, 800358e <_reclaim_reent+0x36>
 8003588:	4620      	mov	r0, r4
 800358a:	f000 f84d 	bl	8003628 <_free_r>
 800358e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003590:	b111      	cbz	r1, 8003598 <_reclaim_reent+0x40>
 8003592:	4620      	mov	r0, r4
 8003594:	f000 f848 	bl	8003628 <_free_r>
 8003598:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800359a:	b111      	cbz	r1, 80035a2 <_reclaim_reent+0x4a>
 800359c:	4620      	mov	r0, r4
 800359e:	f000 f843 	bl	8003628 <_free_r>
 80035a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80035a4:	b111      	cbz	r1, 80035ac <_reclaim_reent+0x54>
 80035a6:	4620      	mov	r0, r4
 80035a8:	f000 f83e 	bl	8003628 <_free_r>
 80035ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80035ae:	b111      	cbz	r1, 80035b6 <_reclaim_reent+0x5e>
 80035b0:	4620      	mov	r0, r4
 80035b2:	f000 f839 	bl	8003628 <_free_r>
 80035b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80035b8:	b111      	cbz	r1, 80035c0 <_reclaim_reent+0x68>
 80035ba:	4620      	mov	r0, r4
 80035bc:	f000 f834 	bl	8003628 <_free_r>
 80035c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035c2:	b111      	cbz	r1, 80035ca <_reclaim_reent+0x72>
 80035c4:	4620      	mov	r0, r4
 80035c6:	f000 f82f 	bl	8003628 <_free_r>
 80035ca:	69a3      	ldr	r3, [r4, #24]
 80035cc:	b1e3      	cbz	r3, 8003608 <_reclaim_reent+0xb0>
 80035ce:	4620      	mov	r0, r4
 80035d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80035d2:	4798      	blx	r3
 80035d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80035d6:	b1b9      	cbz	r1, 8003608 <_reclaim_reent+0xb0>
 80035d8:	4620      	mov	r0, r4
 80035da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80035de:	f7ff bfad 	b.w	800353c <cleanup_glue>
 80035e2:	5949      	ldr	r1, [r1, r5]
 80035e4:	b941      	cbnz	r1, 80035f8 <_reclaim_reent+0xa0>
 80035e6:	3504      	adds	r5, #4
 80035e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035ea:	2d80      	cmp	r5, #128	; 0x80
 80035ec:	68d9      	ldr	r1, [r3, #12]
 80035ee:	d1f8      	bne.n	80035e2 <_reclaim_reent+0x8a>
 80035f0:	4620      	mov	r0, r4
 80035f2:	f000 f819 	bl	8003628 <_free_r>
 80035f6:	e7ba      	b.n	800356e <_reclaim_reent+0x16>
 80035f8:	680e      	ldr	r6, [r1, #0]
 80035fa:	4620      	mov	r0, r4
 80035fc:	f000 f814 	bl	8003628 <_free_r>
 8003600:	4631      	mov	r1, r6
 8003602:	e7ef      	b.n	80035e4 <_reclaim_reent+0x8c>
 8003604:	2500      	movs	r5, #0
 8003606:	e7ef      	b.n	80035e8 <_reclaim_reent+0x90>
 8003608:	bd70      	pop	{r4, r5, r6, pc}
 800360a:	bf00      	nop
 800360c:	2000001c 	.word	0x2000001c

08003610 <__malloc_lock>:
 8003610:	4801      	ldr	r0, [pc, #4]	; (8003618 <__malloc_lock+0x8>)
 8003612:	f7ff bf89 	b.w	8003528 <__retarget_lock_acquire_recursive>
 8003616:	bf00      	nop
 8003618:	20001120 	.word	0x20001120

0800361c <__malloc_unlock>:
 800361c:	4801      	ldr	r0, [pc, #4]	; (8003624 <__malloc_unlock+0x8>)
 800361e:	f7ff bf84 	b.w	800352a <__retarget_lock_release_recursive>
 8003622:	bf00      	nop
 8003624:	20001120 	.word	0x20001120

08003628 <_free_r>:
 8003628:	b538      	push	{r3, r4, r5, lr}
 800362a:	4605      	mov	r5, r0
 800362c:	2900      	cmp	r1, #0
 800362e:	d040      	beq.n	80036b2 <_free_r+0x8a>
 8003630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003634:	1f0c      	subs	r4, r1, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	bfb8      	it	lt
 800363a:	18e4      	addlt	r4, r4, r3
 800363c:	f7ff ffe8 	bl	8003610 <__malloc_lock>
 8003640:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <_free_r+0x8c>)
 8003642:	6813      	ldr	r3, [r2, #0]
 8003644:	b933      	cbnz	r3, 8003654 <_free_r+0x2c>
 8003646:	6063      	str	r3, [r4, #4]
 8003648:	6014      	str	r4, [r2, #0]
 800364a:	4628      	mov	r0, r5
 800364c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003650:	f7ff bfe4 	b.w	800361c <__malloc_unlock>
 8003654:	42a3      	cmp	r3, r4
 8003656:	d908      	bls.n	800366a <_free_r+0x42>
 8003658:	6820      	ldr	r0, [r4, #0]
 800365a:	1821      	adds	r1, r4, r0
 800365c:	428b      	cmp	r3, r1
 800365e:	bf01      	itttt	eq
 8003660:	6819      	ldreq	r1, [r3, #0]
 8003662:	685b      	ldreq	r3, [r3, #4]
 8003664:	1809      	addeq	r1, r1, r0
 8003666:	6021      	streq	r1, [r4, #0]
 8003668:	e7ed      	b.n	8003646 <_free_r+0x1e>
 800366a:	461a      	mov	r2, r3
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	b10b      	cbz	r3, 8003674 <_free_r+0x4c>
 8003670:	42a3      	cmp	r3, r4
 8003672:	d9fa      	bls.n	800366a <_free_r+0x42>
 8003674:	6811      	ldr	r1, [r2, #0]
 8003676:	1850      	adds	r0, r2, r1
 8003678:	42a0      	cmp	r0, r4
 800367a:	d10b      	bne.n	8003694 <_free_r+0x6c>
 800367c:	6820      	ldr	r0, [r4, #0]
 800367e:	4401      	add	r1, r0
 8003680:	1850      	adds	r0, r2, r1
 8003682:	4283      	cmp	r3, r0
 8003684:	6011      	str	r1, [r2, #0]
 8003686:	d1e0      	bne.n	800364a <_free_r+0x22>
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4401      	add	r1, r0
 800368e:	6011      	str	r1, [r2, #0]
 8003690:	6053      	str	r3, [r2, #4]
 8003692:	e7da      	b.n	800364a <_free_r+0x22>
 8003694:	d902      	bls.n	800369c <_free_r+0x74>
 8003696:	230c      	movs	r3, #12
 8003698:	602b      	str	r3, [r5, #0]
 800369a:	e7d6      	b.n	800364a <_free_r+0x22>
 800369c:	6820      	ldr	r0, [r4, #0]
 800369e:	1821      	adds	r1, r4, r0
 80036a0:	428b      	cmp	r3, r1
 80036a2:	bf01      	itttt	eq
 80036a4:	6819      	ldreq	r1, [r3, #0]
 80036a6:	685b      	ldreq	r3, [r3, #4]
 80036a8:	1809      	addeq	r1, r1, r0
 80036aa:	6021      	streq	r1, [r4, #0]
 80036ac:	6063      	str	r3, [r4, #4]
 80036ae:	6054      	str	r4, [r2, #4]
 80036b0:	e7cb      	b.n	800364a <_free_r+0x22>
 80036b2:	bd38      	pop	{r3, r4, r5, pc}
 80036b4:	20001124 	.word	0x20001124

080036b8 <_init>:
 80036b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ba:	bf00      	nop
 80036bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036be:	bc08      	pop	{r3}
 80036c0:	469e      	mov	lr, r3
 80036c2:	4770      	bx	lr

080036c4 <_fini>:
 80036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c6:	bf00      	nop
 80036c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ca:	bc08      	pop	{r3}
 80036cc:	469e      	mov	lr, r3
 80036ce:	4770      	bx	lr
