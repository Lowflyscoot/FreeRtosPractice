
LedBlinker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003088  08003088  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003088  08003088  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003088  08003088  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003088  08003088  00013088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800308c  0800308c  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001074  20000074  08003104  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010e8  08003104  000210e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eafa  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002689  00000000  00000000  0002eb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00031220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  00032038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189e9  00000000  00000000  00032d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f08a  00000000  00000000  0004b711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6b0  00000000  00000000  0005a79b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9e4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c30  00000000  00000000  000e9e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08002fb8 	.word	0x08002fb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08002fb8 	.word	0x08002fb8

08000150 <LCD_Push_Delay>:

void LCD_Push_Command (uint8_t command);
void LCD_Push_Delay ();

void LCD_Push_Delay ()
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 1);
 8000156:	2201      	movs	r2, #1
 8000158:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800015c:	480b      	ldr	r0, [pc, #44]	; (800018c <LCD_Push_Delay+0x3c>)
 800015e:	f000 fda1 	bl	8000ca4 <HAL_GPIO_WritePin>
    for(uint16_t i = 350; i > 0; i++)
 8000162:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8000166:	80fb      	strh	r3, [r7, #6]
 8000168:	e003      	b.n	8000172 <LCD_Push_Delay+0x22>
    {
        asm("nop");
 800016a:	bf00      	nop
    for(uint16_t i = 350; i > 0; i++)
 800016c:	88fb      	ldrh	r3, [r7, #6]
 800016e:	3301      	adds	r3, #1
 8000170:	80fb      	strh	r3, [r7, #6]
 8000172:	88fb      	ldrh	r3, [r7, #6]
 8000174:	2b00      	cmp	r3, #0
 8000176:	d1f8      	bne.n	800016a <LCD_Push_Delay+0x1a>
    }
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 0);
 8000178:	2200      	movs	r2, #0
 800017a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800017e:	4803      	ldr	r0, [pc, #12]	; (800018c <LCD_Push_Delay+0x3c>)
 8000180:	f000 fd90 	bl	8000ca4 <HAL_GPIO_WritePin>
}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	40010800 	.word	0x40010800

08000190 <LCD_Push_Init_Command>:

void LCD_Push_Init_Command (uint8_t command)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b084      	sub	sp, #16
 8000194:	af00      	add	r7, sp, #0
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
    uint8_t pinAction;
    pinAction = (command >> 3) & 0x01;
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	08db      	lsrs	r3, r3, #3
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	f003 0301 	and.w	r3, r3, #1
 80001a4:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, pinAction);
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
 80001a8:	461a      	mov	r2, r3
 80001aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001ae:	4816      	ldr	r0, [pc, #88]	; (8000208 <LCD_Push_Init_Command+0x78>)
 80001b0:	f000 fd78 	bl	8000ca4 <HAL_GPIO_WritePin>
    pinAction = (command >> 2) & 0x01;
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	089b      	lsrs	r3, r3, #2
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	f003 0301 	and.w	r3, r3, #1
 80001be:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, pinAction);
 80001c0:	7bfb      	ldrb	r3, [r7, #15]
 80001c2:	461a      	mov	r2, r3
 80001c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001c8:	480f      	ldr	r0, [pc, #60]	; (8000208 <LCD_Push_Init_Command+0x78>)
 80001ca:	f000 fd6b 	bl	8000ca4 <HAL_GPIO_WritePin>
    pinAction = (command >> 1) & 0x01;
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	085b      	lsrs	r3, r3, #1
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	f003 0301 	and.w	r3, r3, #1
 80001d8:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, pinAction);
 80001da:	7bfb      	ldrb	r3, [r7, #15]
 80001dc:	461a      	mov	r2, r3
 80001de:	2180      	movs	r1, #128	; 0x80
 80001e0:	4809      	ldr	r0, [pc, #36]	; (8000208 <LCD_Push_Init_Command+0x78>)
 80001e2:	f000 fd5f 	bl	8000ca4 <HAL_GPIO_WritePin>
    pinAction = (command >> 0) & 0x01;
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 0301 	and.w	r3, r3, #1
 80001ec:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, pinAction);
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	461a      	mov	r2, r3
 80001f2:	2140      	movs	r1, #64	; 0x40
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <LCD_Push_Init_Command+0x78>)
 80001f6:	f000 fd55 	bl	8000ca4 <HAL_GPIO_WritePin>
    LCD_Push_Delay();
 80001fa:	f7ff ffa9 	bl	8000150 <LCD_Push_Delay>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40010c00 	.word	0x40010c00

0800020c <LCD_Push_Command>:

void LCD_Push_Command (uint8_t command)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
    uint8_t pinAction;
    pinAction = (command >> 7) & 0x01;
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	09db      	lsrs	r3, r3, #7
 800021a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, pinAction);
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	461a      	mov	r2, r3
 8000220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000224:	482f      	ldr	r0, [pc, #188]	; (80002e4 <LCD_Push_Command+0xd8>)
 8000226:	f000 fd3d 	bl	8000ca4 <HAL_GPIO_WritePin>
    pinAction = (command >> 6) & 0x01;
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	099b      	lsrs	r3, r3, #6
 800022e:	b2db      	uxtb	r3, r3
 8000230:	f003 0301 	and.w	r3, r3, #1
 8000234:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, pinAction);
 8000236:	7bfb      	ldrb	r3, [r7, #15]
 8000238:	461a      	mov	r2, r3
 800023a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023e:	4829      	ldr	r0, [pc, #164]	; (80002e4 <LCD_Push_Command+0xd8>)
 8000240:	f000 fd30 	bl	8000ca4 <HAL_GPIO_WritePin>
    pinAction = (command >> 5) & 0x01;
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	095b      	lsrs	r3, r3, #5
 8000248:	b2db      	uxtb	r3, r3
 800024a:	f003 0301 	and.w	r3, r3, #1
 800024e:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, pinAction);
 8000250:	7bfb      	ldrb	r3, [r7, #15]
 8000252:	461a      	mov	r2, r3
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	4823      	ldr	r0, [pc, #140]	; (80002e4 <LCD_Push_Command+0xd8>)
 8000258:	f000 fd24 	bl	8000ca4 <HAL_GPIO_WritePin>
    pinAction = (command >> 4) & 0x01;
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	091b      	lsrs	r3, r3, #4
 8000260:	b2db      	uxtb	r3, r3
 8000262:	f003 0301 	and.w	r3, r3, #1
 8000266:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, pinAction);
 8000268:	7bfb      	ldrb	r3, [r7, #15]
 800026a:	461a      	mov	r2, r3
 800026c:	2140      	movs	r1, #64	; 0x40
 800026e:	481d      	ldr	r0, [pc, #116]	; (80002e4 <LCD_Push_Command+0xd8>)
 8000270:	f000 fd18 	bl	8000ca4 <HAL_GPIO_WritePin>
    LCD_Push_Delay();
 8000274:	f7ff ff6c 	bl	8000150 <LCD_Push_Delay>

    pinAction = (command >> 3) & 0x01;
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	08db      	lsrs	r3, r3, #3
 800027c:	b2db      	uxtb	r3, r3
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, pinAction);
 8000284:	7bfb      	ldrb	r3, [r7, #15]
 8000286:	461a      	mov	r2, r3
 8000288:	f44f 7100 	mov.w	r1, #512	; 0x200
 800028c:	4815      	ldr	r0, [pc, #84]	; (80002e4 <LCD_Push_Command+0xd8>)
 800028e:	f000 fd09 	bl	8000ca4 <HAL_GPIO_WritePin>
    pinAction = (command >> 2) & 0x01;
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	089b      	lsrs	r3, r3, #2
 8000296:	b2db      	uxtb	r3, r3
 8000298:	f003 0301 	and.w	r3, r3, #1
 800029c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, pinAction);
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	461a      	mov	r2, r3
 80002a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a6:	480f      	ldr	r0, [pc, #60]	; (80002e4 <LCD_Push_Command+0xd8>)
 80002a8:	f000 fcfc 	bl	8000ca4 <HAL_GPIO_WritePin>
    pinAction = (command >> 1) & 0x01;
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	085b      	lsrs	r3, r3, #1
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, pinAction);
 80002b8:	7bfb      	ldrb	r3, [r7, #15]
 80002ba:	461a      	mov	r2, r3
 80002bc:	2180      	movs	r1, #128	; 0x80
 80002be:	4809      	ldr	r0, [pc, #36]	; (80002e4 <LCD_Push_Command+0xd8>)
 80002c0:	f000 fcf0 	bl	8000ca4 <HAL_GPIO_WritePin>
    pinAction = (command >> 0) & 0x01;
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	f003 0301 	and.w	r3, r3, #1
 80002ca:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, pinAction);
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	461a      	mov	r2, r3
 80002d0:	2140      	movs	r1, #64	; 0x40
 80002d2:	4804      	ldr	r0, [pc, #16]	; (80002e4 <LCD_Push_Command+0xd8>)
 80002d4:	f000 fce6 	bl	8000ca4 <HAL_GPIO_WritePin>
    LCD_Push_Delay();
 80002d8:	f7ff ff3a 	bl	8000150 <LCD_Push_Delay>
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <LCD_Init>:

void LCD_Init (void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
    HAL_Delay(15);
 80002ec:	200f      	movs	r0, #15
 80002ee:	f000 fa51 	bl	8000794 <HAL_Delay>
    LCD_Push_Init_Command(0x03);
 80002f2:	2003      	movs	r0, #3
 80002f4:	f7ff ff4c 	bl	8000190 <LCD_Push_Init_Command>
    HAL_Delay(5);
 80002f8:	2005      	movs	r0, #5
 80002fa:	f000 fa4b 	bl	8000794 <HAL_Delay>
    LCD_Push_Init_Command(0x03);
 80002fe:	2003      	movs	r0, #3
 8000300:	f7ff ff46 	bl	8000190 <LCD_Push_Init_Command>
    HAL_Delay(1);
 8000304:	2001      	movs	r0, #1
 8000306:	f000 fa45 	bl	8000794 <HAL_Delay>
    LCD_Push_Init_Command(0x03);
 800030a:	2003      	movs	r0, #3
 800030c:	f7ff ff40 	bl	8000190 <LCD_Push_Init_Command>
    // Display on, cursor enable, cursor's blink enable
    LCD_Push_Command(0x0F);
 8000310:	200f      	movs	r0, #15
 8000312:	f7ff ff7b 	bl	800020c <LCD_Push_Command>
    // Clear display
    LCD_Push_Command(0x01);
 8000316:	2001      	movs	r0, #1
 8000318:	f7ff ff78 	bl	800020c <LCD_Push_Command>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}

08000320 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	4a06      	ldr	r2, [pc, #24]	; (8000348 <vApplicationGetIdleTaskMemory+0x28>)
 8000330:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	4a05      	ldr	r2, [pc, #20]	; (800034c <vApplicationGetIdleTaskMemory+0x2c>)
 8000336:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2280      	movs	r2, #128	; 0x80
 800033c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800033e:	bf00      	nop
 8000340:	3714      	adds	r7, #20
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	20000090 	.word	0x20000090
 800034c:	20000144 	.word	0x20000144

08000350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000350:	b5b0      	push	{r4, r5, r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000356:	f000 f9eb 	bl	8000730 <HAL_Init>

  /* USER CODE BEGIN Init */
  LCD_Init();
 800035a:	f7ff ffc5 	bl	80002e8 <LCD_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035e:	f000 f81b 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000362:	f000 f855 	bl	8000410 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <main+0x40>)
 8000368:	1d3c      	adds	r4, r7, #4
 800036a:	461d      	mov	r5, r3
 800036c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800036e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000370:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000374:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2100      	movs	r1, #0
 800037c:	4618      	mov	r0, r3
 800037e:	f001 fb47 	bl	8001a10 <osThreadCreate>
 8000382:	4603      	mov	r3, r0
 8000384:	4a03      	ldr	r2, [pc, #12]	; (8000394 <main+0x44>)
 8000386:	6013      	str	r3, [r2, #0]
  
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000388:	f001 fb3b 	bl	8001a02 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800038c:	e7fe      	b.n	800038c <main+0x3c>
 800038e:	bf00      	nop
 8000390:	08002fdc 	.word	0x08002fdc
 8000394:	20000344 	.word	0x20000344

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b090      	sub	sp, #64	; 0x40
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 0318 	add.w	r3, r7, #24
 80003a2:	2228      	movs	r2, #40	; 0x28
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 fd40 	bl	8002e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ba:	2302      	movs	r3, #2
 80003bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003be:	2301      	movs	r3, #1
 80003c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c2:	2310      	movs	r3, #16
 80003c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003c6:	2300      	movs	r3, #0
 80003c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ca:	f107 0318 	add.w	r3, r7, #24
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 fc80 	bl	8000cd4 <HAL_RCC_OscConfig>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003da:	f000 f8ad 	bl	8000538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003de:	230f      	movs	r3, #15
 80003e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 feee 	bl	80011d8 <HAL_RCC_ClockConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000402:	f000 f899 	bl	8000538 <Error_Handler>
  }
}
 8000406:	bf00      	nop
 8000408:	3740      	adds	r7, #64	; 0x40
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b088      	sub	sp, #32
 8000414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000424:	4b33      	ldr	r3, [pc, #204]	; (80004f4 <MX_GPIO_Init+0xe4>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a32      	ldr	r2, [pc, #200]	; (80004f4 <MX_GPIO_Init+0xe4>)
 800042a:	f043 0310 	orr.w	r3, r3, #16
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b30      	ldr	r3, [pc, #192]	; (80004f4 <MX_GPIO_Init+0xe4>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0310 	and.w	r3, r3, #16
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b2d      	ldr	r3, [pc, #180]	; (80004f4 <MX_GPIO_Init+0xe4>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a2c      	ldr	r2, [pc, #176]	; (80004f4 <MX_GPIO_Init+0xe4>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <MX_GPIO_Init+0xe4>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000454:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <MX_GPIO_Init+0xe4>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a26      	ldr	r2, [pc, #152]	; (80004f4 <MX_GPIO_Init+0xe4>)
 800045a:	f043 0308 	orr.w	r3, r3, #8
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b24      	ldr	r3, [pc, #144]	; (80004f4 <MX_GPIO_Init+0xe4>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0308 	and.w	r3, r3, #8
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000472:	4821      	ldr	r0, [pc, #132]	; (80004f8 <MX_GPIO_Init+0xe8>)
 8000474:	f000 fc16 	bl	8000ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800047e:	481f      	ldr	r0, [pc, #124]	; (80004fc <MX_GPIO_Init+0xec>)
 8000480:	f000 fc10 	bl	8000ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800048a:	481d      	ldr	r0, [pc, #116]	; (8000500 <MX_GPIO_Init+0xf0>)
 800048c:	f000 fc0a 	bl	8000ca4 <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8000490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	2301      	movs	r3, #1
 8000498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2302      	movs	r3, #2
 80004a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	4619      	mov	r1, r3
 80004a8:	4813      	ldr	r0, [pc, #76]	; (80004f8 <MX_GPIO_Init+0xe8>)
 80004aa:	f000 fa77 	bl	800099c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 80004ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b4:	2301      	movs	r3, #1
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004bc:	2302      	movs	r3, #2
 80004be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	4619      	mov	r1, r3
 80004c6:	480d      	ldr	r0, [pc, #52]	; (80004fc <MX_GPIO_Init+0xec>)
 80004c8:	f000 fa68 	bl	800099c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin
                           LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 80004cc:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80004d0:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	2301      	movs	r3, #1
 80004d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	2302      	movs	r3, #2
 80004dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4619      	mov	r1, r3
 80004e4:	4806      	ldr	r0, [pc, #24]	; (8000500 <MX_GPIO_Init+0xf0>)
 80004e6:	f000 fa59 	bl	800099c <HAL_GPIO_Init>

}
 80004ea:	bf00      	nop
 80004ec:	3720      	adds	r7, #32
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40011000 	.word	0x40011000
 80004fc:	40010800 	.word	0x40010800
 8000500:	40010c00 	.word	0x40010c00

08000504 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f001 facb 	bl	8001aa8 <osDelay>
 8000512:	e7fb      	b.n	800050c <StartDefaultTask+0x8>

08000514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d101      	bne.n	800052a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000526:	f000 f919 	bl	800075c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40012c00 	.word	0x40012c00

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000540:	e7fe      	b.n	8000540 <Error_Handler+0x8>
	...

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <HAL_MspInit+0x68>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <HAL_MspInit+0x68>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <HAL_MspInit+0x68>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_MspInit+0x68>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a11      	ldr	r2, [pc, #68]	; (80005ac <HAL_MspInit+0x68>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <HAL_MspInit+0x68>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	210f      	movs	r1, #15
 800057e:	f06f 0001 	mvn.w	r0, #1
 8000582:	f000 f9e0 	bl	8000946 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <HAL_MspInit+0x6c>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_MspInit+0x6c>)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010000 	.word	0x40010000

080005b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08c      	sub	sp, #48	; 0x30
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80005bc:	2300      	movs	r3, #0
 80005be:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005ca:	4b2e      	ldr	r3, [pc, #184]	; (8000684 <HAL_InitTick+0xd0>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	4a2d      	ldr	r2, [pc, #180]	; (8000684 <HAL_InitTick+0xd0>)
 80005d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005d4:	6193      	str	r3, [r2, #24]
 80005d6:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <HAL_InitTick+0xd0>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005e2:	f107 020c 	add.w	r2, r7, #12
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	4611      	mov	r1, r2
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 ff59 	bl	80014a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005f2:	f000 ff43 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 80005f6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005fa:	4a23      	ldr	r2, [pc, #140]	; (8000688 <HAL_InitTick+0xd4>)
 80005fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000600:	0c9b      	lsrs	r3, r3, #18
 8000602:	3b01      	subs	r3, #1
 8000604:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <HAL_InitTick+0xd8>)
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <HAL_InitTick+0xdc>)
 800060a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <HAL_InitTick+0xd8>)
 800060e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000612:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000614:	4a1d      	ldr	r2, [pc, #116]	; (800068c <HAL_InitTick+0xd8>)
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000618:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <HAL_InitTick+0xd8>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <HAL_InitTick+0xd8>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <HAL_InitTick+0xd8>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800062c:	4817      	ldr	r0, [pc, #92]	; (800068c <HAL_InitTick+0xd8>)
 800062e:	f000 ff87 	bl	8001540 <HAL_TIM_Base_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800063c:	2b00      	cmp	r3, #0
 800063e:	d11b      	bne.n	8000678 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000640:	4812      	ldr	r0, [pc, #72]	; (800068c <HAL_InitTick+0xd8>)
 8000642:	f000 ffd5 	bl	80015f0 <HAL_TIM_Base_Start_IT>
 8000646:	4603      	mov	r3, r0
 8000648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800064c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000650:	2b00      	cmp	r3, #0
 8000652:	d111      	bne.n	8000678 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000654:	2019      	movs	r0, #25
 8000656:	f000 f992 	bl	800097e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b0f      	cmp	r3, #15
 800065e:	d808      	bhi.n	8000672 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000660:	2200      	movs	r2, #0
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	2019      	movs	r0, #25
 8000666:	f000 f96e 	bl	8000946 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <HAL_InitTick+0xe0>)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	e002      	b.n	8000678 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000678:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800067c:	4618      	mov	r0, r3
 800067e:	3730      	adds	r7, #48	; 0x30
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000
 8000688:	431bde83 	.word	0x431bde83
 800068c:	20000348 	.word	0x20000348
 8000690:	40012c00 	.word	0x40012c00
 8000694:	20000004 	.word	0x20000004

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler+0x4>

0800069e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <MemManage_Handler+0x4>

080006aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
	...

080006c4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006c8:	4802      	ldr	r0, [pc, #8]	; (80006d4 <TIM1_UP_IRQHandler+0x10>)
 80006ca:	f000 ffe3 	bl	8001694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000348 	.word	0x20000348

080006d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006e6:	490d      	ldr	r1, [pc, #52]	; (800071c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006e8:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006fc:	4c0a      	ldr	r4, [pc, #40]	; (8000728 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800070a:	f7ff ffe5 	bl	80006d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800070e:	f002 fb67 	bl	8002de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000712:	f7ff fe1d 	bl	8000350 <main>
  bx lr
 8000716:	4770      	bx	lr
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000720:	08003090 	.word	0x08003090
  ldr r2, =_sbss
 8000724:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000728:	200010e8 	.word	0x200010e8

0800072c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC1_2_IRQHandler>
	...

08000730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <HAL_Init+0x28>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a07      	ldr	r2, [pc, #28]	; (8000758 <HAL_Init+0x28>)
 800073a:	f043 0310 	orr.w	r3, r3, #16
 800073e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f8f5 	bl	8000930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000746:	200f      	movs	r0, #15
 8000748:	f7ff ff34 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800074c:	f7ff fefa 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40022000 	.word	0x40022000

0800075c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_IncTick+0x1c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_IncTick+0x20>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4413      	add	r3, r2
 800076c:	4a03      	ldr	r2, [pc, #12]	; (800077c <HAL_IncTick+0x20>)
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	20000008 	.word	0x20000008
 800077c:	20000390 	.word	0x20000390

08000780 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return uwTick;
 8000784:	4b02      	ldr	r3, [pc, #8]	; (8000790 <HAL_GetTick+0x10>)
 8000786:	681b      	ldr	r3, [r3, #0]
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	20000390 	.word	0x20000390

08000794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800079c:	f7ff fff0 	bl	8000780 <HAL_GetTick>
 80007a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ac:	d005      	beq.n	80007ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_Delay+0x44>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	461a      	mov	r2, r3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4413      	add	r3, r2
 80007b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ba:	bf00      	nop
 80007bc:	f7ff ffe0 	bl	8000780 <HAL_GetTick>
 80007c0:	4602      	mov	r2, r0
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d8f7      	bhi.n	80007bc <HAL_Delay+0x28>
  {
  }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000008 	.word	0x20000008

080007dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f8:	4013      	ands	r3, r2
 80007fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080e:	4a04      	ldr	r2, [pc, #16]	; (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	60d3      	str	r3, [r2, #12]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <__NVIC_GetPriorityGrouping+0x18>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	f003 0307 	and.w	r3, r3, #7
}
 8000832:	4618      	mov	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	2b00      	cmp	r3, #0
 8000850:	db0b      	blt.n	800086a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	f003 021f 	and.w	r2, r3, #31
 8000858:	4906      	ldr	r1, [pc, #24]	; (8000874 <__NVIC_EnableIRQ+0x34>)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	095b      	lsrs	r3, r3, #5
 8000860:	2001      	movs	r0, #1
 8000862:	fa00 f202 	lsl.w	r2, r0, r2
 8000866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	e000e100 	.word	0xe000e100

08000878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000888:	2b00      	cmp	r3, #0
 800088a:	db0a      	blt.n	80008a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	490c      	ldr	r1, [pc, #48]	; (80008c4 <__NVIC_SetPriority+0x4c>)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	0112      	lsls	r2, r2, #4
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	440b      	add	r3, r1
 800089c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a0:	e00a      	b.n	80008b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4908      	ldr	r1, [pc, #32]	; (80008c8 <__NVIC_SetPriority+0x50>)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	3b04      	subs	r3, #4
 80008b0:	0112      	lsls	r2, r2, #4
 80008b2:	b2d2      	uxtb	r2, r2
 80008b4:	440b      	add	r3, r1
 80008b6:	761a      	strb	r2, [r3, #24]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b089      	sub	sp, #36	; 0x24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	f1c3 0307 	rsb	r3, r3, #7
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	bf28      	it	cs
 80008ea:	2304      	movcs	r3, #4
 80008ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3304      	adds	r3, #4
 80008f2:	2b06      	cmp	r3, #6
 80008f4:	d902      	bls.n	80008fc <NVIC_EncodePriority+0x30>
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3b03      	subs	r3, #3
 80008fa:	e000      	b.n	80008fe <NVIC_EncodePriority+0x32>
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000900:	f04f 32ff 	mov.w	r2, #4294967295
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43da      	mvns	r2, r3
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	401a      	ands	r2, r3
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000914:	f04f 31ff 	mov.w	r1, #4294967295
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	43d9      	mvns	r1, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	4313      	orrs	r3, r2
         );
}
 8000926:	4618      	mov	r0, r3
 8000928:	3724      	adds	r7, #36	; 0x24
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff4f 	bl	80007dc <__NVIC_SetPriorityGrouping>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000946:	b580      	push	{r7, lr}
 8000948:	b086      	sub	sp, #24
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000958:	f7ff ff64 	bl	8000824 <__NVIC_GetPriorityGrouping>
 800095c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	68b9      	ldr	r1, [r7, #8]
 8000962:	6978      	ldr	r0, [r7, #20]
 8000964:	f7ff ffb2 	bl	80008cc <NVIC_EncodePriority>
 8000968:	4602      	mov	r2, r0
 800096a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff81 	bl	8000878 <__NVIC_SetPriority>
}
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff57 	bl	8000840 <__NVIC_EnableIRQ>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800099c:	b480      	push	{r7}
 800099e:	b08b      	sub	sp, #44	; 0x2c
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ae:	e169      	b.n	8000c84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009b0:	2201      	movs	r2, #1
 80009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	69fa      	ldr	r2, [r7, #28]
 80009c0:	4013      	ands	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	f040 8158 	bne.w	8000c7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	4a9a      	ldr	r2, [pc, #616]	; (8000c3c <HAL_GPIO_Init+0x2a0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d05e      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009d8:	4a98      	ldr	r2, [pc, #608]	; (8000c3c <HAL_GPIO_Init+0x2a0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d875      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 80009de:	4a98      	ldr	r2, [pc, #608]	; (8000c40 <HAL_GPIO_Init+0x2a4>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d058      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009e4:	4a96      	ldr	r2, [pc, #600]	; (8000c40 <HAL_GPIO_Init+0x2a4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d86f      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 80009ea:	4a96      	ldr	r2, [pc, #600]	; (8000c44 <HAL_GPIO_Init+0x2a8>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d052      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009f0:	4a94      	ldr	r2, [pc, #592]	; (8000c44 <HAL_GPIO_Init+0x2a8>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d869      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 80009f6:	4a94      	ldr	r2, [pc, #592]	; (8000c48 <HAL_GPIO_Init+0x2ac>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d04c      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009fc:	4a92      	ldr	r2, [pc, #584]	; (8000c48 <HAL_GPIO_Init+0x2ac>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d863      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 8000a02:	4a92      	ldr	r2, [pc, #584]	; (8000c4c <HAL_GPIO_Init+0x2b0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d046      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 8000a08:	4a90      	ldr	r2, [pc, #576]	; (8000c4c <HAL_GPIO_Init+0x2b0>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d85d      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 8000a0e:	2b12      	cmp	r3, #18
 8000a10:	d82a      	bhi.n	8000a68 <HAL_GPIO_Init+0xcc>
 8000a12:	2b12      	cmp	r3, #18
 8000a14:	d859      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 8000a16:	a201      	add	r2, pc, #4	; (adr r2, 8000a1c <HAL_GPIO_Init+0x80>)
 8000a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1c:	08000a97 	.word	0x08000a97
 8000a20:	08000a71 	.word	0x08000a71
 8000a24:	08000a83 	.word	0x08000a83
 8000a28:	08000ac5 	.word	0x08000ac5
 8000a2c:	08000acb 	.word	0x08000acb
 8000a30:	08000acb 	.word	0x08000acb
 8000a34:	08000acb 	.word	0x08000acb
 8000a38:	08000acb 	.word	0x08000acb
 8000a3c:	08000acb 	.word	0x08000acb
 8000a40:	08000acb 	.word	0x08000acb
 8000a44:	08000acb 	.word	0x08000acb
 8000a48:	08000acb 	.word	0x08000acb
 8000a4c:	08000acb 	.word	0x08000acb
 8000a50:	08000acb 	.word	0x08000acb
 8000a54:	08000acb 	.word	0x08000acb
 8000a58:	08000acb 	.word	0x08000acb
 8000a5c:	08000acb 	.word	0x08000acb
 8000a60:	08000a79 	.word	0x08000a79
 8000a64:	08000a8d 	.word	0x08000a8d
 8000a68:	4a79      	ldr	r2, [pc, #484]	; (8000c50 <HAL_GPIO_Init+0x2b4>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d013      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a6e:	e02c      	b.n	8000aca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	623b      	str	r3, [r7, #32]
          break;
 8000a76:	e029      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	623b      	str	r3, [r7, #32]
          break;
 8000a80:	e024      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	3308      	adds	r3, #8
 8000a88:	623b      	str	r3, [r7, #32]
          break;
 8000a8a:	e01f      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	330c      	adds	r3, #12
 8000a92:	623b      	str	r3, [r7, #32]
          break;
 8000a94:	e01a      	b.n	8000acc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d102      	bne.n	8000aa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	623b      	str	r3, [r7, #32]
          break;
 8000aa2:	e013      	b.n	8000acc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d105      	bne.n	8000ab8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aac:	2308      	movs	r3, #8
 8000aae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	611a      	str	r2, [r3, #16]
          break;
 8000ab6:	e009      	b.n	8000acc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	69fa      	ldr	r2, [r7, #28]
 8000ac0:	615a      	str	r2, [r3, #20]
          break;
 8000ac2:	e003      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
          break;
 8000ac8:	e000      	b.n	8000acc <HAL_GPIO_Init+0x130>
          break;
 8000aca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	2bff      	cmp	r3, #255	; 0xff
 8000ad0:	d801      	bhi.n	8000ad6 <HAL_GPIO_Init+0x13a>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	e001      	b.n	8000ada <HAL_GPIO_Init+0x13e>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	2bff      	cmp	r3, #255	; 0xff
 8000ae0:	d802      	bhi.n	8000ae8 <HAL_GPIO_Init+0x14c>
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	e002      	b.n	8000aee <HAL_GPIO_Init+0x152>
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	3b08      	subs	r3, #8
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	210f      	movs	r1, #15
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	43db      	mvns	r3, r3
 8000afe:	401a      	ands	r2, r3
 8000b00:	6a39      	ldr	r1, [r7, #32]
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	fa01 f303 	lsl.w	r3, r1, r3
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 80b1 	beq.w	8000c7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b1c:	4b4d      	ldr	r3, [pc, #308]	; (8000c54 <HAL_GPIO_Init+0x2b8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a4c      	ldr	r2, [pc, #304]	; (8000c54 <HAL_GPIO_Init+0x2b8>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b4a      	ldr	r3, [pc, #296]	; (8000c54 <HAL_GPIO_Init+0x2b8>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b34:	4a48      	ldr	r2, [pc, #288]	; (8000c58 <HAL_GPIO_Init+0x2bc>)
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	089b      	lsrs	r3, r3, #2
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	f003 0303 	and.w	r3, r3, #3
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	220f      	movs	r2, #15
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	4013      	ands	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a40      	ldr	r2, [pc, #256]	; (8000c5c <HAL_GPIO_Init+0x2c0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d013      	beq.n	8000b88 <HAL_GPIO_Init+0x1ec>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a3f      	ldr	r2, [pc, #252]	; (8000c60 <HAL_GPIO_Init+0x2c4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d00d      	beq.n	8000b84 <HAL_GPIO_Init+0x1e8>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a3e      	ldr	r2, [pc, #248]	; (8000c64 <HAL_GPIO_Init+0x2c8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d007      	beq.n	8000b80 <HAL_GPIO_Init+0x1e4>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a3d      	ldr	r2, [pc, #244]	; (8000c68 <HAL_GPIO_Init+0x2cc>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d101      	bne.n	8000b7c <HAL_GPIO_Init+0x1e0>
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e006      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	e004      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b80:	2302      	movs	r3, #2
 8000b82:	e002      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b84:	2301      	movs	r3, #1
 8000b86:	e000      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b8c:	f002 0203 	and.w	r2, r2, #3
 8000b90:	0092      	lsls	r2, r2, #2
 8000b92:	4093      	lsls	r3, r2
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b9a:	492f      	ldr	r1, [pc, #188]	; (8000c58 <HAL_GPIO_Init+0x2bc>)
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	3302      	adds	r3, #2
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d006      	beq.n	8000bc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	492c      	ldr	r1, [pc, #176]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	600b      	str	r3, [r1, #0]
 8000bc0:	e006      	b.n	8000bd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	4928      	ldr	r1, [pc, #160]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bcc:	4013      	ands	r3, r2
 8000bce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d006      	beq.n	8000bea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bdc:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	4922      	ldr	r1, [pc, #136]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	604b      	str	r3, [r1, #4]
 8000be8:	e006      	b.n	8000bf8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	491e      	ldr	r1, [pc, #120]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	4918      	ldr	r1, [pc, #96]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	608b      	str	r3, [r1, #8]
 8000c10:	e006      	b.n	8000c20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	4914      	ldr	r1, [pc, #80]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d021      	beq.n	8000c70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	490e      	ldr	r1, [pc, #56]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	60cb      	str	r3, [r1, #12]
 8000c38:	e021      	b.n	8000c7e <HAL_GPIO_Init+0x2e2>
 8000c3a:	bf00      	nop
 8000c3c:	10320000 	.word	0x10320000
 8000c40:	10310000 	.word	0x10310000
 8000c44:	10220000 	.word	0x10220000
 8000c48:	10210000 	.word	0x10210000
 8000c4c:	10120000 	.word	0x10120000
 8000c50:	10110000 	.word	0x10110000
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000
 8000c5c:	40010800 	.word	0x40010800
 8000c60:	40010c00 	.word	0x40010c00
 8000c64:	40011000 	.word	0x40011000
 8000c68:	40011400 	.word	0x40011400
 8000c6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_GPIO_Init+0x304>)
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	4909      	ldr	r1, [pc, #36]	; (8000ca0 <HAL_GPIO_Init+0x304>)
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	3301      	adds	r3, #1
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f47f ae8e 	bne.w	80009b0 <HAL_GPIO_Init+0x14>
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	372c      	adds	r7, #44	; 0x2c
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	40010400 	.word	0x40010400

08000ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cb4:	787b      	ldrb	r3, [r7, #1]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cba:	887a      	ldrh	r2, [r7, #2]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cc0:	e003      	b.n	8000cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cc2:	887b      	ldrh	r3, [r7, #2]
 8000cc4:	041a      	lsls	r2, r3, #16
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	611a      	str	r2, [r3, #16]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e272      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 8087 	beq.w	8000e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf4:	4b92      	ldr	r3, [pc, #584]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 030c 	and.w	r3, r3, #12
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d00c      	beq.n	8000d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d00:	4b8f      	ldr	r3, [pc, #572]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	d112      	bne.n	8000d32 <HAL_RCC_OscConfig+0x5e>
 8000d0c:	4b8c      	ldr	r3, [pc, #560]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d18:	d10b      	bne.n	8000d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1a:	4b89      	ldr	r3, [pc, #548]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d06c      	beq.n	8000e00 <HAL_RCC_OscConfig+0x12c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d168      	bne.n	8000e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e24c      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d3a:	d106      	bne.n	8000d4a <HAL_RCC_OscConfig+0x76>
 8000d3c:	4b80      	ldr	r3, [pc, #512]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a7f      	ldr	r2, [pc, #508]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	e02e      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10c      	bne.n	8000d6c <HAL_RCC_OscConfig+0x98>
 8000d52:	4b7b      	ldr	r3, [pc, #492]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a7a      	ldr	r2, [pc, #488]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	4b78      	ldr	r3, [pc, #480]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a77      	ldr	r2, [pc, #476]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e01d      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d74:	d10c      	bne.n	8000d90 <HAL_RCC_OscConfig+0xbc>
 8000d76:	4b72      	ldr	r3, [pc, #456]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a71      	ldr	r2, [pc, #452]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	4b6f      	ldr	r3, [pc, #444]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a6e      	ldr	r2, [pc, #440]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e00b      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d90:	4b6b      	ldr	r3, [pc, #428]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a6a      	ldr	r2, [pc, #424]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b68      	ldr	r3, [pc, #416]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a67      	ldr	r2, [pc, #412]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d013      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fce6 	bl	8000780 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db8:	f7ff fce2 	bl	8000780 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b64      	cmp	r3, #100	; 0x64
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e200      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dca:	4b5d      	ldr	r3, [pc, #372]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0xe4>
 8000dd6:	e014      	b.n	8000e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fcd2 	bl	8000780 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de0:	f7ff fcce 	bl	8000780 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b64      	cmp	r3, #100	; 0x64
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e1ec      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df2:	4b53      	ldr	r3, [pc, #332]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f0      	bne.n	8000de0 <HAL_RCC_OscConfig+0x10c>
 8000dfe:	e000      	b.n	8000e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d063      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00b      	beq.n	8000e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e1a:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d11c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x18c>
 8000e26:	4b46      	ldr	r3, [pc, #280]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d116      	bne.n	8000e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e32:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d005      	beq.n	8000e4a <HAL_RCC_OscConfig+0x176>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d001      	beq.n	8000e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e1c0      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	4939      	ldr	r1, [pc, #228]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5e:	e03a      	b.n	8000ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d020      	beq.n	8000eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e68:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <HAL_RCC_OscConfig+0x270>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6e:	f7ff fc87 	bl	8000780 <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e76:	f7ff fc83 	bl	8000780 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e1a1      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f0      	beq.n	8000e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e94:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4927      	ldr	r1, [pc, #156]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	600b      	str	r3, [r1, #0]
 8000ea8:	e015      	b.n	8000ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <HAL_RCC_OscConfig+0x270>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fc66 	bl	8000780 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fc62 	bl	8000780 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e180      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f0      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d03a      	beq.n	8000f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d019      	beq.n	8000f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_RCC_OscConfig+0x274>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fc46 	bl	8000780 <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fc42 	bl	8000780 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e160      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0f0      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f000 faf4 	bl	8001504 <RCC_Delay>
 8000f1c:	e01c      	b.n	8000f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_RCC_OscConfig+0x274>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f24:	f7ff fc2c 	bl	8000780 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2a:	e00f      	b.n	8000f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fc28 	bl	8000780 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d908      	bls.n	8000f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e146      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
 8000f44:	42420000 	.word	0x42420000
 8000f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4c:	4b92      	ldr	r3, [pc, #584]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1e9      	bne.n	8000f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80a6 	beq.w	80010b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f6a:	4b8b      	ldr	r3, [pc, #556]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10d      	bne.n	8000f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b88      	ldr	r3, [pc, #544]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a87      	ldr	r2, [pc, #540]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b85      	ldr	r3, [pc, #532]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f92:	4b82      	ldr	r3, [pc, #520]	; (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d118      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9e:	4b7f      	ldr	r3, [pc, #508]	; (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a7e      	ldr	r2, [pc, #504]	; (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fbe9 	bl	8000780 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb2:	f7ff fbe5 	bl	8000780 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b64      	cmp	r3, #100	; 0x64
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e103      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	4b75      	ldr	r3, [pc, #468]	; (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f0      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d106      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x312>
 8000fd8:	4b6f      	ldr	r3, [pc, #444]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	4a6e      	ldr	r2, [pc, #440]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6213      	str	r3, [r2, #32]
 8000fe4:	e02d      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x334>
 8000fee:	4b6a      	ldr	r3, [pc, #424]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	4a69      	ldr	r2, [pc, #420]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	f023 0301 	bic.w	r3, r3, #1
 8000ff8:	6213      	str	r3, [r2, #32]
 8000ffa:	4b67      	ldr	r3, [pc, #412]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	4a66      	ldr	r2, [pc, #408]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	f023 0304 	bic.w	r3, r3, #4
 8001004:	6213      	str	r3, [r2, #32]
 8001006:	e01c      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b05      	cmp	r3, #5
 800100e:	d10c      	bne.n	800102a <HAL_RCC_OscConfig+0x356>
 8001010:	4b61      	ldr	r3, [pc, #388]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4a60      	ldr	r2, [pc, #384]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6213      	str	r3, [r2, #32]
 800101c:	4b5e      	ldr	r3, [pc, #376]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a5d      	ldr	r2, [pc, #372]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6213      	str	r3, [r2, #32]
 8001028:	e00b      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 800102a:	4b5b      	ldr	r3, [pc, #364]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4a5a      	ldr	r2, [pc, #360]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	6213      	str	r3, [r2, #32]
 8001036:	4b58      	ldr	r3, [pc, #352]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4a57      	ldr	r2, [pc, #348]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	f023 0304 	bic.w	r3, r3, #4
 8001040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d015      	beq.n	8001076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104a:	f7ff fb99 	bl	8000780 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001050:	e00a      	b.n	8001068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001052:	f7ff fb95 	bl	8000780 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001060:	4293      	cmp	r3, r2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e0b1      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001068:	4b4b      	ldr	r3, [pc, #300]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0ee      	beq.n	8001052 <HAL_RCC_OscConfig+0x37e>
 8001074:	e014      	b.n	80010a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fb83 	bl	8000780 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800107c:	e00a      	b.n	8001094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107e:	f7ff fb7f 	bl	8000780 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f241 3288 	movw	r2, #5000	; 0x1388
 800108c:	4293      	cmp	r3, r2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e09b      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001094:	4b40      	ldr	r3, [pc, #256]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1ee      	bne.n	800107e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d105      	bne.n	80010b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a6:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a3b      	ldr	r2, [pc, #236]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8087 	beq.w	80011ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010bc:	4b36      	ldr	r3, [pc, #216]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d061      	beq.n	800118c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d146      	bne.n	800115e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d0:	4b33      	ldr	r3, [pc, #204]	; (80011a0 <HAL_RCC_OscConfig+0x4cc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fb53 	bl	8000780 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010de:	f7ff fb4f 	bl	8000780 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e06d      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f0      	bne.n	80010de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001104:	d108      	bne.n	8001118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	4921      	ldr	r1, [pc, #132]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a19      	ldr	r1, [r3, #32]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	430b      	orrs	r3, r1
 800112a:	491b      	ldr	r1, [pc, #108]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_RCC_OscConfig+0x4cc>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001136:	f7ff fb23 	bl	8000780 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113e:	f7ff fb1f 	bl	8000780 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e03d      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x46a>
 800115c:	e035      	b.n	80011ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_RCC_OscConfig+0x4cc>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fb0c 	bl	8000780 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116c:	f7ff fb08 	bl	8000780 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e026      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x498>
 800118a:	e01e      	b.n	80011ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d107      	bne.n	80011a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e019      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
 8001198:	40021000 	.word	0x40021000
 800119c:	40007000 	.word	0x40007000
 80011a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_RCC_OscConfig+0x500>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d106      	bne.n	80011c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d001      	beq.n	80011ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000

080011d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0d0      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011ec:	4b6a      	ldr	r3, [pc, #424]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d910      	bls.n	800121c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fa:	4b67      	ldr	r3, [pc, #412]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 0207 	bic.w	r2, r3, #7
 8001202:	4965      	ldr	r1, [pc, #404]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800120a:	4b63      	ldr	r3, [pc, #396]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d001      	beq.n	800121c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e0b8      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d020      	beq.n	800126a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001234:	4b59      	ldr	r3, [pc, #356]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	4a58      	ldr	r2, [pc, #352]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800123e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800124c:	4b53      	ldr	r3, [pc, #332]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a52      	ldr	r2, [pc, #328]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001256:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001258:	4b50      	ldr	r3, [pc, #320]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	494d      	ldr	r1, [pc, #308]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	4313      	orrs	r3, r2
 8001268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d040      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d107      	bne.n	800128e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	4b47      	ldr	r3, [pc, #284]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d115      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e07f      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d107      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001296:	4b41      	ldr	r3, [pc, #260]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e073      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a6:	4b3d      	ldr	r3, [pc, #244]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e06b      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b6:	4b39      	ldr	r3, [pc, #228]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f023 0203 	bic.w	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4936      	ldr	r1, [pc, #216]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c8:	f7ff fa5a 	bl	8000780 <HAL_GetTick>
 80012cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ce:	e00a      	b.n	80012e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d0:	f7ff fa56 	bl	8000780 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f241 3288 	movw	r2, #5000	; 0x1388
 80012de:	4293      	cmp	r3, r2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e053      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 020c 	and.w	r2, r3, #12
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d1eb      	bne.n	80012d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d210      	bcs.n	8001328 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 0207 	bic.w	r2, r3, #7
 800130e:	4922      	ldr	r1, [pc, #136]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	d001      	beq.n	8001328 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e032      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d008      	beq.n	8001346 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	4916      	ldr	r1, [pc, #88]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d009      	beq.n	8001366 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	490e      	ldr	r1, [pc, #56]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001366:	f000 f821 	bl	80013ac <HAL_RCC_GetSysClockFreq>
 800136a:	4602      	mov	r2, r0
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	490a      	ldr	r1, [pc, #40]	; (80013a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001378:	5ccb      	ldrb	r3, [r1, r3]
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
 800137e:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f914 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40022000 	.word	0x40022000
 800139c:	40021000 	.word	0x40021000
 80013a0:	08003010 	.word	0x08003010
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000004 	.word	0x20000004

080013ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013ac:	b490      	push	{r4, r7}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013b2:	4b29      	ldr	r3, [pc, #164]	; (8001458 <HAL_RCC_GetSysClockFreq+0xac>)
 80013b4:	1d3c      	adds	r4, r7, #4
 80013b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013bc:	f240 2301 	movw	r3, #513	; 0x201
 80013c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <HAL_RCC_GetSysClockFreq+0xb0>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d002      	beq.n	80013ec <HAL_RCC_GetSysClockFreq+0x40>
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d003      	beq.n	80013f2 <HAL_RCC_GetSysClockFreq+0x46>
 80013ea:	e02b      	b.n	8001444 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013ee:	623b      	str	r3, [r7, #32]
      break;
 80013f0:	e02b      	b.n	800144a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	0c9b      	lsrs	r3, r3, #18
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3328      	adds	r3, #40	; 0x28
 80013fc:	443b      	add	r3, r7
 80013fe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001402:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d012      	beq.n	8001434 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	0c5b      	lsrs	r3, r3, #17
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	3328      	adds	r3, #40	; 0x28
 800141a:	443b      	add	r3, r7
 800141c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001420:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001426:	fb03 f202 	mul.w	r2, r3, r2
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
 8001432:	e004      	b.n	800143e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001438:	fb02 f303 	mul.w	r3, r2, r3
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	623b      	str	r3, [r7, #32]
      break;
 8001442:	e002      	b.n	800144a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001446:	623b      	str	r3, [r7, #32]
      break;
 8001448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800144a:	6a3b      	ldr	r3, [r7, #32]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3728      	adds	r7, #40	; 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bc90      	pop	{r4, r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	08002ff8 	.word	0x08002ff8
 800145c:	40021000 	.word	0x40021000
 8001460:	007a1200 	.word	0x007a1200
 8001464:	003d0900 	.word	0x003d0900

08001468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <HAL_RCC_GetHCLKFreq+0x10>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000000 	.word	0x20000000

0800147c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001480:	f7ff fff2 	bl	8001468 <HAL_RCC_GetHCLKFreq>
 8001484:	4602      	mov	r2, r0
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	0adb      	lsrs	r3, r3, #11
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	4903      	ldr	r1, [pc, #12]	; (80014a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001492:	5ccb      	ldrb	r3, [r1, r3]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	08003020 	.word	0x08003020

080014a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	220f      	movs	r2, #15
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_RCC_GetClockConfig+0x5c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0207 	and.w	r2, r3, #7
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40021000 	.word	0x40021000
 8001500:	40022000 	.word	0x40022000

08001504 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <RCC_Delay+0x34>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <RCC_Delay+0x38>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	0a5b      	lsrs	r3, r3, #9
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001520:	bf00      	nop
  }
  while (Delay --);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1e5a      	subs	r2, r3, #1
 8001526:	60fa      	str	r2, [r7, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f9      	bne.n	8001520 <RCC_Delay+0x1c>
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000000 	.word	0x20000000
 800153c:	10624dd3 	.word	0x10624dd3

08001540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e041      	b.n	80015d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f839 	bl	80015de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3304      	adds	r3, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f000 f9b4 	bl	80018ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d001      	beq.n	8001608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e03a      	b.n	800167e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a18      	ldr	r2, [pc, #96]	; (8001688 <HAL_TIM_Base_Start_IT+0x98>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00e      	beq.n	8001648 <HAL_TIM_Base_Start_IT+0x58>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001632:	d009      	beq.n	8001648 <HAL_TIM_Base_Start_IT+0x58>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a14      	ldr	r2, [pc, #80]	; (800168c <HAL_TIM_Base_Start_IT+0x9c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d004      	beq.n	8001648 <HAL_TIM_Base_Start_IT+0x58>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a13      	ldr	r2, [pc, #76]	; (8001690 <HAL_TIM_Base_Start_IT+0xa0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d111      	bne.n	800166c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b06      	cmp	r3, #6
 8001658:	d010      	beq.n	800167c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0201 	orr.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800166a:	e007      	b.n	800167c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	40012c00 	.word	0x40012c00
 800168c:	40000400 	.word	0x40000400
 8001690:	40000800 	.word	0x40000800

08001694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d122      	bne.n	80016f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d11b      	bne.n	80016f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f06f 0202 	mvn.w	r2, #2
 80016c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f8ed 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
 80016dc:	e005      	b.n	80016ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f8e0 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f8ef 	bl	80018c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d122      	bne.n	8001744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b04      	cmp	r3, #4
 800170a:	d11b      	bne.n	8001744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f06f 0204 	mvn.w	r2, #4
 8001714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2202      	movs	r2, #2
 800171a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f8c3 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
 8001730:	e005      	b.n	800173e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f8b6 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f8c5 	bl	80018c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b08      	cmp	r3, #8
 8001750:	d122      	bne.n	8001798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b08      	cmp	r3, #8
 800175e:	d11b      	bne.n	8001798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f06f 0208 	mvn.w	r2, #8
 8001768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2204      	movs	r2, #4
 800176e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f899 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
 8001784:	e005      	b.n	8001792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f88c 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f89b 	bl	80018c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d122      	bne.n	80017ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d11b      	bne.n	80017ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f06f 0210 	mvn.w	r2, #16
 80017bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2208      	movs	r2, #8
 80017c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f86f 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
 80017d8:	e005      	b.n	80017e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f862 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f871 	bl	80018c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d10e      	bne.n	8001818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b01      	cmp	r3, #1
 8001806:	d107      	bne.n	8001818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f06f 0201 	mvn.w	r2, #1
 8001810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7fe fe7e 	bl	8000514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	2b80      	cmp	r3, #128	; 0x80
 8001824:	d10e      	bne.n	8001844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001830:	2b80      	cmp	r3, #128	; 0x80
 8001832:	d107      	bne.n	8001844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800183c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f8bf 	bl	80019c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184e:	2b40      	cmp	r3, #64	; 0x40
 8001850:	d10e      	bne.n	8001870 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800185c:	2b40      	cmp	r3, #64	; 0x40
 800185e:	d107      	bne.n	8001870 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f835 	bl	80018da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	f003 0320 	and.w	r3, r3, #32
 800187a:	2b20      	cmp	r3, #32
 800187c:	d10e      	bne.n	800189c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f003 0320 	and.w	r3, r3, #32
 8001888:	2b20      	cmp	r3, #32
 800188a:	d107      	bne.n	800189c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f06f 0220 	mvn.w	r2, #32
 8001894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f88a 	bl	80019b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a29      	ldr	r2, [pc, #164]	; (80019a4 <TIM_Base_SetConfig+0xb8>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d00b      	beq.n	800191c <TIM_Base_SetConfig+0x30>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190a:	d007      	beq.n	800191c <TIM_Base_SetConfig+0x30>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <TIM_Base_SetConfig+0xbc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d003      	beq.n	800191c <TIM_Base_SetConfig+0x30>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a25      	ldr	r2, [pc, #148]	; (80019ac <TIM_Base_SetConfig+0xc0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d108      	bne.n	800192e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <TIM_Base_SetConfig+0xb8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00b      	beq.n	800194e <TIM_Base_SetConfig+0x62>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193c:	d007      	beq.n	800194e <TIM_Base_SetConfig+0x62>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <TIM_Base_SetConfig+0xbc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d003      	beq.n	800194e <TIM_Base_SetConfig+0x62>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a18      	ldr	r2, [pc, #96]	; (80019ac <TIM_Base_SetConfig+0xc0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d108      	bne.n	8001960 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <TIM_Base_SetConfig+0xb8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d103      	bne.n	8001994 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	615a      	str	r2, [r3, #20]
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	40012c00 	.word	0x40012c00
 80019a8:	40000400 	.word	0x40000400
 80019ac:	40000800 	.word	0x40000800

080019b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80019e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e6:	2b84      	cmp	r3, #132	; 0x84
 80019e8:	d005      	beq.n	80019f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80019ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4413      	add	r3, r2
 80019f2:	3303      	adds	r3, #3
 80019f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001a06:	f000 fae7 	bl	8001fd8 <vTaskStartScheduler>
  
  return osOK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af04      	add	r7, sp, #16
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d020      	beq.n	8001a64 <osThreadCreate+0x54>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d01c      	beq.n	8001a64 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685c      	ldr	r4, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681d      	ldr	r5, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691e      	ldr	r6, [r3, #16]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ffc9 	bl	80019d4 <makeFreeRtosPriority>
 8001a42:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a4c:	9202      	str	r2, [sp, #8]
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	9100      	str	r1, [sp, #0]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	4632      	mov	r2, r6
 8001a56:	4629      	mov	r1, r5
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f000 f8e8 	bl	8001c2e <xTaskCreateStatic>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	e01c      	b.n	8001a9e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685c      	ldr	r4, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a70:	b29e      	uxth	r6, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ffab 	bl	80019d4 <makeFreeRtosPriority>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	9200      	str	r2, [sp, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4632      	mov	r2, r6
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f000 f929 	bl	8001ce6 <xTaskCreate>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d001      	beq.n	8001a9e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aa8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <osDelay+0x16>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	e000      	b.n	8001ac0 <osDelay+0x18>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fa55 	bl	8001f70 <vTaskDelay>
  
  return osOK;
 8001ac6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f103 0208 	add.w	r2, r3, #8
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f103 0208 	add.w	r2, r3, #8
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f103 0208 	add.w	r2, r3, #8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b26:	b480      	push	{r7}
 8001b28:	b085      	sub	sp, #20
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	601a      	str	r2, [r3, #0]
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b82:	d103      	bne.n	8001b8c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	e00c      	b.n	8001ba6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3308      	adds	r3, #8
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	e002      	b.n	8001b9a <vListInsert+0x2e>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d2f6      	bcs.n	8001b94 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	601a      	str	r2, [r3, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6892      	ldr	r2, [r2, #8]
 8001bf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6852      	ldr	r2, [r2, #4]
 8001bfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d103      	bne.n	8001c10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	1e5a      	subs	r2, r3, #1
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr

08001c2e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b08e      	sub	sp, #56	; 0x38
 8001c32:	af04      	add	r7, sp, #16
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10a      	bne.n	8001c58 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c46:	f383 8811 	msr	BASEPRI, r3
 8001c4a:	f3bf 8f6f 	isb	sy
 8001c4e:	f3bf 8f4f 	dsb	sy
 8001c52:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c54:	bf00      	nop
 8001c56:	e7fe      	b.n	8001c56 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10a      	bne.n	8001c74 <xTaskCreateStatic+0x46>
	__asm volatile
 8001c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c62:	f383 8811 	msr	BASEPRI, r3
 8001c66:	f3bf 8f6f 	isb	sy
 8001c6a:	f3bf 8f4f 	dsb	sy
 8001c6e:	61fb      	str	r3, [r7, #28]
}
 8001c70:	bf00      	nop
 8001c72:	e7fe      	b.n	8001c72 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001c74:	23b4      	movs	r3, #180	; 0xb4
 8001c76:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	2bb4      	cmp	r3, #180	; 0xb4
 8001c7c:	d00a      	beq.n	8001c94 <xTaskCreateStatic+0x66>
	__asm volatile
 8001c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c82:	f383 8811 	msr	BASEPRI, r3
 8001c86:	f3bf 8f6f 	isb	sy
 8001c8a:	f3bf 8f4f 	dsb	sy
 8001c8e:	61bb      	str	r3, [r7, #24]
}
 8001c90:	bf00      	nop
 8001c92:	e7fe      	b.n	8001c92 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d01e      	beq.n	8001cd8 <xTaskCreateStatic+0xaa>
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01b      	beq.n	8001cd8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	2202      	movs	r2, #2
 8001cae:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	9303      	str	r3, [sp, #12]
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	9302      	str	r3, [sp, #8]
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 f850 	bl	8001d70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cd2:	f000 f8e3 	bl	8001e9c <prvAddNewTaskToReadyList>
 8001cd6:	e001      	b.n	8001cdc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001cdc:	697b      	ldr	r3, [r7, #20]
	}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3728      	adds	r7, #40	; 0x28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b08c      	sub	sp, #48	; 0x30
 8001cea:	af04      	add	r7, sp, #16
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fe98 	bl	8002a30 <pvPortMalloc>
 8001d00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00e      	beq.n	8001d26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001d08:	20b4      	movs	r0, #180	; 0xb4
 8001d0a:	f000 fe91 	bl	8002a30 <pvPortMalloc>
 8001d0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d1c:	e005      	b.n	8001d2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001d1e:	6978      	ldr	r0, [r7, #20]
 8001d20:	f000 ff4a 	bl	8002bb8 <vPortFree>
 8001d24:	e001      	b.n	8001d2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d017      	beq.n	8001d60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d38:	88fa      	ldrh	r2, [r7, #6]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	9303      	str	r3, [sp, #12]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	9302      	str	r3, [sp, #8]
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 f80e 	bl	8001d70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d54:	69f8      	ldr	r0, [r7, #28]
 8001d56:	f000 f8a1 	bl	8001e9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	61bb      	str	r3, [r7, #24]
 8001d5e:	e002      	b.n	8001d66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
 8001d64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001d66:	69bb      	ldr	r3, [r7, #24]
	}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3720      	adds	r7, #32
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f023 0307 	bic.w	r3, r3, #7
 8001d96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00a      	beq.n	8001db8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da6:	f383 8811 	msr	BASEPRI, r3
 8001daa:	f3bf 8f6f 	isb	sy
 8001dae:	f3bf 8f4f 	dsb	sy
 8001db2:	617b      	str	r3, [r7, #20]
}
 8001db4:	bf00      	nop
 8001db6:	e7fe      	b.n	8001db6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	e012      	b.n	8001de4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	7819      	ldrb	r1, [r3, #0]
 8001dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	4413      	add	r3, r2
 8001dcc:	3334      	adds	r3, #52	; 0x34
 8001dce:	460a      	mov	r2, r1
 8001dd0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d006      	beq.n	8001dec <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3301      	adds	r3, #1
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b0f      	cmp	r3, #15
 8001de8:	d9e9      	bls.n	8001dbe <prvInitialiseNewTask+0x4e>
 8001dea:	e000      	b.n	8001dee <prvInitialiseNewTask+0x7e>
		{
			break;
 8001dec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d901      	bls.n	8001e00 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001dfc:	2306      	movs	r3, #6
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0e:	2200      	movs	r2, #0
 8001e10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e14:	3304      	adds	r3, #4
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fe79 	bl	8001b0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1e:	3318      	adds	r3, #24
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fe74 	bl	8001b0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2e:	f1c3 0207 	rsb	r2, r3, #7
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4e:	334c      	adds	r3, #76	; 0x4c
 8001e50:	2260      	movs	r2, #96	; 0x60
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 ffe9 	bl	8002e2c <memset>
 8001e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5c:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <prvInitialiseNewTask+0x120>)
 8001e5e:	651a      	str	r2, [r3, #80]	; 0x50
 8001e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e62:	4a0c      	ldr	r2, [pc, #48]	; (8001e94 <prvInitialiseNewTask+0x124>)
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54
 8001e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e68:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <prvInitialiseNewTask+0x128>)
 8001e6a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	68f9      	ldr	r1, [r7, #12]
 8001e70:	69b8      	ldr	r0, [r7, #24]
 8001e72:	f000 fc29 	bl	80026c8 <pxPortInitialiseStack>
 8001e76:	4602      	mov	r2, r0
 8001e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e88:	bf00      	nop
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	08003048 	.word	0x08003048
 8001e94:	08003068 	.word	0x08003068
 8001e98:	08003028 	.word	0x08003028

08001e9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001ea4:	f000 fd02 	bl	80028ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <prvAddNewTaskToReadyList+0xb8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3301      	adds	r3, #1
 8001eae:	4a29      	ldr	r2, [pc, #164]	; (8001f54 <prvAddNewTaskToReadyList+0xb8>)
 8001eb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001eb2:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <prvAddNewTaskToReadyList+0xbc>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001eba:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <prvAddNewTaskToReadyList+0xbc>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ec0:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <prvAddNewTaskToReadyList+0xb8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d110      	bne.n	8001eea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001ec8:	f000 fad2 	bl	8002470 <prvInitialiseTaskLists>
 8001ecc:	e00d      	b.n	8001eea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001ece:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <prvAddNewTaskToReadyList+0xc0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <prvAddNewTaskToReadyList+0xbc>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d802      	bhi.n	8001eea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001ee4:	4a1c      	ldr	r2, [pc, #112]	; (8001f58 <prvAddNewTaskToReadyList+0xbc>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <prvAddNewTaskToReadyList+0xc4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	4a1b      	ldr	r2, [pc, #108]	; (8001f60 <prvAddNewTaskToReadyList+0xc4>)
 8001ef2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	2201      	movs	r2, #1
 8001efa:	409a      	lsls	r2, r3
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <prvAddNewTaskToReadyList+0xc8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <prvAddNewTaskToReadyList+0xc8>)
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4a15      	ldr	r2, [pc, #84]	; (8001f68 <prvAddNewTaskToReadyList+0xcc>)
 8001f14:	441a      	add	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	f7ff fe02 	bl	8001b26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001f22:	f000 fcf3 	bl	800290c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <prvAddNewTaskToReadyList+0xc0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00e      	beq.n	8001f4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <prvAddNewTaskToReadyList+0xbc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d207      	bcs.n	8001f4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <prvAddNewTaskToReadyList+0xd0>)
 8001f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000494 	.word	0x20000494
 8001f58:	20000394 	.word	0x20000394
 8001f5c:	200004a0 	.word	0x200004a0
 8001f60:	200004b0 	.word	0x200004b0
 8001f64:	2000049c 	.word	0x2000049c
 8001f68:	20000398 	.word	0x20000398
 8001f6c:	e000ed04 	.word	0xe000ed04

08001f70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d017      	beq.n	8001fb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <vTaskDelay+0x60>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <vTaskDelay+0x30>
	__asm volatile
 8001f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8e:	f383 8811 	msr	BASEPRI, r3
 8001f92:	f3bf 8f6f 	isb	sy
 8001f96:	f3bf 8f4f 	dsb	sy
 8001f9a:	60bb      	str	r3, [r7, #8]
}
 8001f9c:	bf00      	nop
 8001f9e:	e7fe      	b.n	8001f9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001fa0:	f000 f884 	bl	80020ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fb28 	bl	80025fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001fac:	f000 f88c 	bl	80020c8 <xTaskResumeAll>
 8001fb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d107      	bne.n	8001fc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <vTaskDelay+0x64>)
 8001fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	f3bf 8f4f 	dsb	sy
 8001fc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	200004bc 	.word	0x200004bc
 8001fd4:	e000ed04 	.word	0xe000ed04

08001fd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001fe6:	463a      	mov	r2, r7
 8001fe8:	1d39      	adds	r1, r7, #4
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe f996 	bl	8000320 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001ff4:	6839      	ldr	r1, [r7, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	9202      	str	r2, [sp, #8]
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	2300      	movs	r3, #0
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2300      	movs	r3, #0
 8002004:	460a      	mov	r2, r1
 8002006:	4921      	ldr	r1, [pc, #132]	; (800208c <vTaskStartScheduler+0xb4>)
 8002008:	4821      	ldr	r0, [pc, #132]	; (8002090 <vTaskStartScheduler+0xb8>)
 800200a:	f7ff fe10 	bl	8001c2e <xTaskCreateStatic>
 800200e:	4603      	mov	r3, r0
 8002010:	4a20      	ldr	r2, [pc, #128]	; (8002094 <vTaskStartScheduler+0xbc>)
 8002012:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002014:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <vTaskStartScheduler+0xbc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800201c:	2301      	movs	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e001      	b.n	8002026 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d11b      	bne.n	8002064 <vTaskStartScheduler+0x8c>
	__asm volatile
 800202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	613b      	str	r3, [r7, #16]
}
 800203e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002040:	4b15      	ldr	r3, [pc, #84]	; (8002098 <vTaskStartScheduler+0xc0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	334c      	adds	r3, #76	; 0x4c
 8002046:	4a15      	ldr	r2, [pc, #84]	; (800209c <vTaskStartScheduler+0xc4>)
 8002048:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <vTaskStartScheduler+0xc8>)
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <vTaskStartScheduler+0xcc>)
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <vTaskStartScheduler+0xd0>)
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800205e:	f000 fbb3 	bl	80027c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002062:	e00e      	b.n	8002082 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206a:	d10a      	bne.n	8002082 <vTaskStartScheduler+0xaa>
	__asm volatile
 800206c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002070:	f383 8811 	msr	BASEPRI, r3
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	60fb      	str	r3, [r7, #12]
}
 800207e:	bf00      	nop
 8002080:	e7fe      	b.n	8002080 <vTaskStartScheduler+0xa8>
}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	08003008 	.word	0x08003008
 8002090:	08002441 	.word	0x08002441
 8002094:	200004b8 	.word	0x200004b8
 8002098:	20000394 	.word	0x20000394
 800209c:	20000010 	.word	0x20000010
 80020a0:	200004b4 	.word	0x200004b4
 80020a4:	200004a0 	.word	0x200004a0
 80020a8:	20000498 	.word	0x20000498

080020ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <vTaskSuspendAll+0x18>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	4a03      	ldr	r2, [pc, #12]	; (80020c4 <vTaskSuspendAll+0x18>)
 80020b8:	6013      	str	r3, [r2, #0]
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	200004bc 	.word	0x200004bc

080020c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <xTaskResumeAll+0x114>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10a      	bne.n	80020f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80020de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e2:	f383 8811 	msr	BASEPRI, r3
 80020e6:	f3bf 8f6f 	isb	sy
 80020ea:	f3bf 8f4f 	dsb	sy
 80020ee:	603b      	str	r3, [r7, #0]
}
 80020f0:	bf00      	nop
 80020f2:	e7fe      	b.n	80020f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80020f4:	f000 fbda 	bl	80028ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80020f8:	4b38      	ldr	r3, [pc, #224]	; (80021dc <xTaskResumeAll+0x114>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	4a37      	ldr	r2, [pc, #220]	; (80021dc <xTaskResumeAll+0x114>)
 8002100:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002102:	4b36      	ldr	r3, [pc, #216]	; (80021dc <xTaskResumeAll+0x114>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d161      	bne.n	80021ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800210a:	4b35      	ldr	r3, [pc, #212]	; (80021e0 <xTaskResumeAll+0x118>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d05d      	beq.n	80021ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002112:	e02e      	b.n	8002172 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002114:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <xTaskResumeAll+0x11c>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3318      	adds	r3, #24
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fd5b 	bl	8001bdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3304      	adds	r3, #4
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fd56 	bl	8001bdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	2201      	movs	r2, #1
 8002136:	409a      	lsls	r2, r3
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <xTaskResumeAll+0x120>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4313      	orrs	r3, r2
 800213e:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <xTaskResumeAll+0x120>)
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4a27      	ldr	r2, [pc, #156]	; (80021ec <xTaskResumeAll+0x124>)
 8002150:	441a      	add	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3304      	adds	r3, #4
 8002156:	4619      	mov	r1, r3
 8002158:	4610      	mov	r0, r2
 800215a:	f7ff fce4 	bl	8001b26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002162:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <xTaskResumeAll+0x128>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	429a      	cmp	r2, r3
 800216a:	d302      	bcc.n	8002172 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800216c:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <xTaskResumeAll+0x12c>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <xTaskResumeAll+0x11c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1cc      	bne.n	8002114 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002180:	f000 fa18 	bl	80025b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002184:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <xTaskResumeAll+0x130>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d010      	beq.n	80021b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002190:	f000 f836 	bl	8002200 <xTaskIncrementTick>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <xTaskResumeAll+0x12c>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f1      	bne.n	8002190 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <xTaskResumeAll+0x130>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <xTaskResumeAll+0x12c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80021ba:	2301      	movs	r3, #1
 80021bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <xTaskResumeAll+0x134>)
 80021c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	f3bf 8f4f 	dsb	sy
 80021ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80021ce:	f000 fb9d 	bl	800290c <vPortExitCritical>

	return xAlreadyYielded;
 80021d2:	68bb      	ldr	r3, [r7, #8]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200004bc 	.word	0x200004bc
 80021e0:	20000494 	.word	0x20000494
 80021e4:	20000454 	.word	0x20000454
 80021e8:	2000049c 	.word	0x2000049c
 80021ec:	20000398 	.word	0x20000398
 80021f0:	20000394 	.word	0x20000394
 80021f4:	200004a8 	.word	0x200004a8
 80021f8:	200004a4 	.word	0x200004a4
 80021fc:	e000ed04 	.word	0xe000ed04

08002200 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800220a:	4b51      	ldr	r3, [pc, #324]	; (8002350 <xTaskIncrementTick+0x150>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f040 808d 	bne.w	800232e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002214:	4b4f      	ldr	r3, [pc, #316]	; (8002354 <xTaskIncrementTick+0x154>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800221c:	4a4d      	ldr	r2, [pc, #308]	; (8002354 <xTaskIncrementTick+0x154>)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d120      	bne.n	800226a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002228:	4b4b      	ldr	r3, [pc, #300]	; (8002358 <xTaskIncrementTick+0x158>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <xTaskIncrementTick+0x48>
	__asm volatile
 8002232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002236:	f383 8811 	msr	BASEPRI, r3
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	f3bf 8f4f 	dsb	sy
 8002242:	603b      	str	r3, [r7, #0]
}
 8002244:	bf00      	nop
 8002246:	e7fe      	b.n	8002246 <xTaskIncrementTick+0x46>
 8002248:	4b43      	ldr	r3, [pc, #268]	; (8002358 <xTaskIncrementTick+0x158>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b43      	ldr	r3, [pc, #268]	; (800235c <xTaskIncrementTick+0x15c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a41      	ldr	r2, [pc, #260]	; (8002358 <xTaskIncrementTick+0x158>)
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4a41      	ldr	r2, [pc, #260]	; (800235c <xTaskIncrementTick+0x15c>)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b40      	ldr	r3, [pc, #256]	; (8002360 <xTaskIncrementTick+0x160>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3301      	adds	r3, #1
 8002262:	4a3f      	ldr	r2, [pc, #252]	; (8002360 <xTaskIncrementTick+0x160>)
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	f000 f9a5 	bl	80025b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800226a:	4b3e      	ldr	r3, [pc, #248]	; (8002364 <xTaskIncrementTick+0x164>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	429a      	cmp	r2, r3
 8002272:	d34d      	bcc.n	8002310 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002274:	4b38      	ldr	r3, [pc, #224]	; (8002358 <xTaskIncrementTick+0x158>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <xTaskIncrementTick+0x82>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <xTaskIncrementTick+0x84>
 8002282:	2300      	movs	r3, #0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002288:	4b36      	ldr	r3, [pc, #216]	; (8002364 <xTaskIncrementTick+0x164>)
 800228a:	f04f 32ff 	mov.w	r2, #4294967295
 800228e:	601a      	str	r2, [r3, #0]
					break;
 8002290:	e03e      	b.n	8002310 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002292:	4b31      	ldr	r3, [pc, #196]	; (8002358 <xTaskIncrementTick+0x158>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d203      	bcs.n	80022b2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80022aa:	4a2e      	ldr	r2, [pc, #184]	; (8002364 <xTaskIncrementTick+0x164>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6013      	str	r3, [r2, #0]
						break;
 80022b0:	e02e      	b.n	8002310 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3304      	adds	r3, #4
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fc90 	bl	8001bdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d004      	beq.n	80022ce <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	3318      	adds	r3, #24
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fc87 	bl	8001bdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	2201      	movs	r2, #1
 80022d4:	409a      	lsls	r2, r3
 80022d6:	4b24      	ldr	r3, [pc, #144]	; (8002368 <xTaskIncrementTick+0x168>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	4a22      	ldr	r2, [pc, #136]	; (8002368 <xTaskIncrementTick+0x168>)
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4a1f      	ldr	r2, [pc, #124]	; (800236c <xTaskIncrementTick+0x16c>)
 80022ee:	441a      	add	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	3304      	adds	r3, #4
 80022f4:	4619      	mov	r1, r3
 80022f6:	4610      	mov	r0, r2
 80022f8:	f7ff fc15 	bl	8001b26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <xTaskIncrementTick+0x170>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	429a      	cmp	r2, r3
 8002308:	d3b4      	bcc.n	8002274 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800230a:	2301      	movs	r3, #1
 800230c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800230e:	e7b1      	b.n	8002274 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002310:	4b17      	ldr	r3, [pc, #92]	; (8002370 <xTaskIncrementTick+0x170>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002316:	4915      	ldr	r1, [pc, #84]	; (800236c <xTaskIncrementTick+0x16c>)
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d907      	bls.n	8002338 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002328:	2301      	movs	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	e004      	b.n	8002338 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <xTaskIncrementTick+0x174>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	4a0f      	ldr	r2, [pc, #60]	; (8002374 <xTaskIncrementTick+0x174>)
 8002336:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <xTaskIncrementTick+0x178>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002340:	2301      	movs	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002344:	697b      	ldr	r3, [r7, #20]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200004bc 	.word	0x200004bc
 8002354:	20000498 	.word	0x20000498
 8002358:	2000044c 	.word	0x2000044c
 800235c:	20000450 	.word	0x20000450
 8002360:	200004ac 	.word	0x200004ac
 8002364:	200004b4 	.word	0x200004b4
 8002368:	2000049c 	.word	0x2000049c
 800236c:	20000398 	.word	0x20000398
 8002370:	20000394 	.word	0x20000394
 8002374:	200004a4 	.word	0x200004a4
 8002378:	200004a8 	.word	0x200004a8

0800237c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002382:	4b29      	ldr	r3, [pc, #164]	; (8002428 <vTaskSwitchContext+0xac>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800238a:	4b28      	ldr	r3, [pc, #160]	; (800242c <vTaskSwitchContext+0xb0>)
 800238c:	2201      	movs	r2, #1
 800238e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002390:	e044      	b.n	800241c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <vTaskSwitchContext+0xb0>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <vTaskSwitchContext+0xb4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80023a6:	7afb      	ldrb	r3, [r7, #11]
 80023a8:	f1c3 031f 	rsb	r3, r3, #31
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	4921      	ldr	r1, [pc, #132]	; (8002434 <vTaskSwitchContext+0xb8>)
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10a      	bne.n	80023d8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80023c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	607b      	str	r3, [r7, #4]
}
 80023d4:	bf00      	nop
 80023d6:	e7fe      	b.n	80023d6 <vTaskSwitchContext+0x5a>
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4a14      	ldr	r2, [pc, #80]	; (8002434 <vTaskSwitchContext+0xb8>)
 80023e4:	4413      	add	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	3308      	adds	r3, #8
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d104      	bne.n	8002408 <vTaskSwitchContext+0x8c>
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <vTaskSwitchContext+0xbc>)
 8002410:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <vTaskSwitchContext+0xbc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	334c      	adds	r3, #76	; 0x4c
 8002418:	4a08      	ldr	r2, [pc, #32]	; (800243c <vTaskSwitchContext+0xc0>)
 800241a:	6013      	str	r3, [r2, #0]
}
 800241c:	bf00      	nop
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	200004bc 	.word	0x200004bc
 800242c:	200004a8 	.word	0x200004a8
 8002430:	2000049c 	.word	0x2000049c
 8002434:	20000398 	.word	0x20000398
 8002438:	20000394 	.word	0x20000394
 800243c:	20000010 	.word	0x20000010

08002440 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002448:	f000 f852 	bl	80024f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <prvIdleTask+0x28>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d9f9      	bls.n	8002448 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <prvIdleTask+0x2c>)
 8002456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002464:	e7f0      	b.n	8002448 <prvIdleTask+0x8>
 8002466:	bf00      	nop
 8002468:	20000398 	.word	0x20000398
 800246c:	e000ed04 	.word	0xe000ed04

08002470 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	e00c      	b.n	8002496 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <prvInitialiseTaskLists+0x60>)
 8002488:	4413      	add	r3, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fb20 	bl	8001ad0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3301      	adds	r3, #1
 8002494:	607b      	str	r3, [r7, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b06      	cmp	r3, #6
 800249a:	d9ef      	bls.n	800247c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <prvInitialiseTaskLists+0x64>)
 800249e:	f7ff fb17 	bl	8001ad0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80024a2:	480d      	ldr	r0, [pc, #52]	; (80024d8 <prvInitialiseTaskLists+0x68>)
 80024a4:	f7ff fb14 	bl	8001ad0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80024a8:	480c      	ldr	r0, [pc, #48]	; (80024dc <prvInitialiseTaskLists+0x6c>)
 80024aa:	f7ff fb11 	bl	8001ad0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80024ae:	480c      	ldr	r0, [pc, #48]	; (80024e0 <prvInitialiseTaskLists+0x70>)
 80024b0:	f7ff fb0e 	bl	8001ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80024b4:	480b      	ldr	r0, [pc, #44]	; (80024e4 <prvInitialiseTaskLists+0x74>)
 80024b6:	f7ff fb0b 	bl	8001ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <prvInitialiseTaskLists+0x78>)
 80024bc:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <prvInitialiseTaskLists+0x64>)
 80024be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <prvInitialiseTaskLists+0x7c>)
 80024c2:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <prvInitialiseTaskLists+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000398 	.word	0x20000398
 80024d4:	20000424 	.word	0x20000424
 80024d8:	20000438 	.word	0x20000438
 80024dc:	20000454 	.word	0x20000454
 80024e0:	20000468 	.word	0x20000468
 80024e4:	20000480 	.word	0x20000480
 80024e8:	2000044c 	.word	0x2000044c
 80024ec:	20000450 	.word	0x20000450

080024f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024f6:	e019      	b.n	800252c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80024f8:	f000 f9d8 	bl	80028ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80024fc:	4b10      	ldr	r3, [pc, #64]	; (8002540 <prvCheckTasksWaitingTermination+0x50>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fb67 	bl	8001bdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <prvCheckTasksWaitingTermination+0x54>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	3b01      	subs	r3, #1
 8002514:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <prvCheckTasksWaitingTermination+0x54>)
 8002516:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <prvCheckTasksWaitingTermination+0x58>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3b01      	subs	r3, #1
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <prvCheckTasksWaitingTermination+0x58>)
 8002520:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002522:	f000 f9f3 	bl	800290c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f810 	bl	800254c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <prvCheckTasksWaitingTermination+0x58>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1e1      	bne.n	80024f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000468 	.word	0x20000468
 8002544:	20000494 	.word	0x20000494
 8002548:	2000047c 	.word	0x2000047c

0800254c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	334c      	adds	r3, #76	; 0x4c
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fc7d 	bl	8002e58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d108      	bne.n	800257a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fb23 	bl	8002bb8 <vPortFree>
				vPortFree( pxTCB );
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fb20 	bl	8002bb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002578:	e018      	b.n	80025ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d103      	bne.n	800258c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fb17 	bl	8002bb8 <vPortFree>
	}
 800258a:	e00f      	b.n	80025ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002592:	2b02      	cmp	r3, #2
 8002594:	d00a      	beq.n	80025ac <prvDeleteTCB+0x60>
	__asm volatile
 8002596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259a:	f383 8811 	msr	BASEPRI, r3
 800259e:	f3bf 8f6f 	isb	sy
 80025a2:	f3bf 8f4f 	dsb	sy
 80025a6:	60fb      	str	r3, [r7, #12]
}
 80025a8:	bf00      	nop
 80025aa:	e7fe      	b.n	80025aa <prvDeleteTCB+0x5e>
	}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <prvResetNextTaskUnblockTime+0x40>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <prvResetNextTaskUnblockTime+0x14>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <prvResetNextTaskUnblockTime+0x16>
 80025c8:	2300      	movs	r3, #0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d004      	beq.n	80025d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <prvResetNextTaskUnblockTime+0x44>)
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80025d6:	e008      	b.n	80025ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <prvResetNextTaskUnblockTime+0x40>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <prvResetNextTaskUnblockTime+0x44>)
 80025e8:	6013      	str	r3, [r2, #0]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	2000044c 	.word	0x2000044c
 80025f8:	200004b4 	.word	0x200004b4

080025fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002606:	4b29      	ldr	r3, [pc, #164]	; (80026ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800260c:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3304      	adds	r3, #4
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fae2 	bl	8001bdc <uxListRemove>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10b      	bne.n	8002636 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800261e:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	2201      	movs	r2, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4013      	ands	r3, r2
 8002632:	4a20      	ldr	r2, [pc, #128]	; (80026b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002634:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d10a      	bne.n	8002654 <prvAddCurrentTaskToDelayedList+0x58>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002644:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3304      	adds	r3, #4
 800264a:	4619      	mov	r1, r3
 800264c:	481a      	ldr	r0, [pc, #104]	; (80026b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800264e:	f7ff fa6a 	bl	8001b26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002652:	e026      	b.n	80026a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800265c:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	429a      	cmp	r2, r3
 800266a:	d209      	bcs.n	8002680 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3304      	adds	r3, #4
 8002676:	4619      	mov	r1, r3
 8002678:	4610      	mov	r0, r2
 800267a:	f7ff fa77 	bl	8001b6c <vListInsert>
}
 800267e:	e010      	b.n	80026a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3304      	adds	r3, #4
 800268a:	4619      	mov	r1, r3
 800268c:	4610      	mov	r0, r2
 800268e:	f7ff fa6d 	bl	8001b6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	429a      	cmp	r2, r3
 800269a:	d202      	bcs.n	80026a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800269c:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	6013      	str	r3, [r2, #0]
}
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000498 	.word	0x20000498
 80026b0:	20000394 	.word	0x20000394
 80026b4:	2000049c 	.word	0x2000049c
 80026b8:	20000480 	.word	0x20000480
 80026bc:	20000450 	.word	0x20000450
 80026c0:	2000044c 	.word	0x2000044c
 80026c4:	200004b4 	.word	0x200004b4

080026c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3b04      	subs	r3, #4
 80026d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3b04      	subs	r3, #4
 80026e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f023 0201 	bic.w	r2, r3, #1
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3b04      	subs	r3, #4
 80026f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80026f8:	4a08      	ldr	r2, [pc, #32]	; (800271c <pxPortInitialiseStack+0x54>)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3b14      	subs	r3, #20
 8002702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	3b20      	subs	r3, #32
 800270e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002710:	68fb      	ldr	r3, [r7, #12]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr
 800271c:	08002721 	.word	0x08002721

08002720 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <prvTaskExitError+0x54>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002732:	d00a      	beq.n	800274a <prvTaskExitError+0x2a>
	__asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	60fb      	str	r3, [r7, #12]
}
 8002746:	bf00      	nop
 8002748:	e7fe      	b.n	8002748 <prvTaskExitError+0x28>
	__asm volatile
 800274a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274e:	f383 8811 	msr	BASEPRI, r3
 8002752:	f3bf 8f6f 	isb	sy
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	60bb      	str	r3, [r7, #8]
}
 800275c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800275e:	bf00      	nop
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0fc      	beq.n	8002760 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002766:	bf00      	nop
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	2000000c 	.word	0x2000000c
	...

08002780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <pxCurrentTCBConst2>)
 8002782:	6819      	ldr	r1, [r3, #0]
 8002784:	6808      	ldr	r0, [r1, #0]
 8002786:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800278a:	f380 8809 	msr	PSP, r0
 800278e:	f3bf 8f6f 	isb	sy
 8002792:	f04f 0000 	mov.w	r0, #0
 8002796:	f380 8811 	msr	BASEPRI, r0
 800279a:	f04e 0e0d 	orr.w	lr, lr, #13
 800279e:	4770      	bx	lr

080027a0 <pxCurrentTCBConst2>:
 80027a0:	20000394 	.word	0x20000394
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop

080027a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80027a8:	4806      	ldr	r0, [pc, #24]	; (80027c4 <prvPortStartFirstTask+0x1c>)
 80027aa:	6800      	ldr	r0, [r0, #0]
 80027ac:	6800      	ldr	r0, [r0, #0]
 80027ae:	f380 8808 	msr	MSP, r0
 80027b2:	b662      	cpsie	i
 80027b4:	b661      	cpsie	f
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	f3bf 8f6f 	isb	sy
 80027be:	df00      	svc	0
 80027c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80027c2:	bf00      	nop
 80027c4:	e000ed08 	.word	0xe000ed08

080027c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80027ce:	4b32      	ldr	r3, [pc, #200]	; (8002898 <xPortStartScheduler+0xd0>)
 80027d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	22ff      	movs	r2, #255	; 0xff
 80027de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4b2a      	ldr	r3, [pc, #168]	; (800289c <xPortStartScheduler+0xd4>)
 80027f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80027f6:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <xPortStartScheduler+0xd8>)
 80027f8:	2207      	movs	r2, #7
 80027fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80027fc:	e009      	b.n	8002812 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80027fe:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <xPortStartScheduler+0xd8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3b01      	subs	r3, #1
 8002804:	4a26      	ldr	r2, [pc, #152]	; (80028a0 <xPortStartScheduler+0xd8>)
 8002806:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	b2db      	uxtb	r3, r3
 8002810:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	2b80      	cmp	r3, #128	; 0x80
 800281c:	d0ef      	beq.n	80027fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800281e:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <xPortStartScheduler+0xd8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	d00a      	beq.n	8002840 <xPortStartScheduler+0x78>
	__asm volatile
 800282a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282e:	f383 8811 	msr	BASEPRI, r3
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	f3bf 8f4f 	dsb	sy
 800283a:	60bb      	str	r3, [r7, #8]
}
 800283c:	bf00      	nop
 800283e:	e7fe      	b.n	800283e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002840:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <xPortStartScheduler+0xd8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <xPortStartScheduler+0xd8>)
 8002848:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <xPortStartScheduler+0xd8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002852:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <xPortStartScheduler+0xd8>)
 8002854:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <xPortStartScheduler+0xdc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <xPortStartScheduler+0xdc>)
 8002864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <xPortStartScheduler+0xdc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a0d      	ldr	r2, [pc, #52]	; (80028a4 <xPortStartScheduler+0xdc>)
 8002870:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002874:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002876:	f000 f8b9 	bl	80029ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <xPortStartScheduler+0xe0>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002880:	f7ff ff92 	bl	80027a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002884:	f7ff fd7a 	bl	800237c <vTaskSwitchContext>
	prvTaskExitError();
 8002888:	f7ff ff4a 	bl	8002720 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	e000e400 	.word	0xe000e400
 800289c:	200004c0 	.word	0x200004c0
 80028a0:	200004c4 	.word	0x200004c4
 80028a4:	e000ed20 	.word	0xe000ed20
 80028a8:	2000000c 	.word	0x2000000c

080028ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
	__asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	607b      	str	r3, [r7, #4]
}
 80028c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80028c6:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <vPortEnterCritical+0x58>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	3301      	adds	r3, #1
 80028cc:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <vPortEnterCritical+0x58>)
 80028ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <vPortEnterCritical+0x58>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d10f      	bne.n	80028f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <vPortEnterCritical+0x5c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80028e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e6:	f383 8811 	msr	BASEPRI, r3
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	603b      	str	r3, [r7, #0]
}
 80028f4:	bf00      	nop
 80028f6:	e7fe      	b.n	80028f6 <vPortEnterCritical+0x4a>
	}
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	2000000c 	.word	0x2000000c
 8002908:	e000ed04 	.word	0xe000ed04

0800290c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <vPortExitCritical+0x4c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10a      	bne.n	8002930 <vPortExitCritical+0x24>
	__asm volatile
 800291a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291e:	f383 8811 	msr	BASEPRI, r3
 8002922:	f3bf 8f6f 	isb	sy
 8002926:	f3bf 8f4f 	dsb	sy
 800292a:	607b      	str	r3, [r7, #4]
}
 800292c:	bf00      	nop
 800292e:	e7fe      	b.n	800292e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <vPortExitCritical+0x4c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3b01      	subs	r3, #1
 8002936:	4a08      	ldr	r2, [pc, #32]	; (8002958 <vPortExitCritical+0x4c>)
 8002938:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <vPortExitCritical+0x4c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <vPortExitCritical+0x42>
 8002942:	2300      	movs	r3, #0
 8002944:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800294c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	2000000c 	.word	0x2000000c
 800295c:	00000000 	.word	0x00000000

08002960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002960:	f3ef 8009 	mrs	r0, PSP
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <pxCurrentTCBConst>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002970:	6010      	str	r0, [r2, #0]
 8002972:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002976:	f04f 0050 	mov.w	r0, #80	; 0x50
 800297a:	f380 8811 	msr	BASEPRI, r0
 800297e:	f7ff fcfd 	bl	800237c <vTaskSwitchContext>
 8002982:	f04f 0000 	mov.w	r0, #0
 8002986:	f380 8811 	msr	BASEPRI, r0
 800298a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800298e:	6819      	ldr	r1, [r3, #0]
 8002990:	6808      	ldr	r0, [r1, #0]
 8002992:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002996:	f380 8809 	msr	PSP, r0
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	4770      	bx	lr

080029a0 <pxCurrentTCBConst>:
 80029a0:	20000394 	.word	0x20000394
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop

080029a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
	__asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	607b      	str	r3, [r7, #4]
}
 80029c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80029c2:	f7ff fc1d 	bl	8002200 <xTaskIncrementTick>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <SysTick_Handler+0x40>)
 80029ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	2300      	movs	r3, #0
 80029d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f383 8811 	msr	BASEPRI, r3
}
 80029de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	e000ed04 	.word	0xe000ed04

080029ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80029f0:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <vPortSetupTimerInterrupt+0x30>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <vPortSetupTimerInterrupt+0x34>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <vPortSetupTimerInterrupt+0x38>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <vPortSetupTimerInterrupt+0x3c>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	099b      	lsrs	r3, r3, #6
 8002a08:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <vPortSetupTimerInterrupt+0x40>)
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002a0e:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <vPortSetupTimerInterrupt+0x30>)
 8002a10:	2207      	movs	r2, #7
 8002a12:	601a      	str	r2, [r3, #0]
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	e000e010 	.word	0xe000e010
 8002a20:	e000e018 	.word	0xe000e018
 8002a24:	20000000 	.word	0x20000000
 8002a28:	10624dd3 	.word	0x10624dd3
 8002a2c:	e000e014 	.word	0xe000e014

08002a30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002a3c:	f7ff fb36 	bl	80020ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002a40:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <pvPortMalloc+0x174>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002a48:	f000 f910 	bl	8002c6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002a4c:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <pvPortMalloc+0x178>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f040 808e 	bne.w	8002b76 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01d      	beq.n	8002a9c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002a60:	2208      	movs	r2, #8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d014      	beq.n	8002a9c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f023 0307 	bic.w	r3, r3, #7
 8002a78:	3308      	adds	r3, #8
 8002a7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <pvPortMalloc+0x6c>
	__asm volatile
 8002a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8a:	f383 8811 	msr	BASEPRI, r3
 8002a8e:	f3bf 8f6f 	isb	sy
 8002a92:	f3bf 8f4f 	dsb	sy
 8002a96:	617b      	str	r3, [r7, #20]
}
 8002a98:	bf00      	nop
 8002a9a:	e7fe      	b.n	8002a9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d069      	beq.n	8002b76 <pvPortMalloc+0x146>
 8002aa2:	4b42      	ldr	r3, [pc, #264]	; (8002bac <pvPortMalloc+0x17c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d864      	bhi.n	8002b76 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002aac:	4b40      	ldr	r3, [pc, #256]	; (8002bb0 <pvPortMalloc+0x180>)
 8002aae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002ab0:	4b3f      	ldr	r3, [pc, #252]	; (8002bb0 <pvPortMalloc+0x180>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ab6:	e004      	b.n	8002ac2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d903      	bls.n	8002ad4 <pvPortMalloc+0xa4>
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f1      	bne.n	8002ab8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002ad4:	4b33      	ldr	r3, [pc, #204]	; (8002ba4 <pvPortMalloc+0x174>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d04b      	beq.n	8002b76 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	4413      	add	r3, r2
 8002ae6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	1ad2      	subs	r2, r2, r3
 8002af8:	2308      	movs	r3, #8
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d91f      	bls.n	8002b40 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <pvPortMalloc+0xf8>
	__asm volatile
 8002b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b16:	f383 8811 	msr	BASEPRI, r3
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	613b      	str	r3, [r7, #16]
}
 8002b24:	bf00      	nop
 8002b26:	e7fe      	b.n	8002b26 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	1ad2      	subs	r2, r2, r3
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b3a:	69b8      	ldr	r0, [r7, #24]
 8002b3c:	f000 f8f8 	bl	8002d30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <pvPortMalloc+0x17c>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	4a18      	ldr	r2, [pc, #96]	; (8002bac <pvPortMalloc+0x17c>)
 8002b4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b4e:	4b17      	ldr	r3, [pc, #92]	; (8002bac <pvPortMalloc+0x17c>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <pvPortMalloc+0x184>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d203      	bcs.n	8002b62 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <pvPortMalloc+0x17c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <pvPortMalloc+0x184>)
 8002b60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <pvPortMalloc+0x178>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002b76:	f7ff faa7 	bl	80020c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <pvPortMalloc+0x16a>
	__asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	60fb      	str	r3, [r7, #12]
}
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <pvPortMalloc+0x168>
	return pvReturn;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3728      	adds	r7, #40	; 0x28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	200010d0 	.word	0x200010d0
 8002ba8:	200010dc 	.word	0x200010dc
 8002bac:	200010d4 	.word	0x200010d4
 8002bb0:	200010c8 	.word	0x200010c8
 8002bb4:	200010d8 	.word	0x200010d8

08002bb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d048      	beq.n	8002c5c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002bca:	2308      	movs	r3, #8
 8002bcc:	425b      	negs	r3, r3
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <vPortFree+0xac>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10a      	bne.n	8002bfc <vPortFree+0x44>
	__asm volatile
 8002be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	60fb      	str	r3, [r7, #12]
}
 8002bf8:	bf00      	nop
 8002bfa:	e7fe      	b.n	8002bfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <vPortFree+0x62>
	__asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	60bb      	str	r3, [r7, #8]
}
 8002c16:	bf00      	nop
 8002c18:	e7fe      	b.n	8002c18 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <vPortFree+0xac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d019      	beq.n	8002c5c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d115      	bne.n	8002c5c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <vPortFree+0xac>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002c40:	f7ff fa34 	bl	80020ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <vPortFree+0xb0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	4a06      	ldr	r2, [pc, #24]	; (8002c68 <vPortFree+0xb0>)
 8002c50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c52:	6938      	ldr	r0, [r7, #16]
 8002c54:	f000 f86c 	bl	8002d30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002c58:	f7ff fa36 	bl	80020c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002c5c:	bf00      	nop
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	200010dc 	.word	0x200010dc
 8002c68:	200010d4 	.word	0x200010d4

08002c6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002c78:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <prvHeapInit+0xac>)
 8002c7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00c      	beq.n	8002ca0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3307      	adds	r3, #7
 8002c8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0307 	bic.w	r3, r3, #7
 8002c92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <prvHeapInit+0xac>)
 8002c9c:	4413      	add	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <prvHeapInit+0xb0>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002caa:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <prvHeapInit+0xb0>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002cb8:	2208      	movs	r2, #8
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0307 	bic.w	r3, r3, #7
 8002cc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a15      	ldr	r2, [pc, #84]	; (8002d20 <prvHeapInit+0xb4>)
 8002ccc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <prvHeapInit+0xb4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <prvHeapInit+0xb4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	1ad2      	subs	r2, r2, r3
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <prvHeapInit+0xb4>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <prvHeapInit+0xb8>)
 8002cfa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <prvHeapInit+0xbc>)
 8002d02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <prvHeapInit+0xc0>)
 8002d06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d0a:	601a      	str	r2, [r3, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	200004c8 	.word	0x200004c8
 8002d1c:	200010c8 	.word	0x200010c8
 8002d20:	200010d0 	.word	0x200010d0
 8002d24:	200010d8 	.word	0x200010d8
 8002d28:	200010d4 	.word	0x200010d4
 8002d2c:	200010dc 	.word	0x200010dc

08002d30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <prvInsertBlockIntoFreeList+0xa8>)
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	e002      	b.n	8002d44 <prvInsertBlockIntoFreeList+0x14>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d8f7      	bhi.n	8002d3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	4413      	add	r3, r2
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d108      	bne.n	8002d72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	441a      	add	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	441a      	add	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d118      	bne.n	8002db8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <prvInsertBlockIntoFreeList+0xac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d00d      	beq.n	8002dae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	441a      	add	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	e008      	b.n	8002dc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002dae:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <prvInsertBlockIntoFreeList+0xac>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e003      	b.n	8002dc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d002      	beq.n	8002dce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	200010c8 	.word	0x200010c8
 8002ddc:	200010d0 	.word	0x200010d0

08002de0 <__libc_init_array>:
 8002de0:	b570      	push	{r4, r5, r6, lr}
 8002de2:	2600      	movs	r6, #0
 8002de4:	4d0c      	ldr	r5, [pc, #48]	; (8002e18 <__libc_init_array+0x38>)
 8002de6:	4c0d      	ldr	r4, [pc, #52]	; (8002e1c <__libc_init_array+0x3c>)
 8002de8:	1b64      	subs	r4, r4, r5
 8002dea:	10a4      	asrs	r4, r4, #2
 8002dec:	42a6      	cmp	r6, r4
 8002dee:	d109      	bne.n	8002e04 <__libc_init_array+0x24>
 8002df0:	f000 f8e2 	bl	8002fb8 <_init>
 8002df4:	2600      	movs	r6, #0
 8002df6:	4d0a      	ldr	r5, [pc, #40]	; (8002e20 <__libc_init_array+0x40>)
 8002df8:	4c0a      	ldr	r4, [pc, #40]	; (8002e24 <__libc_init_array+0x44>)
 8002dfa:	1b64      	subs	r4, r4, r5
 8002dfc:	10a4      	asrs	r4, r4, #2
 8002dfe:	42a6      	cmp	r6, r4
 8002e00:	d105      	bne.n	8002e0e <__libc_init_array+0x2e>
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
 8002e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e08:	4798      	blx	r3
 8002e0a:	3601      	adds	r6, #1
 8002e0c:	e7ee      	b.n	8002dec <__libc_init_array+0xc>
 8002e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e12:	4798      	blx	r3
 8002e14:	3601      	adds	r6, #1
 8002e16:	e7f2      	b.n	8002dfe <__libc_init_array+0x1e>
 8002e18:	08003088 	.word	0x08003088
 8002e1c:	08003088 	.word	0x08003088
 8002e20:	08003088 	.word	0x08003088
 8002e24:	0800308c 	.word	0x0800308c

08002e28 <__retarget_lock_acquire_recursive>:
 8002e28:	4770      	bx	lr

08002e2a <__retarget_lock_release_recursive>:
 8002e2a:	4770      	bx	lr

08002e2c <memset>:
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4402      	add	r2, r0
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d100      	bne.n	8002e36 <memset+0xa>
 8002e34:	4770      	bx	lr
 8002e36:	f803 1b01 	strb.w	r1, [r3], #1
 8002e3a:	e7f9      	b.n	8002e30 <memset+0x4>

08002e3c <cleanup_glue>:
 8002e3c:	b538      	push	{r3, r4, r5, lr}
 8002e3e:	460c      	mov	r4, r1
 8002e40:	6809      	ldr	r1, [r1, #0]
 8002e42:	4605      	mov	r5, r0
 8002e44:	b109      	cbz	r1, 8002e4a <cleanup_glue+0xe>
 8002e46:	f7ff fff9 	bl	8002e3c <cleanup_glue>
 8002e4a:	4621      	mov	r1, r4
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e52:	f000 b869 	b.w	8002f28 <_free_r>
	...

08002e58 <_reclaim_reent>:
 8002e58:	4b2c      	ldr	r3, [pc, #176]	; (8002f0c <_reclaim_reent+0xb4>)
 8002e5a:	b570      	push	{r4, r5, r6, lr}
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4604      	mov	r4, r0
 8002e60:	4283      	cmp	r3, r0
 8002e62:	d051      	beq.n	8002f08 <_reclaim_reent+0xb0>
 8002e64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002e66:	b143      	cbz	r3, 8002e7a <_reclaim_reent+0x22>
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d14a      	bne.n	8002f04 <_reclaim_reent+0xac>
 8002e6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e70:	6819      	ldr	r1, [r3, #0]
 8002e72:	b111      	cbz	r1, 8002e7a <_reclaim_reent+0x22>
 8002e74:	4620      	mov	r0, r4
 8002e76:	f000 f857 	bl	8002f28 <_free_r>
 8002e7a:	6961      	ldr	r1, [r4, #20]
 8002e7c:	b111      	cbz	r1, 8002e84 <_reclaim_reent+0x2c>
 8002e7e:	4620      	mov	r0, r4
 8002e80:	f000 f852 	bl	8002f28 <_free_r>
 8002e84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002e86:	b111      	cbz	r1, 8002e8e <_reclaim_reent+0x36>
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f000 f84d 	bl	8002f28 <_free_r>
 8002e8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002e90:	b111      	cbz	r1, 8002e98 <_reclaim_reent+0x40>
 8002e92:	4620      	mov	r0, r4
 8002e94:	f000 f848 	bl	8002f28 <_free_r>
 8002e98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002e9a:	b111      	cbz	r1, 8002ea2 <_reclaim_reent+0x4a>
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f000 f843 	bl	8002f28 <_free_r>
 8002ea2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002ea4:	b111      	cbz	r1, 8002eac <_reclaim_reent+0x54>
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f000 f83e 	bl	8002f28 <_free_r>
 8002eac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002eae:	b111      	cbz	r1, 8002eb6 <_reclaim_reent+0x5e>
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f000 f839 	bl	8002f28 <_free_r>
 8002eb6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002eb8:	b111      	cbz	r1, 8002ec0 <_reclaim_reent+0x68>
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f000 f834 	bl	8002f28 <_free_r>
 8002ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ec2:	b111      	cbz	r1, 8002eca <_reclaim_reent+0x72>
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f000 f82f 	bl	8002f28 <_free_r>
 8002eca:	69a3      	ldr	r3, [r4, #24]
 8002ecc:	b1e3      	cbz	r3, 8002f08 <_reclaim_reent+0xb0>
 8002ece:	4620      	mov	r0, r4
 8002ed0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ed2:	4798      	blx	r3
 8002ed4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002ed6:	b1b9      	cbz	r1, 8002f08 <_reclaim_reent+0xb0>
 8002ed8:	4620      	mov	r0, r4
 8002eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002ede:	f7ff bfad 	b.w	8002e3c <cleanup_glue>
 8002ee2:	5949      	ldr	r1, [r1, r5]
 8002ee4:	b941      	cbnz	r1, 8002ef8 <_reclaim_reent+0xa0>
 8002ee6:	3504      	adds	r5, #4
 8002ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002eea:	2d80      	cmp	r5, #128	; 0x80
 8002eec:	68d9      	ldr	r1, [r3, #12]
 8002eee:	d1f8      	bne.n	8002ee2 <_reclaim_reent+0x8a>
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f000 f819 	bl	8002f28 <_free_r>
 8002ef6:	e7ba      	b.n	8002e6e <_reclaim_reent+0x16>
 8002ef8:	680e      	ldr	r6, [r1, #0]
 8002efa:	4620      	mov	r0, r4
 8002efc:	f000 f814 	bl	8002f28 <_free_r>
 8002f00:	4631      	mov	r1, r6
 8002f02:	e7ef      	b.n	8002ee4 <_reclaim_reent+0x8c>
 8002f04:	2500      	movs	r5, #0
 8002f06:	e7ef      	b.n	8002ee8 <_reclaim_reent+0x90>
 8002f08:	bd70      	pop	{r4, r5, r6, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000010 	.word	0x20000010

08002f10 <__malloc_lock>:
 8002f10:	4801      	ldr	r0, [pc, #4]	; (8002f18 <__malloc_lock+0x8>)
 8002f12:	f7ff bf89 	b.w	8002e28 <__retarget_lock_acquire_recursive>
 8002f16:	bf00      	nop
 8002f18:	200010e0 	.word	0x200010e0

08002f1c <__malloc_unlock>:
 8002f1c:	4801      	ldr	r0, [pc, #4]	; (8002f24 <__malloc_unlock+0x8>)
 8002f1e:	f7ff bf84 	b.w	8002e2a <__retarget_lock_release_recursive>
 8002f22:	bf00      	nop
 8002f24:	200010e0 	.word	0x200010e0

08002f28 <_free_r>:
 8002f28:	b538      	push	{r3, r4, r5, lr}
 8002f2a:	4605      	mov	r5, r0
 8002f2c:	2900      	cmp	r1, #0
 8002f2e:	d040      	beq.n	8002fb2 <_free_r+0x8a>
 8002f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f34:	1f0c      	subs	r4, r1, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	bfb8      	it	lt
 8002f3a:	18e4      	addlt	r4, r4, r3
 8002f3c:	f7ff ffe8 	bl	8002f10 <__malloc_lock>
 8002f40:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <_free_r+0x8c>)
 8002f42:	6813      	ldr	r3, [r2, #0]
 8002f44:	b933      	cbnz	r3, 8002f54 <_free_r+0x2c>
 8002f46:	6063      	str	r3, [r4, #4]
 8002f48:	6014      	str	r4, [r2, #0]
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f50:	f7ff bfe4 	b.w	8002f1c <__malloc_unlock>
 8002f54:	42a3      	cmp	r3, r4
 8002f56:	d908      	bls.n	8002f6a <_free_r+0x42>
 8002f58:	6820      	ldr	r0, [r4, #0]
 8002f5a:	1821      	adds	r1, r4, r0
 8002f5c:	428b      	cmp	r3, r1
 8002f5e:	bf01      	itttt	eq
 8002f60:	6819      	ldreq	r1, [r3, #0]
 8002f62:	685b      	ldreq	r3, [r3, #4]
 8002f64:	1809      	addeq	r1, r1, r0
 8002f66:	6021      	streq	r1, [r4, #0]
 8002f68:	e7ed      	b.n	8002f46 <_free_r+0x1e>
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	b10b      	cbz	r3, 8002f74 <_free_r+0x4c>
 8002f70:	42a3      	cmp	r3, r4
 8002f72:	d9fa      	bls.n	8002f6a <_free_r+0x42>
 8002f74:	6811      	ldr	r1, [r2, #0]
 8002f76:	1850      	adds	r0, r2, r1
 8002f78:	42a0      	cmp	r0, r4
 8002f7a:	d10b      	bne.n	8002f94 <_free_r+0x6c>
 8002f7c:	6820      	ldr	r0, [r4, #0]
 8002f7e:	4401      	add	r1, r0
 8002f80:	1850      	adds	r0, r2, r1
 8002f82:	4283      	cmp	r3, r0
 8002f84:	6011      	str	r1, [r2, #0]
 8002f86:	d1e0      	bne.n	8002f4a <_free_r+0x22>
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4401      	add	r1, r0
 8002f8e:	6011      	str	r1, [r2, #0]
 8002f90:	6053      	str	r3, [r2, #4]
 8002f92:	e7da      	b.n	8002f4a <_free_r+0x22>
 8002f94:	d902      	bls.n	8002f9c <_free_r+0x74>
 8002f96:	230c      	movs	r3, #12
 8002f98:	602b      	str	r3, [r5, #0]
 8002f9a:	e7d6      	b.n	8002f4a <_free_r+0x22>
 8002f9c:	6820      	ldr	r0, [r4, #0]
 8002f9e:	1821      	adds	r1, r4, r0
 8002fa0:	428b      	cmp	r3, r1
 8002fa2:	bf01      	itttt	eq
 8002fa4:	6819      	ldreq	r1, [r3, #0]
 8002fa6:	685b      	ldreq	r3, [r3, #4]
 8002fa8:	1809      	addeq	r1, r1, r0
 8002faa:	6021      	streq	r1, [r4, #0]
 8002fac:	6063      	str	r3, [r4, #4]
 8002fae:	6054      	str	r4, [r2, #4]
 8002fb0:	e7cb      	b.n	8002f4a <_free_r+0x22>
 8002fb2:	bd38      	pop	{r3, r4, r5, pc}
 8002fb4:	200010e4 	.word	0x200010e4

08002fb8 <_init>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	bf00      	nop
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr

08002fc4 <_fini>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	bf00      	nop
 8002fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fca:	bc08      	pop	{r3}
 8002fcc:	469e      	mov	lr, r3
 8002fce:	4770      	bx	lr
