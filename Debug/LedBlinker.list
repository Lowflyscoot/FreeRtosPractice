
LedBlinker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080041c0  080041c0  000141c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800428c  0800428c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800428c  0800428c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800428c  0800428c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800428c  0800428c  0001428c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004290  08004290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010d8  20000074  08004308  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000114c  08004308  0002114c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011173  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd9  00000000  00000000  00031210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00033df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  00034e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019598  00000000  00000000  00035cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dbc  00000000  00000000  0004f260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000925d7  00000000  00000000  0006001c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f25f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004464  00000000  00000000  000f2644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080041a8 	.word	0x080041a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080041a8 	.word	0x080041a8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <SetSegment>:
};

uint8_t currentFrame [4] = {0, 0, 0, 0};

void SetSegment (uint8_t numOfSegment, GPIO_PinState state)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	460a      	mov	r2, r1
 800018a:	71fb      	strb	r3, [r7, #7]
 800018c:	4613      	mov	r3, r2
 800018e:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState pinAction;
	if (state == 0)
 8000190:	79bb      	ldrb	r3, [r7, #6]
 8000192:	2b00      	cmp	r3, #0
 8000194:	d102      	bne.n	800019c <SetSegment+0x1c>
	{
		pinAction = GPIO_PIN_RESET;
 8000196:	2300      	movs	r3, #0
 8000198:	73fb      	strb	r3, [r7, #15]
 800019a:	e001      	b.n	80001a0 <SetSegment+0x20>
	}
	else
	{
		pinAction = GPIO_PIN_SET;
 800019c:	2301      	movs	r3, #1
 800019e:	73fb      	strb	r3, [r7, #15]
	}

	switch (numOfSegment)
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	3b01      	subs	r3, #1
 80001a4:	2b07      	cmp	r3, #7
 80001a6:	d852      	bhi.n	800024e <SetSegment+0xce>
 80001a8:	a201      	add	r2, pc, #4	; (adr r2, 80001b0 <SetSegment+0x30>)
 80001aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ae:	bf00      	nop
 80001b0:	080001d1 	.word	0x080001d1
 80001b4:	080001e1 	.word	0x080001e1
 80001b8:	080001ef 	.word	0x080001ef
 80001bc:	080001ff 	.word	0x080001ff
 80001c0:	0800020f 	.word	0x0800020f
 80001c4:	0800021f 	.word	0x0800021f
 80001c8:	0800022f 	.word	0x0800022f
 80001cc:	0800023f 	.word	0x0800023f
	{
		case 1:
			HAL_GPIO_WritePin(SSEG_A_GPIO_Port, SSEG_A_Pin, pinAction);
 80001d0:	7bfb      	ldrb	r3, [r7, #15]
 80001d2:	461a      	mov	r2, r3
 80001d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001d8:	481f      	ldr	r0, [pc, #124]	; (8000258 <SetSegment+0xd8>)
 80001da:	f000 ff2a 	bl	8001032 <HAL_GPIO_WritePin>
			break;
 80001de:	e037      	b.n	8000250 <SetSegment+0xd0>
		case 2:
			HAL_GPIO_WritePin(SSEG_B_GPIO_Port, SSEG_B_Pin, pinAction);
 80001e0:	7bfb      	ldrb	r3, [r7, #15]
 80001e2:	461a      	mov	r2, r3
 80001e4:	2110      	movs	r1, #16
 80001e6:	481d      	ldr	r0, [pc, #116]	; (800025c <SetSegment+0xdc>)
 80001e8:	f000 ff23 	bl	8001032 <HAL_GPIO_WritePin>
			break;
 80001ec:	e030      	b.n	8000250 <SetSegment+0xd0>
		case 3:
			HAL_GPIO_WritePin(SSEG_C_GPIO_Port, SSEG_C_Pin, pinAction);
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	461a      	mov	r2, r3
 80001f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f6:	4819      	ldr	r0, [pc, #100]	; (800025c <SetSegment+0xdc>)
 80001f8:	f000 ff1b 	bl	8001032 <HAL_GPIO_WritePin>
			break;
 80001fc:	e028      	b.n	8000250 <SetSegment+0xd0>
		case 4:
			HAL_GPIO_WritePin(SSEG_D_GPIO_Port, SSEG_D_Pin, pinAction);
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	461a      	mov	r2, r3
 8000202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000206:	4815      	ldr	r0, [pc, #84]	; (800025c <SetSegment+0xdc>)
 8000208:	f000 ff13 	bl	8001032 <HAL_GPIO_WritePin>
			break;
 800020c:	e020      	b.n	8000250 <SetSegment+0xd0>
		case 5:
			HAL_GPIO_WritePin(SSEG_E_GPIO_Port, SSEG_E_Pin, pinAction);
 800020e:	7bfb      	ldrb	r3, [r7, #15]
 8000210:	461a      	mov	r2, r3
 8000212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000216:	4810      	ldr	r0, [pc, #64]	; (8000258 <SetSegment+0xd8>)
 8000218:	f000 ff0b 	bl	8001032 <HAL_GPIO_WritePin>
			break;
 800021c:	e018      	b.n	8000250 <SetSegment+0xd0>
		case 6:
			HAL_GPIO_WritePin(SSEG_F_GPIO_Port, SSEG_F_Pin, pinAction);
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	461a      	mov	r2, r3
 8000222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000226:	480c      	ldr	r0, [pc, #48]	; (8000258 <SetSegment+0xd8>)
 8000228:	f000 ff03 	bl	8001032 <HAL_GPIO_WritePin>
			break;
 800022c:	e010      	b.n	8000250 <SetSegment+0xd0>
		case 7:
			HAL_GPIO_WritePin(SSEG_G_GPIO_Port, SSEG_G_Pin, pinAction);
 800022e:	7bfb      	ldrb	r3, [r7, #15]
 8000230:	461a      	mov	r2, r3
 8000232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000236:	4809      	ldr	r0, [pc, #36]	; (800025c <SetSegment+0xdc>)
 8000238:	f000 fefb 	bl	8001032 <HAL_GPIO_WritePin>
			break;
 800023c:	e008      	b.n	8000250 <SetSegment+0xd0>
		case 8:
			HAL_GPIO_WritePin(SSEG_DOT_GPIO_Port, SSEG_DOT_Pin, pinAction);
 800023e:	7bfb      	ldrb	r3, [r7, #15]
 8000240:	461a      	mov	r2, r3
 8000242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000246:	4805      	ldr	r0, [pc, #20]	; (800025c <SetSegment+0xdc>)
 8000248:	f000 fef3 	bl	8001032 <HAL_GPIO_WritePin>
			break;
 800024c:	e000      	b.n	8000250 <SetSegment+0xd0>
		default:
			break;
 800024e:	bf00      	nop
	}
}
 8000250:	bf00      	nop
 8000252:	3710      	adds	r7, #16
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40010800 	.word	0x40010800
 800025c:	40010c00 	.word	0x40010c00

08000260 <SetFrame>:

void SetFrame (uint8_t frameNum, uint8_t frame)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	460a      	mov	r2, r1
 800026a:	71fb      	strb	r3, [r7, #7]
 800026c:	4613      	mov	r3, r2
 800026e:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SSEG_1_GPIO_Port, SSEG_1_Pin, 1);
 8000270:	2201      	movs	r2, #1
 8000272:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000276:	482f      	ldr	r0, [pc, #188]	; (8000334 <SetFrame+0xd4>)
 8000278:	f000 fedb 	bl	8001032 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SSEG_2_GPIO_Port, SSEG_2_Pin, 1);
 800027c:	2201      	movs	r2, #1
 800027e:	2108      	movs	r1, #8
 8000280:	482d      	ldr	r0, [pc, #180]	; (8000338 <SetFrame+0xd8>)
 8000282:	f000 fed6 	bl	8001032 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SSEG_3_GPIO_Port, SSEG_3_Pin, 1);
 8000286:	2201      	movs	r2, #1
 8000288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800028c:	4829      	ldr	r0, [pc, #164]	; (8000334 <SetFrame+0xd4>)
 800028e:	f000 fed0 	bl	8001032 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SSEG_4_GPIO_Port, SSEG_4_Pin, 1);
 8000292:	2201      	movs	r2, #1
 8000294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000298:	4826      	ldr	r0, [pc, #152]	; (8000334 <SetFrame+0xd4>)
 800029a:	f000 feca 	bl	8001032 <HAL_GPIO_WritePin>

   switch(frameNum)
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	d826      	bhi.n	80002f2 <SetFrame+0x92>
 80002a4:	a201      	add	r2, pc, #4	; (adr r2, 80002ac <SetFrame+0x4c>)
 80002a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002aa:	bf00      	nop
 80002ac:	080002bd 	.word	0x080002bd
 80002b0:	080002cb 	.word	0x080002cb
 80002b4:	080002d7 	.word	0x080002d7
 80002b8:	080002e5 	.word	0x080002e5
   {
     case 0:
       HAL_GPIO_WritePin(SSEG_1_GPIO_Port, SSEG_1_Pin, 0);
 80002bc:	2200      	movs	r2, #0
 80002be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c2:	481c      	ldr	r0, [pc, #112]	; (8000334 <SetFrame+0xd4>)
 80002c4:	f000 feb5 	bl	8001032 <HAL_GPIO_WritePin>
       break;
 80002c8:	e014      	b.n	80002f4 <SetFrame+0x94>
     case 1:
       HAL_GPIO_WritePin(SSEG_2_GPIO_Port, SSEG_2_Pin, 0);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2108      	movs	r1, #8
 80002ce:	481a      	ldr	r0, [pc, #104]	; (8000338 <SetFrame+0xd8>)
 80002d0:	f000 feaf 	bl	8001032 <HAL_GPIO_WritePin>
       break;
 80002d4:	e00e      	b.n	80002f4 <SetFrame+0x94>
     case 2:
       HAL_GPIO_WritePin(SSEG_3_GPIO_Port, SSEG_3_Pin, 0);
 80002d6:	2200      	movs	r2, #0
 80002d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002dc:	4815      	ldr	r0, [pc, #84]	; (8000334 <SetFrame+0xd4>)
 80002de:	f000 fea8 	bl	8001032 <HAL_GPIO_WritePin>
       break;
 80002e2:	e007      	b.n	80002f4 <SetFrame+0x94>
     case 3:
       HAL_GPIO_WritePin(SSEG_4_GPIO_Port, SSEG_4_Pin, 0);
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ea:	4812      	ldr	r0, [pc, #72]	; (8000334 <SetFrame+0xd4>)
 80002ec:	f000 fea1 	bl	8001032 <HAL_GPIO_WritePin>
       break;
 80002f0:	e000      	b.n	80002f4 <SetFrame+0x94>
     default:
       break;
 80002f2:	bf00      	nop
   }
	 for (uint8_t i = 0; i < 8; i++)
 80002f4:	2300      	movs	r3, #0
 80002f6:	73fb      	strb	r3, [r7, #15]
 80002f8:	e013      	b.n	8000322 <SetFrame+0xc2>
	 {
	 	SetSegment(8 - i, ((frame >> (7 - i)) & 0x01));
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	f1c3 0308 	rsb	r3, r3, #8
 8000300:	b2d8      	uxtb	r0, r3
 8000302:	79ba      	ldrb	r2, [r7, #6]
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	f1c3 0307 	rsb	r3, r3, #7
 800030a:	fa42 f303 	asr.w	r3, r2, r3
 800030e:	b2db      	uxtb	r3, r3
 8000310:	f003 0301 	and.w	r3, r3, #1
 8000314:	b2db      	uxtb	r3, r3
 8000316:	4619      	mov	r1, r3
 8000318:	f7ff ff32 	bl	8000180 <SetSegment>
	 for (uint8_t i = 0; i < 8; i++)
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	3301      	adds	r3, #1
 8000320:	73fb      	strb	r3, [r7, #15]
 8000322:	7bfb      	ldrb	r3, [r7, #15]
 8000324:	2b07      	cmp	r3, #7
 8000326:	d9e8      	bls.n	80002fa <SetFrame+0x9a>
	 }
}
 8000328:	bf00      	nop
 800032a:	bf00      	nop
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010800 	.word	0x40010800
 8000338:	40010c00 	.word	0x40010c00

0800033c <ssegOutputTask>:

void ssegOutputTask (void* pvParameters)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint8_t Frame = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
    SetFrame(Frame, currentFrame[Frame]);
 8000348:	7bfb      	ldrb	r3, [r7, #15]
 800034a:	4a09      	ldr	r2, [pc, #36]	; (8000370 <ssegOutputTask+0x34>)
 800034c:	5cd2      	ldrb	r2, [r2, r3]
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	4611      	mov	r1, r2
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff84 	bl	8000260 <SetFrame>
    Frame++;
 8000358:	7bfb      	ldrb	r3, [r7, #15]
 800035a:	3301      	adds	r3, #1
 800035c:	73fb      	strb	r3, [r7, #15]
    if (Frame == 4)
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	2b04      	cmp	r3, #4
 8000362:	d101      	bne.n	8000368 <ssegOutputTask+0x2c>
    {
    	Frame = 0;
 8000364:	2300      	movs	r3, #0
 8000366:	73fb      	strb	r3, [r7, #15]
    }

    vTaskDelay((3 / portTICK_PERIOD_MS));
 8000368:	2003      	movs	r0, #3
 800036a:	f002 fefb 	bl	8003164 <vTaskDelay>
    SetFrame(Frame, currentFrame[Frame]);
 800036e:	e7eb      	b.n	8000348 <ssegOutputTask+0xc>
 8000370:	200003a8 	.word	0x200003a8

08000374 <framesUpdateTask>:
	}
}

void framesUpdateTask (void* pvParameters)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	uint8_t numOfFrame = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	75fb      	strb	r3, [r7, #23]
	for(;;)
	{
    uint32_t tmp = echoCounter;
 8000380:	4b16      	ldr	r3, [pc, #88]	; (80003dc <framesUpdateTask+0x68>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	613b      	str	r3, [r7, #16]
    for(uint8_t i = 0; i < 4; i++)
 8000386:	2300      	movs	r3, #0
 8000388:	73fb      	strb	r3, [r7, #15]
 800038a:	e016      	b.n	80003ba <framesUpdateTask+0x46>
    {
      currentFrame[i] = tmp % 10;
 800038c:	6939      	ldr	r1, [r7, #16]
 800038e:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <framesUpdateTask+0x6c>)
 8000390:	fba3 2301 	umull	r2, r3, r3, r1
 8000394:	08da      	lsrs	r2, r3, #3
 8000396:	4613      	mov	r3, r2
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	4413      	add	r3, r2
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	1aca      	subs	r2, r1, r3
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	b2d1      	uxtb	r1, r2
 80003a4:	4a0f      	ldr	r2, [pc, #60]	; (80003e4 <framesUpdateTask+0x70>)
 80003a6:	54d1      	strb	r1, [r2, r3]
      tmp /= 10;
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <framesUpdateTask+0x6c>)
 80003ac:	fba2 2303 	umull	r2, r3, r2, r3
 80003b0:	08db      	lsrs	r3, r3, #3
 80003b2:	613b      	str	r3, [r7, #16]
    for(uint8_t i = 0; i < 4; i++)
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	3301      	adds	r3, #1
 80003b8:	73fb      	strb	r3, [r7, #15]
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	2b03      	cmp	r3, #3
 80003be:	d9e5      	bls.n	800038c <framesUpdateTask+0x18>
    }
    numOfFrame++;
 80003c0:	7dfb      	ldrb	r3, [r7, #23]
 80003c2:	3301      	adds	r3, #1
 80003c4:	75fb      	strb	r3, [r7, #23]
    if (numOfFrame == sizeof(SsegNumbersArray))
 80003c6:	7dfb      	ldrb	r3, [r7, #23]
 80003c8:	2b0a      	cmp	r3, #10
 80003ca:	d101      	bne.n	80003d0 <framesUpdateTask+0x5c>
    {
      numOfFrame = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	75fb      	strb	r3, [r7, #23]
    }
		vTaskDelay((1000 / portTICK_PERIOD_MS));
 80003d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d4:	f002 fec6 	bl	8003164 <vTaskDelay>
	{
 80003d8:	e7d2      	b.n	8000380 <framesUpdateTask+0xc>
 80003da:	bf00      	nop
 80003dc:	200003a4 	.word	0x200003a4
 80003e0:	cccccccd 	.word	0xcccccccd
 80003e4:	200003a8 	.word	0x200003a8

080003e8 <HAL_GPIO_EXTI_Callback>:
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(EXTI_ECHO_GPIO_Port, EXTI_ECHO_Pin))
 80003f2:	2120      	movs	r1, #32
 80003f4:	4814      	ldr	r0, [pc, #80]	; (8000448 <HAL_GPIO_EXTI_Callback+0x60>)
 80003f6:	f000 fe05 	bl	8001004 <HAL_GPIO_ReadPin>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d010      	beq.n	8000422 <HAL_GPIO_EXTI_Callback+0x3a>
  {
    __TIM2_CLK_ENABLE();
 8000400:	4b12      	ldr	r3, [pc, #72]	; (800044c <HAL_GPIO_EXTI_Callback+0x64>)
 8000402:	69db      	ldr	r3, [r3, #28]
 8000404:	4a11      	ldr	r2, [pc, #68]	; (800044c <HAL_GPIO_EXTI_Callback+0x64>)
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	61d3      	str	r3, [r2, #28]
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <HAL_GPIO_EXTI_Callback+0x64>)
 800040e:	69db      	ldr	r3, [r3, #28]
 8000410:	f003 0301 	and.w	r3, r3, #1
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
    TIM2 -> CNT = 0;
 8000418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800041c:	2200      	movs	r2, #0
 800041e:	625a      	str	r2, [r3, #36]	; 0x24
  {
    echoCounter = TIM2 -> CNT;
    TIM2 -> CNT = 0;
    __TIM2_CLK_DISABLE();
  }
}
 8000420:	e00e      	b.n	8000440 <HAL_GPIO_EXTI_Callback+0x58>
    echoCounter = TIM2 -> CNT;
 8000422:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000428:	4a09      	ldr	r2, [pc, #36]	; (8000450 <HAL_GPIO_EXTI_Callback+0x68>)
 800042a:	6013      	str	r3, [r2, #0]
    TIM2 -> CNT = 0;
 800042c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000430:	2200      	movs	r2, #0
 8000432:	625a      	str	r2, [r3, #36]	; 0x24
    __TIM2_CLK_DISABLE();
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <HAL_GPIO_EXTI_Callback+0x64>)
 8000436:	69db      	ldr	r3, [r3, #28]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <HAL_GPIO_EXTI_Callback+0x64>)
 800043a:	f023 0301 	bic.w	r3, r3, #1
 800043e:	61d3      	str	r3, [r2, #28]
}
 8000440:	bf00      	nop
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40010c00 	.word	0x40010c00
 800044c:	40021000 	.word	0x40021000
 8000450:	200003a4 	.word	0x200003a4

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b5b0      	push	{r4, r5, r7, lr}
 8000456:	b08a      	sub	sp, #40	; 0x28
 8000458:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045a:	f000 fb3d 	bl	8000ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045e:	f000 f83d 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000462:	f000 f939 	bl	80006d8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000466:	f000 f897 	bl	8000598 <MX_RTC_Init>
  MX_TIM2_Init();
 800046a:	f000 f8df 	bl	800062c <MX_TIM2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <main+0x74>)
 8000470:	1d3c      	adds	r4, r7, #4
 8000472:	461d      	mov	r5, r3
 8000474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000478:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800047c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f002 fbbd 	bl	8002c04 <osThreadCreate>
 800048a:	4603      	mov	r3, r0
 800048c:	4a0f      	ldr	r2, [pc, #60]	; (80004cc <main+0x78>)
 800048e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(ssegOutputTask, "LED", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8000490:	2300      	movs	r3, #0
 8000492:	9301      	str	r3, [sp, #4]
 8000494:	2302      	movs	r3, #2
 8000496:	9300      	str	r3, [sp, #0]
 8000498:	2300      	movs	r3, #0
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	490c      	ldr	r1, [pc, #48]	; (80004d0 <main+0x7c>)
 800049e:	480d      	ldr	r0, [pc, #52]	; (80004d4 <main+0x80>)
 80004a0:	f002 fd1b 	bl	8002eda <xTaskCreate>
  xTaskCreate(framesUpdateTask, "LED", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 80004a4:	2300      	movs	r3, #0
 80004a6:	9301      	str	r3, [sp, #4]
 80004a8:	2302      	movs	r3, #2
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	2300      	movs	r3, #0
 80004ae:	2280      	movs	r2, #128	; 0x80
 80004b0:	4907      	ldr	r1, [pc, #28]	; (80004d0 <main+0x7c>)
 80004b2:	4809      	ldr	r0, [pc, #36]	; (80004d8 <main+0x84>)
 80004b4:	f002 fd11 	bl	8002eda <xTaskCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  SetFrame(1, 0xFF);
 80004b8:	21ff      	movs	r1, #255	; 0xff
 80004ba:	2001      	movs	r0, #1
 80004bc:	f7ff fed0 	bl	8000260 <SetFrame>
  osKernelStart();
 80004c0:	f002 fb99 	bl	8002bf6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <main+0x70>
 80004c6:	bf00      	nop
 80004c8:	080041d0 	.word	0x080041d0
 80004cc:	200003a0 	.word	0x200003a0
 80004d0:	080041cc 	.word	0x080041cc
 80004d4:	0800033d 	.word	0x0800033d
 80004d8:	08000375 	.word	0x08000375

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b094      	sub	sp, #80	; 0x50
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004e6:	2228      	movs	r2, #40	; 0x28
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f003 fd96 	bl	800401c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800050c:	2305      	movs	r3, #5
 800050e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000514:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800051a:	2301      	movs	r3, #1
 800051c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051e:	2301      	movs	r3, #1
 8000520:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000522:	2302      	movs	r3, #2
 8000524:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800052a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800052c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000530:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fdb8 	bl	80010ac <HAL_RCC_OscConfig>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000542:	f000 f97f 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000546:	230f      	movs	r3, #15
 8000548:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800054a:	2302      	movs	r3, #2
 800054c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000556:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	2102      	movs	r1, #2
 8000562:	4618      	mov	r0, r3
 8000564:	f001 f824 	bl	80015b0 <HAL_RCC_ClockConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800056e:	f000 f969 	bl	8000844 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000572:	2301      	movs	r3, #1
 8000574:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	4618      	mov	r0, r3
 8000580:	f001 f9ca 	bl	8001918 <HAL_RCCEx_PeriphCLKConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800058a:	f000 f95b 	bl	8000844 <Error_Handler>
  }
}
 800058e:	bf00      	nop
 8000590:	3750      	adds	r7, #80	; 0x50
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2100      	movs	r1, #0
 80005a2:	460a      	mov	r2, r1
 80005a4:	801a      	strh	r2, [r3, #0]
 80005a6:	460a      	mov	r2, r1
 80005a8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_RTC_Init+0x8c>)
 80005b0:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <MX_RTC_Init+0x90>)
 80005b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_RTC_Init+0x8c>)
 80005b6:	f04f 32ff 	mov.w	r2, #4294967295
 80005ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_RTC_Init+0x8c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005c2:	4818      	ldr	r0, [pc, #96]	; (8000624 <MX_RTC_Init+0x8c>)
 80005c4:	f001 fb1e 	bl	8001c04 <HAL_RTC_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80005ce:	f000 f939 	bl	8000844 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80005da:	2300      	movs	r3, #0
 80005dc:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	480f      	ldr	r0, [pc, #60]	; (8000624 <MX_RTC_Init+0x8c>)
 80005e6:	f001 fba3 	bl	8001d30 <HAL_RTC_SetTime>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80005f0:	f000 f928 	bl	8000844 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80005f4:	2301      	movs	r3, #1
 80005f6:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80005f8:	2301      	movs	r3, #1
 80005fa:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000600:	2300      	movs	r3, #0
 8000602:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000604:	463b      	mov	r3, r7
 8000606:	2201      	movs	r2, #1
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_RTC_Init+0x8c>)
 800060c:	f001 fc28 	bl	8001e60 <HAL_RTC_SetDate>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000616:	f000 f915 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000344 	.word	0x20000344
 8000628:	40002800 	.word	0x40002800

0800062c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_TIM2_Init+0xa8>)
 800064a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800064e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_TIM2_Init+0xa8>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <MX_TIM2_Init+0xa8>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800065c:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_TIM2_Init+0xa8>)
 800065e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000662:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_TIM2_Init+0xa8>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_TIM2_Init+0xa8>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000670:	4818      	ldr	r0, [pc, #96]	; (80006d4 <MX_TIM2_Init+0xa8>)
 8000672:	f001 fe55 	bl	8002320 <HAL_TIM_Base_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800067c:	f000 f8e2 	bl	8000844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	4619      	mov	r1, r3
 800068c:	4811      	ldr	r0, [pc, #68]	; (80006d4 <MX_TIM2_Init+0xa8>)
 800068e:	f002 f84a 	bl	8002726 <HAL_TIM_ConfigClockSource>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000698:	f000 f8d4 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800069c:	2108      	movs	r1, #8
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <MX_TIM2_Init+0xa8>)
 80006a0:	f001 fee0 	bl	8002464 <HAL_TIM_OnePulse_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80006aa:	f000 f8cb 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ae:	2300      	movs	r3, #0
 80006b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_TIM2_Init+0xa8>)
 80006bc:	f002 fa14 	bl	8002ae8 <HAL_TIMEx_MasterConfigSynchronization>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80006c6:	f000 f8bd 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000358 	.word	0x20000358

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ec:	4b43      	ldr	r3, [pc, #268]	; (80007fc <MX_GPIO_Init+0x124>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a42      	ldr	r2, [pc, #264]	; (80007fc <MX_GPIO_Init+0x124>)
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b40      	ldr	r3, [pc, #256]	; (80007fc <MX_GPIO_Init+0x124>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0310 	and.w	r3, r3, #16
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000704:	4b3d      	ldr	r3, [pc, #244]	; (80007fc <MX_GPIO_Init+0x124>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a3c      	ldr	r2, [pc, #240]	; (80007fc <MX_GPIO_Init+0x124>)
 800070a:	f043 0320 	orr.w	r3, r3, #32
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b3a      	ldr	r3, [pc, #232]	; (80007fc <MX_GPIO_Init+0x124>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0320 	and.w	r3, r3, #32
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	4b37      	ldr	r3, [pc, #220]	; (80007fc <MX_GPIO_Init+0x124>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a36      	ldr	r2, [pc, #216]	; (80007fc <MX_GPIO_Init+0x124>)
 8000722:	f043 0308 	orr.w	r3, r3, #8
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b34      	ldr	r3, [pc, #208]	; (80007fc <MX_GPIO_Init+0x124>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0308 	and.w	r3, r3, #8
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000734:	4b31      	ldr	r3, [pc, #196]	; (80007fc <MX_GPIO_Init+0x124>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a30      	ldr	r2, [pc, #192]	; (80007fc <MX_GPIO_Init+0x124>)
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <MX_GPIO_Init+0x124>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0304 	and.w	r3, r3, #4
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000752:	482b      	ldr	r0, [pc, #172]	; (8000800 <MX_GPIO_Init+0x128>)
 8000754:	f000 fc6d 	bl	8001032 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SSEG_G_Pin|SSEG_C_Pin|SSEG_DOT_Pin|SSEG_D_Pin
 8000758:	2200      	movs	r2, #0
 800075a:	f24f 0158 	movw	r1, #61528	; 0xf058
 800075e:	4829      	ldr	r0, [pc, #164]	; (8000804 <MX_GPIO_Init+0x12c>)
 8000760:	f000 fc67 	bl	8001032 <HAL_GPIO_WritePin>
                          |SSEG_2_Pin|SSEG_B_Pin|ECHO_TRIGGER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSEG_E_Pin|SSEG_4_Pin|SSEG_1_Pin|SSEG_A_Pin
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 800076a:	4827      	ldr	r0, [pc, #156]	; (8000808 <MX_GPIO_Init+0x130>)
 800076c:	f000 fc61 	bl	8001032 <HAL_GPIO_WritePin>
                          |SSEG_F_Pin|SSEG_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8000770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2302      	movs	r3, #2
 8000780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	4619      	mov	r1, r3
 8000788:	481d      	ldr	r0, [pc, #116]	; (8000800 <MX_GPIO_Init+0x128>)
 800078a:	f000 fab7 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : SSEG_G_Pin SSEG_C_Pin SSEG_DOT_Pin SSEG_D_Pin
                           SSEG_2_Pin SSEG_B_Pin ECHO_TRIGGER_Pin */
  GPIO_InitStruct.Pin = SSEG_G_Pin|SSEG_C_Pin|SSEG_DOT_Pin|SSEG_D_Pin
 800078e:	f24f 0358 	movw	r3, #61528	; 0xf058
 8000792:	613b      	str	r3, [r7, #16]
                          |SSEG_2_Pin|SSEG_B_Pin|ECHO_TRIGGER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2302      	movs	r3, #2
 800079e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	4817      	ldr	r0, [pc, #92]	; (8000804 <MX_GPIO_Init+0x12c>)
 80007a8:	f000 faa8 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : SSEG_E_Pin SSEG_4_Pin SSEG_1_Pin SSEG_A_Pin
                           SSEG_F_Pin SSEG_3_Pin */
  GPIO_InitStruct.Pin = SSEG_E_Pin|SSEG_4_Pin|SSEG_1_Pin|SSEG_A_Pin
 80007ac:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 80007b0:	613b      	str	r3, [r7, #16]
                          |SSEG_F_Pin|SSEG_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	4619      	mov	r1, r3
 80007c4:	4810      	ldr	r0, [pc, #64]	; (8000808 <MX_GPIO_Init+0x130>)
 80007c6:	f000 fa99 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI_ECHO_Pin */
  GPIO_InitStruct.Pin = EXTI_ECHO_Pin;
 80007ca:	2320      	movs	r3, #32
 80007cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_GPIO_Init+0x134>)
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EXTI_ECHO_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	4619      	mov	r1, r3
 80007dc:	4809      	ldr	r0, [pc, #36]	; (8000804 <MX_GPIO_Init+0x12c>)
 80007de:	f000 fa8d 	bl	8000cfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2105      	movs	r1, #5
 80007e6:	2017      	movs	r0, #23
 80007e8:	f000 fa5d 	bl	8000ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007ec:	2017      	movs	r0, #23
 80007ee:	f000 fa76 	bl	8000cde <HAL_NVIC_EnableIRQ>

}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	40011000 	.word	0x40011000
 8000804:	40010c00 	.word	0x40010c00
 8000808:	40010800 	.word	0x40010800
 800080c:	10310000 	.word	0x10310000

08000810 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000818:	2001      	movs	r0, #1
 800081a:	f002 fa3f 	bl	8002c9c <osDelay>
 800081e:	e7fb      	b.n	8000818 <StartDefaultTask+0x8>

08000820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d101      	bne.n	8000836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000832:	f000 f967 	bl	8000b04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40012c00 	.word	0x40012c00

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_MspInit+0x68>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_MspInit+0x68>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_MspInit+0x68>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_MspInit+0x68>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <HAL_MspInit+0x68>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x68>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	210f      	movs	r1, #15
 800088a:	f06f 0001 	mvn.w	r0, #1
 800088e:	f000 fa0a 	bl	8000ca6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_MspInit+0x6c>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_MspInit+0x6c>)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010000 	.word	0x40010000

080008c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <HAL_RTC_MspInit+0x3c>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d110      	bne.n	80008f4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80008d2:	f000 fbdf 	bl	8001094 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_RTC_MspInit+0x40>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	4a09      	ldr	r2, [pc, #36]	; (8000900 <HAL_RTC_MspInit+0x40>)
 80008dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008e0:	61d3      	str	r3, [r2, #28]
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <HAL_RTC_MspInit+0x40>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_RTC_MspInit+0x44>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40002800 	.word	0x40002800
 8000900:	40021000 	.word	0x40021000
 8000904:	4242043c 	.word	0x4242043c

08000908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000918:	d113      	bne.n	8000942 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_TIM_Base_MspInit+0x44>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a0b      	ldr	r2, [pc, #44]	; (800094c <HAL_TIM_Base_MspInit+0x44>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_TIM_Base_MspInit+0x44>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2105      	movs	r1, #5
 8000936:	201c      	movs	r0, #28
 8000938:	f000 f9b5 	bl	8000ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800093c:	201c      	movs	r0, #28
 800093e:	f000 f9ce 	bl	8000cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000

08000950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	; 0x30
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000960:	2300      	movs	r3, #0
 8000962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000966:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <HAL_InitTick+0xd0>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	4a2d      	ldr	r2, [pc, #180]	; (8000a20 <HAL_InitTick+0xd0>)
 800096c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000970:	6193      	str	r3, [r2, #24]
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <HAL_InitTick+0xd0>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800097e:	f107 020c 	add.w	r2, r7, #12
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f000 ff77 	bl	800187c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800098e:	f000 ff61 	bl	8001854 <HAL_RCC_GetPCLK2Freq>
 8000992:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000996:	4a23      	ldr	r2, [pc, #140]	; (8000a24 <HAL_InitTick+0xd4>)
 8000998:	fba2 2303 	umull	r2, r3, r2, r3
 800099c:	0c9b      	lsrs	r3, r3, #18
 800099e:	3b01      	subs	r3, #1
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <HAL_InitTick+0xd8>)
 80009a4:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <HAL_InitTick+0xdc>)
 80009a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_InitTick+0xd8>)
 80009aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ae:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <HAL_InitTick+0xd8>)
 80009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <HAL_InitTick+0xd8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <HAL_InitTick+0xd8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_InitTick+0xd8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009c8:	4817      	ldr	r0, [pc, #92]	; (8000a28 <HAL_InitTick+0xd8>)
 80009ca:	f001 fca9 	bl	8002320 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d11b      	bne.n	8000a14 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <HAL_InitTick+0xd8>)
 80009de:	f001 fcef 	bl	80023c0 <HAL_TIM_Base_Start_IT>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d111      	bne.n	8000a14 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80009f0:	2019      	movs	r0, #25
 80009f2:	f000 f974 	bl	8000cde <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d808      	bhi.n	8000a0e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	2019      	movs	r0, #25
 8000a02:	f000 f950 	bl	8000ca6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_InitTick+0xe0>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	e002      	b.n	8000a14 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3730      	adds	r7, #48	; 0x30
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	431bde83 	.word	0x431bde83
 8000a28:	200003ac 	.word	0x200003ac
 8000a2c:	40012c00 	.word	0x40012c00
 8000a30:	20000004 	.word	0x20000004

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr

08000a5e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_ECHO_Pin);
 8000a62:	2020      	movs	r0, #32
 8000a64:	f000 fafe 	bl	8001064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <TIM2_IRQHandler+0x10>)
 8000a72:	f001 fd50 	bl	8002516 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000358 	.word	0x20000358

08000a80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a8e:	490d      	ldr	r1, [pc, #52]	; (8000ac4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	; (8000ad0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ab2:	f7ff ffe5 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f003 fa8b 	bl	8003fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aba:	f7ff fccb 	bl	8000454 <main>
  bx lr
 8000abe:	4770      	bx	lr
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ac8:	08004294 	.word	0x08004294
  ldr r2, =_sbss
 8000acc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ad0:	2000114c 	.word	0x2000114c

08000ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC1_2_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_Init+0x28>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <HAL_Init+0x28>)
 8000ae2:	f043 0310 	orr.w	r3, r3, #16
 8000ae6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f000 f8d1 	bl	8000c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aee:	200f      	movs	r0, #15
 8000af0:	f7ff ff2e 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af4:	f7ff feac 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40022000 	.word	0x40022000

08000b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x1c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_IncTick+0x20>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <HAL_IncTick+0x20>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	20000008 	.word	0x20000008
 8000b24:	200003f4 	.word	0x200003f4

08000b28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b02      	ldr	r3, [pc, #8]	; (8000b38 <HAL_GetTick+0x10>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	200003f4 	.word	0x200003f4

08000b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	60d3      	str	r3, [r2, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <__NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db0b      	blt.n	8000bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	f003 021f 	and.w	r2, r3, #31
 8000bb8:	4906      	ldr	r1, [pc, #24]	; (8000bd4 <__NVIC_EnableIRQ+0x34>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	095b      	lsrs	r3, r3, #5
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	; (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff4f 	bl	8000b3c <__NVIC_SetPriorityGrouping>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb8:	f7ff ff64 	bl	8000b84 <__NVIC_GetPriorityGrouping>
 8000cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	68b9      	ldr	r1, [r7, #8]
 8000cc2:	6978      	ldr	r0, [r7, #20]
 8000cc4:	f7ff ffb2 	bl	8000c2c <NVIC_EncodePriority>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff81 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff57 	bl	8000ba0 <__NVIC_EnableIRQ>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b08b      	sub	sp, #44	; 0x2c
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0e:	e169      	b.n	8000fe4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d10:	2201      	movs	r2, #1
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	69fa      	ldr	r2, [r7, #28]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	f040 8158 	bne.w	8000fde <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	4a9a      	ldr	r2, [pc, #616]	; (8000f9c <HAL_GPIO_Init+0x2a0>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d05e      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
 8000d38:	4a98      	ldr	r2, [pc, #608]	; (8000f9c <HAL_GPIO_Init+0x2a0>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d875      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d3e:	4a98      	ldr	r2, [pc, #608]	; (8000fa0 <HAL_GPIO_Init+0x2a4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d058      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
 8000d44:	4a96      	ldr	r2, [pc, #600]	; (8000fa0 <HAL_GPIO_Init+0x2a4>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d86f      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d4a:	4a96      	ldr	r2, [pc, #600]	; (8000fa4 <HAL_GPIO_Init+0x2a8>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d052      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
 8000d50:	4a94      	ldr	r2, [pc, #592]	; (8000fa4 <HAL_GPIO_Init+0x2a8>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d869      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d56:	4a94      	ldr	r2, [pc, #592]	; (8000fa8 <HAL_GPIO_Init+0x2ac>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d04c      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
 8000d5c:	4a92      	ldr	r2, [pc, #584]	; (8000fa8 <HAL_GPIO_Init+0x2ac>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d863      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d62:	4a92      	ldr	r2, [pc, #584]	; (8000fac <HAL_GPIO_Init+0x2b0>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d046      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
 8000d68:	4a90      	ldr	r2, [pc, #576]	; (8000fac <HAL_GPIO_Init+0x2b0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d85d      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d6e:	2b12      	cmp	r3, #18
 8000d70:	d82a      	bhi.n	8000dc8 <HAL_GPIO_Init+0xcc>
 8000d72:	2b12      	cmp	r3, #18
 8000d74:	d859      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d76:	a201      	add	r2, pc, #4	; (adr r2, 8000d7c <HAL_GPIO_Init+0x80>)
 8000d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7c:	08000df7 	.word	0x08000df7
 8000d80:	08000dd1 	.word	0x08000dd1
 8000d84:	08000de3 	.word	0x08000de3
 8000d88:	08000e25 	.word	0x08000e25
 8000d8c:	08000e2b 	.word	0x08000e2b
 8000d90:	08000e2b 	.word	0x08000e2b
 8000d94:	08000e2b 	.word	0x08000e2b
 8000d98:	08000e2b 	.word	0x08000e2b
 8000d9c:	08000e2b 	.word	0x08000e2b
 8000da0:	08000e2b 	.word	0x08000e2b
 8000da4:	08000e2b 	.word	0x08000e2b
 8000da8:	08000e2b 	.word	0x08000e2b
 8000dac:	08000e2b 	.word	0x08000e2b
 8000db0:	08000e2b 	.word	0x08000e2b
 8000db4:	08000e2b 	.word	0x08000e2b
 8000db8:	08000e2b 	.word	0x08000e2b
 8000dbc:	08000e2b 	.word	0x08000e2b
 8000dc0:	08000dd9 	.word	0x08000dd9
 8000dc4:	08000ded 	.word	0x08000ded
 8000dc8:	4a79      	ldr	r2, [pc, #484]	; (8000fb0 <HAL_GPIO_Init+0x2b4>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d013      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dce:	e02c      	b.n	8000e2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	623b      	str	r3, [r7, #32]
          break;
 8000dd6:	e029      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	623b      	str	r3, [r7, #32]
          break;
 8000de0:	e024      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	3308      	adds	r3, #8
 8000de8:	623b      	str	r3, [r7, #32]
          break;
 8000dea:	e01f      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	330c      	adds	r3, #12
 8000df2:	623b      	str	r3, [r7, #32]
          break;
 8000df4:	e01a      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d102      	bne.n	8000e04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	623b      	str	r3, [r7, #32]
          break;
 8000e02:	e013      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d105      	bne.n	8000e18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	611a      	str	r2, [r3, #16]
          break;
 8000e16:	e009      	b.n	8000e2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	615a      	str	r2, [r3, #20]
          break;
 8000e22:	e003      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
          break;
 8000e28:	e000      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          break;
 8000e2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	2bff      	cmp	r3, #255	; 0xff
 8000e30:	d801      	bhi.n	8000e36 <HAL_GPIO_Init+0x13a>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	e001      	b.n	8000e3a <HAL_GPIO_Init+0x13e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	2bff      	cmp	r3, #255	; 0xff
 8000e40:	d802      	bhi.n	8000e48 <HAL_GPIO_Init+0x14c>
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	e002      	b.n	8000e4e <HAL_GPIO_Init+0x152>
 8000e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4a:	3b08      	subs	r3, #8
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	210f      	movs	r1, #15
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	401a      	ands	r2, r3
 8000e60:	6a39      	ldr	r1, [r7, #32]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 80b1 	beq.w	8000fde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7c:	4b4d      	ldr	r3, [pc, #308]	; (8000fb4 <HAL_GPIO_Init+0x2b8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a4c      	ldr	r2, [pc, #304]	; (8000fb4 <HAL_GPIO_Init+0x2b8>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b4a      	ldr	r3, [pc, #296]	; (8000fb4 <HAL_GPIO_Init+0x2b8>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e94:	4a48      	ldr	r2, [pc, #288]	; (8000fb8 <HAL_GPIO_Init+0x2bc>)
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	220f      	movs	r2, #15
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a40      	ldr	r2, [pc, #256]	; (8000fbc <HAL_GPIO_Init+0x2c0>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d013      	beq.n	8000ee8 <HAL_GPIO_Init+0x1ec>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a3f      	ldr	r2, [pc, #252]	; (8000fc0 <HAL_GPIO_Init+0x2c4>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d00d      	beq.n	8000ee4 <HAL_GPIO_Init+0x1e8>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a3e      	ldr	r2, [pc, #248]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d007      	beq.n	8000ee0 <HAL_GPIO_Init+0x1e4>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a3d      	ldr	r2, [pc, #244]	; (8000fc8 <HAL_GPIO_Init+0x2cc>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d101      	bne.n	8000edc <HAL_GPIO_Init+0x1e0>
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e006      	b.n	8000eea <HAL_GPIO_Init+0x1ee>
 8000edc:	2304      	movs	r3, #4
 8000ede:	e004      	b.n	8000eea <HAL_GPIO_Init+0x1ee>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	e002      	b.n	8000eea <HAL_GPIO_Init+0x1ee>
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e000      	b.n	8000eea <HAL_GPIO_Init+0x1ee>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eec:	f002 0203 	and.w	r2, r2, #3
 8000ef0:	0092      	lsls	r2, r2, #2
 8000ef2:	4093      	lsls	r3, r2
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000efa:	492f      	ldr	r1, [pc, #188]	; (8000fb8 <HAL_GPIO_Init+0x2bc>)
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	3302      	adds	r3, #2
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f14:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	492c      	ldr	r1, [pc, #176]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	600b      	str	r3, [r1, #0]
 8000f20:	e006      	b.n	8000f30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f22:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	4928      	ldr	r1, [pc, #160]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d006      	beq.n	8000f4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	4922      	ldr	r1, [pc, #136]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	604b      	str	r3, [r1, #4]
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	491e      	ldr	r1, [pc, #120]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d006      	beq.n	8000f72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	4918      	ldr	r1, [pc, #96]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	608b      	str	r3, [r1, #8]
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f72:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	4914      	ldr	r1, [pc, #80]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d021      	beq.n	8000fd0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	490e      	ldr	r1, [pc, #56]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	60cb      	str	r3, [r1, #12]
 8000f98:	e021      	b.n	8000fde <HAL_GPIO_Init+0x2e2>
 8000f9a:	bf00      	nop
 8000f9c:	10320000 	.word	0x10320000
 8000fa0:	10310000 	.word	0x10310000
 8000fa4:	10220000 	.word	0x10220000
 8000fa8:	10210000 	.word	0x10210000
 8000fac:	10120000 	.word	0x10120000
 8000fb0:	10110000 	.word	0x10110000
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010000 	.word	0x40010000
 8000fbc:	40010800 	.word	0x40010800
 8000fc0:	40010c00 	.word	0x40010c00
 8000fc4:	40011000 	.word	0x40011000
 8000fc8:	40011400 	.word	0x40011400
 8000fcc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_GPIO_Init+0x304>)
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	4909      	ldr	r1, [pc, #36]	; (8001000 <HAL_GPIO_Init+0x304>)
 8000fda:	4013      	ands	r3, r2
 8000fdc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	fa22 f303 	lsr.w	r3, r2, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f47f ae8e 	bne.w	8000d10 <HAL_GPIO_Init+0x14>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	372c      	adds	r7, #44	; 0x2c
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	40010400 	.word	0x40010400

08001004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	4013      	ands	r3, r2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e001      	b.n	8001026 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	460b      	mov	r3, r1
 800103c:	807b      	strh	r3, [r7, #2]
 800103e:	4613      	mov	r3, r2
 8001040:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001042:	787b      	ldrb	r3, [r7, #1]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001048:	887a      	ldrh	r2, [r7, #2]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800104e:	e003      	b.n	8001058 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001050:	887b      	ldrh	r3, [r7, #2]
 8001052:	041a      	lsls	r2, r3, #16
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	611a      	str	r2, [r3, #16]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
	...

08001064 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001070:	695a      	ldr	r2, [r3, #20]
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	4013      	ands	r3, r2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d006      	beq.n	8001088 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f9b0 	bl	80003e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40010400 	.word	0x40010400

08001094 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_PWR_EnableBkUpAccess+0x14>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	420e0020 	.word	0x420e0020

080010ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e272      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 8087 	beq.w	80011da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010cc:	4b92      	ldr	r3, [pc, #584]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d00c      	beq.n	80010f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d8:	4b8f      	ldr	r3, [pc, #572]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 030c 	and.w	r3, r3, #12
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	d112      	bne.n	800110a <HAL_RCC_OscConfig+0x5e>
 80010e4:	4b8c      	ldr	r3, [pc, #560]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f0:	d10b      	bne.n	800110a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f2:	4b89      	ldr	r3, [pc, #548]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d06c      	beq.n	80011d8 <HAL_RCC_OscConfig+0x12c>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d168      	bne.n	80011d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e24c      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001112:	d106      	bne.n	8001122 <HAL_RCC_OscConfig+0x76>
 8001114:	4b80      	ldr	r3, [pc, #512]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a7f      	ldr	r2, [pc, #508]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800111a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	e02e      	b.n	8001180 <HAL_RCC_OscConfig+0xd4>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0x98>
 800112a:	4b7b      	ldr	r3, [pc, #492]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a7a      	ldr	r2, [pc, #488]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	4b78      	ldr	r3, [pc, #480]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a77      	ldr	r2, [pc, #476]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800113c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e01d      	b.n	8001180 <HAL_RCC_OscConfig+0xd4>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0xbc>
 800114e:	4b72      	ldr	r3, [pc, #456]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a71      	ldr	r2, [pc, #452]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b6f      	ldr	r3, [pc, #444]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a6e      	ldr	r2, [pc, #440]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e00b      	b.n	8001180 <HAL_RCC_OscConfig+0xd4>
 8001168:	4b6b      	ldr	r3, [pc, #428]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a6a      	ldr	r2, [pc, #424]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800116e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b68      	ldr	r3, [pc, #416]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a67      	ldr	r2, [pc, #412]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800117a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d013      	beq.n	80011b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fcce 	bl	8000b28 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fcca 	bl	8000b28 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	; 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e200      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	4b5d      	ldr	r3, [pc, #372]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0xe4>
 80011ae:	e014      	b.n	80011da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fcba 	bl	8000b28 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fcb6 	bl	8000b28 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	; 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e1ec      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ca:	4b53      	ldr	r3, [pc, #332]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x10c>
 80011d6:	e000      	b.n	80011da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d063      	beq.n	80012ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011e6:	4b4c      	ldr	r3, [pc, #304]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00b      	beq.n	800120a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011f2:	4b49      	ldr	r3, [pc, #292]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 030c 	and.w	r3, r3, #12
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d11c      	bne.n	8001238 <HAL_RCC_OscConfig+0x18c>
 80011fe:	4b46      	ldr	r3, [pc, #280]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d116      	bne.n	8001238 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120a:	4b43      	ldr	r3, [pc, #268]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d005      	beq.n	8001222 <HAL_RCC_OscConfig+0x176>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d001      	beq.n	8001222 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e1c0      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4939      	ldr	r1, [pc, #228]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	e03a      	b.n	80012ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d020      	beq.n	8001282 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001240:	4b36      	ldr	r3, [pc, #216]	; (800131c <HAL_RCC_OscConfig+0x270>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fc6f 	bl	8000b28 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124e:	f7ff fc6b 	bl	8000b28 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e1a1      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4927      	ldr	r1, [pc, #156]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 800127c:	4313      	orrs	r3, r2
 800127e:	600b      	str	r3, [r1, #0]
 8001280:	e015      	b.n	80012ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <HAL_RCC_OscConfig+0x270>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fc4e 	bl	8000b28 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001290:	f7ff fc4a 	bl	8000b28 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e180      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f0      	bne.n	8001290 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d03a      	beq.n	8001330 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d019      	beq.n	80012f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_RCC_OscConfig+0x274>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c8:	f7ff fc2e 	bl	8000b28 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d0:	f7ff fc2a 	bl	8000b28 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e160      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012ee:	2001      	movs	r0, #1
 80012f0:	f000 faf4 	bl	80018dc <RCC_Delay>
 80012f4:	e01c      	b.n	8001330 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_RCC_OscConfig+0x274>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fc:	f7ff fc14 	bl	8000b28 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001302:	e00f      	b.n	8001324 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001304:	f7ff fc10 	bl	8000b28 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d908      	bls.n	8001324 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e146      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	42420000 	.word	0x42420000
 8001320:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001324:	4b92      	ldr	r3, [pc, #584]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 8001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1e9      	bne.n	8001304 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80a6 	beq.w	800148a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001342:	4b8b      	ldr	r3, [pc, #556]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10d      	bne.n	800136a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4b88      	ldr	r3, [pc, #544]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a87      	ldr	r2, [pc, #540]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b85      	ldr	r3, [pc, #532]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001366:	2301      	movs	r3, #1
 8001368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136a:	4b82      	ldr	r3, [pc, #520]	; (8001574 <HAL_RCC_OscConfig+0x4c8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001372:	2b00      	cmp	r3, #0
 8001374:	d118      	bne.n	80013a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001376:	4b7f      	ldr	r3, [pc, #508]	; (8001574 <HAL_RCC_OscConfig+0x4c8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a7e      	ldr	r2, [pc, #504]	; (8001574 <HAL_RCC_OscConfig+0x4c8>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001382:	f7ff fbd1 	bl	8000b28 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138a:	f7ff fbcd 	bl	8000b28 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b64      	cmp	r3, #100	; 0x64
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e103      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	4b75      	ldr	r3, [pc, #468]	; (8001574 <HAL_RCC_OscConfig+0x4c8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d106      	bne.n	80013be <HAL_RCC_OscConfig+0x312>
 80013b0:	4b6f      	ldr	r3, [pc, #444]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4a6e      	ldr	r2, [pc, #440]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6213      	str	r3, [r2, #32]
 80013bc:	e02d      	b.n	800141a <HAL_RCC_OscConfig+0x36e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0x334>
 80013c6:	4b6a      	ldr	r3, [pc, #424]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4a69      	ldr	r2, [pc, #420]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	6213      	str	r3, [r2, #32]
 80013d2:	4b67      	ldr	r3, [pc, #412]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4a66      	ldr	r2, [pc, #408]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	f023 0304 	bic.w	r3, r3, #4
 80013dc:	6213      	str	r3, [r2, #32]
 80013de:	e01c      	b.n	800141a <HAL_RCC_OscConfig+0x36e>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d10c      	bne.n	8001402 <HAL_RCC_OscConfig+0x356>
 80013e8:	4b61      	ldr	r3, [pc, #388]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4a60      	ldr	r2, [pc, #384]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6213      	str	r3, [r2, #32]
 80013f4:	4b5e      	ldr	r3, [pc, #376]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4a5d      	ldr	r2, [pc, #372]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6213      	str	r3, [r2, #32]
 8001400:	e00b      	b.n	800141a <HAL_RCC_OscConfig+0x36e>
 8001402:	4b5b      	ldr	r3, [pc, #364]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a5a      	ldr	r2, [pc, #360]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	f023 0301 	bic.w	r3, r3, #1
 800140c:	6213      	str	r3, [r2, #32]
 800140e:	4b58      	ldr	r3, [pc, #352]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4a57      	ldr	r2, [pc, #348]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	f023 0304 	bic.w	r3, r3, #4
 8001418:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d015      	beq.n	800144e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff fb81 	bl	8000b28 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001428:	e00a      	b.n	8001440 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f7ff fb7d 	bl	8000b28 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f241 3288 	movw	r2, #5000	; 0x1388
 8001438:	4293      	cmp	r3, r2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e0b1      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001440:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0ee      	beq.n	800142a <HAL_RCC_OscConfig+0x37e>
 800144c:	e014      	b.n	8001478 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff fb6b 	bl	8000b28 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff fb67 	bl	8000b28 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	f241 3288 	movw	r2, #5000	; 0x1388
 8001464:	4293      	cmp	r3, r2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e09b      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146c:	4b40      	ldr	r3, [pc, #256]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1ee      	bne.n	8001456 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d105      	bne.n	800148a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147e:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4a3b      	ldr	r2, [pc, #236]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001488:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 8087 	beq.w	80015a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d061      	beq.n	8001564 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d146      	bne.n	8001536 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a8:	4b33      	ldr	r3, [pc, #204]	; (8001578 <HAL_RCC_OscConfig+0x4cc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fb3b 	bl	8000b28 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff fb37 	bl	8000b28 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e06d      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014dc:	d108      	bne.n	80014f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	4921      	ldr	r1, [pc, #132]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a19      	ldr	r1, [r3, #32]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	430b      	orrs	r3, r1
 8001502:	491b      	ldr	r1, [pc, #108]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_RCC_OscConfig+0x4cc>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff fb0b 	bl	8000b28 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff fb07 	bl	8000b28 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e03d      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x46a>
 8001534:	e035      	b.n	80015a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_RCC_OscConfig+0x4cc>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff faf4 	bl	8000b28 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff faf0 	bl	8000b28 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e026      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_RCC_OscConfig+0x4c4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x498>
 8001562:	e01e      	b.n	80015a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d107      	bne.n	800157c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e019      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
 8001570:	40021000 	.word	0x40021000
 8001574:	40007000 	.word	0x40007000
 8001578:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_RCC_OscConfig+0x500>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	429a      	cmp	r2, r3
 800158e:	d106      	bne.n	800159e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159a:	429a      	cmp	r2, r3
 800159c:	d001      	beq.n	80015a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40021000 	.word	0x40021000

080015b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0d0      	b.n	8001766 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c4:	4b6a      	ldr	r3, [pc, #424]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d910      	bls.n	80015f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b67      	ldr	r3, [pc, #412]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 0207 	bic.w	r2, r3, #7
 80015da:	4965      	ldr	r1, [pc, #404]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	4313      	orrs	r3, r2
 80015e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e2:	4b63      	ldr	r3, [pc, #396]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0b8      	b.n	8001766 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d020      	beq.n	8001642 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800160c:	4b59      	ldr	r3, [pc, #356]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	4a58      	ldr	r2, [pc, #352]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001616:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001624:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4a52      	ldr	r2, [pc, #328]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800162e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001630:	4b50      	ldr	r3, [pc, #320]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	494d      	ldr	r1, [pc, #308]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	4313      	orrs	r3, r2
 8001640:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d040      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d115      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e07f      	b.n	8001766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	4b41      	ldr	r3, [pc, #260]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e073      	b.n	8001766 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167e:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e06b      	b.n	8001766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168e:	4b39      	ldr	r3, [pc, #228]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f023 0203 	bic.w	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4936      	ldr	r1, [pc, #216]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a0:	f7ff fa42 	bl	8000b28 <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	e00a      	b.n	80016be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff fa3e 	bl	8000b28 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e053      	b.n	8001766 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 020c 	and.w	r2, r3, #12
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d1eb      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d210      	bcs.n	8001700 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b24      	ldr	r3, [pc, #144]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 0207 	bic.w	r2, r3, #7
 80016e6:	4922      	ldr	r1, [pc, #136]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e032      	b.n	8001766 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	4916      	ldr	r1, [pc, #88]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d009      	beq.n	800173e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	490e      	ldr	r1, [pc, #56]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800173e:	f000 f821 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 8001742:	4602      	mov	r2, r0
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	490a      	ldr	r1, [pc, #40]	; (8001778 <HAL_RCC_ClockConfig+0x1c8>)
 8001750:	5ccb      	ldrb	r3, [r1, r3]
 8001752:	fa22 f303 	lsr.w	r3, r2, r3
 8001756:	4a09      	ldr	r2, [pc, #36]	; (800177c <HAL_RCC_ClockConfig+0x1cc>)
 8001758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_RCC_ClockConfig+0x1d0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff f8f6 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40022000 	.word	0x40022000
 8001774:	40021000 	.word	0x40021000
 8001778:	08004214 	.word	0x08004214
 800177c:	20000000 	.word	0x20000000
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001784:	b490      	push	{r4, r7}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800178a:	4b29      	ldr	r3, [pc, #164]	; (8001830 <HAL_RCC_GetSysClockFreq+0xac>)
 800178c:	1d3c      	adds	r4, r7, #4
 800178e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001790:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001794:	f240 2301 	movw	r3, #513	; 0x201
 8001798:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d002      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x40>
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d003      	beq.n	80017ca <HAL_RCC_GetSysClockFreq+0x46>
 80017c2:	e02b      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017c6:	623b      	str	r3, [r7, #32]
      break;
 80017c8:	e02b      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	0c9b      	lsrs	r3, r3, #18
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	3328      	adds	r3, #40	; 0x28
 80017d4:	443b      	add	r3, r7
 80017d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d012      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	0c5b      	lsrs	r3, r3, #17
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	3328      	adds	r3, #40	; 0x28
 80017f2:	443b      	add	r3, r7
 80017f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017fe:	fb03 f202 	mul.w	r2, r3, r2
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	fbb2 f3f3 	udiv	r3, r2, r3
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
 800180a:	e004      	b.n	8001816 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001810:	fb02 f303 	mul.w	r3, r2, r3
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	623b      	str	r3, [r7, #32]
      break;
 800181a:	e002      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_RCC_GetSysClockFreq+0xb4>)
 800181e:	623b      	str	r3, [r7, #32]
      break;
 8001820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001822:	6a3b      	ldr	r3, [r7, #32]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	bc90      	pop	{r4, r7}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	080041ec 	.word	0x080041ec
 8001834:	40021000 	.word	0x40021000
 8001838:	007a1200 	.word	0x007a1200
 800183c:	003d0900 	.word	0x003d0900

08001840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <HAL_RCC_GetHCLKFreq+0x10>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	20000000 	.word	0x20000000

08001854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001858:	f7ff fff2 	bl	8001840 <HAL_RCC_GetHCLKFreq>
 800185c:	4602      	mov	r2, r0
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	0adb      	lsrs	r3, r3, #11
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	4903      	ldr	r1, [pc, #12]	; (8001878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800186a:	5ccb      	ldrb	r3, [r1, r3]
 800186c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	08004224 	.word	0x08004224

0800187c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	220f      	movs	r2, #15
 800188a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_RCC_GetClockConfig+0x58>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0203 	and.w	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_RCC_GetClockConfig+0x58>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_RCC_GetClockConfig+0x58>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_RCC_GetClockConfig+0x58>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	08db      	lsrs	r3, r3, #3
 80018b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_RCC_GetClockConfig+0x5c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0207 	and.w	r2, r3, #7
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40022000 	.word	0x40022000

080018dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <RCC_Delay+0x34>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <RCC_Delay+0x38>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	0a5b      	lsrs	r3, r3, #9
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018f8:	bf00      	nop
  }
  while (Delay --);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1e5a      	subs	r2, r3, #1
 80018fe:	60fa      	str	r2, [r7, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f9      	bne.n	80018f8 <RCC_Delay+0x1c>
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	20000000 	.word	0x20000000
 8001914:	10624dd3 	.word	0x10624dd3

08001918 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d07d      	beq.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001938:	4b4f      	ldr	r3, [pc, #316]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10d      	bne.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	4b4c      	ldr	r3, [pc, #304]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	4a4b      	ldr	r2, [pc, #300]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194e:	61d3      	str	r3, [r2, #28]
 8001950:	4b49      	ldr	r3, [pc, #292]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800195c:	2301      	movs	r3, #1
 800195e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d118      	bne.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196c:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a42      	ldr	r2, [pc, #264]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001978:	f7ff f8d6 	bl	8000b28 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197e:	e008      	b.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001980:	f7ff f8d2 	bl	8000b28 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e06d      	b.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800199e:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d02e      	beq.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d027      	beq.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019bc:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019c6:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019cc:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80019d2:	4a29      	ldr	r2, [pc, #164]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d014      	beq.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff f8a1 	bl	8000b28 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e8:	e00a      	b.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f7ff f89d 	bl	8000b28 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e036      	b.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0ee      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	4917      	ldr	r1, [pc, #92]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d105      	bne.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	490b      	ldr	r1, [pc, #44]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d008      	beq.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	4904      	ldr	r1, [pc, #16]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	42420440 	.word	0x42420440

08001a84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b08d      	sub	sp, #52	; 0x34
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a8c:	4b58      	ldr	r3, [pc, #352]	; (8001bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001a8e:	f107 040c 	add.w	r4, r7, #12
 8001a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a98:	f240 2301 	movw	r3, #513	; 0x201
 8001a9c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b10      	cmp	r3, #16
 8001ab6:	d00a      	beq.n	8001ace <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b10      	cmp	r3, #16
 8001abc:	f200 808e 	bhi.w	8001bdc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d049      	beq.n	8001b5a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d079      	beq.n	8001bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001acc:	e086      	b.n	8001bdc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001ad4:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d07f      	beq.n	8001be0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	0c9b      	lsrs	r3, r3, #18
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	3330      	adds	r3, #48	; 0x30
 8001aea:	443b      	add	r3, r7
 8001aec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001af0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d017      	beq.n	8001b2c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001afc:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	0c5b      	lsrs	r3, r3, #17
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	3330      	adds	r3, #48	; 0x30
 8001b08:	443b      	add	r3, r7
 8001b0a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00d      	beq.n	8001b36 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001b1a:	4a37      	ldr	r2, [pc, #220]	; (8001bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	fb02 f303 	mul.w	r3, r2, r3
 8001b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b2a:	e004      	b.n	8001b36 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	4a33      	ldr	r2, [pc, #204]	; (8001bfc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001b30:	fb02 f303 	mul.w	r3, r2, r3
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001b36:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b42:	d102      	bne.n	8001b4a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8001b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001b48:	e04a      	b.n	8001be0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8001b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4a2c      	ldr	r2, [pc, #176]	; (8001c00 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001b50:	fba2 2303 	umull	r2, r3, r2, r3
 8001b54:	085b      	lsrs	r3, r3, #1
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001b58:	e042      	b.n	8001be0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b6a:	d108      	bne.n	8001b7e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8001b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7c:	e01f      	b.n	8001bbe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b88:	d109      	bne.n	8001b9e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8001b96:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b9c:	e00f      	b.n	8001bbe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ba8:	d11c      	bne.n	8001be4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d016      	beq.n	8001be4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8001bb6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001bbc:	e012      	b.n	8001be4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001bbe:	e011      	b.n	8001be4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001bc0:	f7ff fe48 	bl	8001854 <HAL_RCC_GetPCLK2Freq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	0b9b      	lsrs	r3, r3, #14
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001bda:	e004      	b.n	8001be6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001bdc:	bf00      	nop
 8001bde:	e002      	b.n	8001be6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001be0:	bf00      	nop
 8001be2:	e000      	b.n	8001be6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001be4:	bf00      	nop
    }
  }
  return (frequency);
 8001be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3734      	adds	r7, #52	; 0x34
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd90      	pop	{r4, r7, pc}
 8001bf0:	080041fc 	.word	0x080041fc
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	007a1200 	.word	0x007a1200
 8001bfc:	003d0900 	.word	0x003d0900
 8001c00:	aaaaaaab 	.word	0xaaaaaaab

08001c04 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e084      	b.n	8001d24 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7c5b      	ldrb	r3, [r3, #17]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fe48 	bl	80008c0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f9c8 	bl	8001fcc <HAL_RTC_WaitForSynchro>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d004      	beq.n	8001c4c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2204      	movs	r2, #4
 8001c46:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e06b      	b.n	8001d24 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 fa81 	bl	8002154 <RTC_EnterInitMode>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e060      	b.n	8001d24 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0207 	bic.w	r2, r2, #7
 8001c70:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <HAL_RTC_Init+0x128>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a2b      	ldr	r2, [pc, #172]	; (8001d2c <HAL_RTC_Init+0x128>)
 8001c80:	f023 0301 	bic.w	r3, r3, #1
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001c86:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <HAL_RTC_Init+0x128>)
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	4926      	ldr	r1, [pc, #152]	; (8001d2c <HAL_RTC_Init+0x128>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d003      	beq.n	8001caa <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	e00e      	b.n	8001cc8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f7ff feea 	bl	8001a84 <HAL_RCCEx_GetPeriphCLKFreq>
 8001cb0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d104      	bne.n	8001cc2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2204      	movs	r2, #4
 8001cbc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e030      	b.n	8001d24 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f023 010f 	bic.w	r1, r3, #15
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	0c1a      	lsrs	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0c1b      	lsrs	r3, r3, #16
 8001ce6:	041b      	lsls	r3, r3, #16
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	b291      	uxth	r1, r2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 fa55 	bl	80021a4 <RTC_ExitInitMode>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2204      	movs	r2, #4
 8001d04:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00c      	b.n	8001d24 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001d22:	2300      	movs	r3, #0
  }
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40006c00 	.word	0x40006c00

08001d30 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_RTC_SetTime+0x20>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e080      	b.n	8001e56 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	7c1b      	ldrb	r3, [r3, #16]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_RTC_SetTime+0x30>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e07a      	b.n	8001e56 <HAL_RTC_SetTime+0x126>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2201      	movs	r2, #1
 8001d64:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d113      	bne.n	8001d9a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001d7c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	785b      	ldrb	r3, [r3, #1]
 8001d84:	4619      	mov	r1, r3
 8001d86:	460b      	mov	r3, r1
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	1a5b      	subs	r3, r3, r1
 8001d8c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001d8e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001d94:	4413      	add	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e01e      	b.n	8001dd8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fa28 	bl	80021f4 <RTC_Bcd2ToByte>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001dac:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	785b      	ldrb	r3, [r3, #1]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fa1d 	bl	80021f4 <RTC_Bcd2ToByte>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001dc6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	789b      	ldrb	r3, [r3, #2]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fa11 	bl	80021f4 <RTC_Bcd2ToByte>
 8001dd2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001dd4:	4423      	add	r3, r4
 8001dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001dd8:	6979      	ldr	r1, [r7, #20]
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f953 	bl	8002086 <RTC_WriteTimeCounter>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2204      	movs	r2, #4
 8001dea:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e02f      	b.n	8001e56 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0205 	bic.w	r2, r2, #5
 8001e04:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f964 	bl	80020d4 <RTC_ReadAlarmCounter>
 8001e0c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e14:	d018      	beq.n	8001e48 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d214      	bcs.n	8001e48 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001e24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e28:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001e2a:	6939      	ldr	r1, [r7, #16]
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 f96a 	bl	8002106 <RTC_WriteAlarmCounter>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d007      	beq.n	8001e48 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e006      	b.n	8001e56 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
  }
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd90      	pop	{r4, r7, pc}
	...

08001e60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	2300      	movs	r3, #0
 8001e72:	61bb      	str	r3, [r7, #24]
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_RTC_SetDate+0x24>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e097      	b.n	8001fb8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	7c1b      	ldrb	r3, [r3, #16]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_RTC_SetDate+0x34>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e091      	b.n	8001fb8 <HAL_RTC_SetDate+0x158>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	78da      	ldrb	r2, [r3, #3]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	785a      	ldrb	r2, [r3, #1]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	789a      	ldrb	r2, [r3, #2]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	739a      	strb	r2, [r3, #14]
 8001ebe:	e01a      	b.n	8001ef6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	78db      	ldrb	r3, [r3, #3]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 f995 	bl	80021f4 <RTC_Bcd2ToByte>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	785b      	ldrb	r3, [r3, #1]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f98c 	bl	80021f4 <RTC_Bcd2ToByte>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	789b      	ldrb	r3, [r3, #2]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 f983 	bl	80021f4 <RTC_Bcd2ToByte>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	7bdb      	ldrb	r3, [r3, #15]
 8001efa:	4618      	mov	r0, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	7b59      	ldrb	r1, [r3, #13]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	7b9b      	ldrb	r3, [r3, #14]
 8001f04:	461a      	mov	r2, r3
 8001f06:	f000 f993 	bl	8002230 <RTC_WeekDayNum>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	7b1a      	ldrb	r2, [r3, #12]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f883 	bl	8002026 <RTC_ReadTimeCounter>
 8001f20:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <HAL_RTC_SetDate+0x160>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	0adb      	lsrs	r3, r3, #11
 8001f2c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b18      	cmp	r3, #24
 8001f32:	d93a      	bls.n	8001faa <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	4a23      	ldr	r2, [pc, #140]	; (8001fc4 <HAL_RTC_SetDate+0x164>)
 8001f38:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <HAL_RTC_SetDate+0x168>)
 8001f40:	fb02 f303 	mul.w	r3, r2, r3
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001f4a:	69f9      	ldr	r1, [r7, #28]
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f89a 	bl	8002086 <RTC_WriteTimeCounter>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e027      	b.n	8001fb8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 f8b3 	bl	80020d4 <RTC_ReadAlarmCounter>
 8001f6e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f76:	d018      	beq.n	8001faa <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d214      	bcs.n	8001faa <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001f86:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f8a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001f8c:	69b9      	ldr	r1, [r7, #24]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f8b9 	bl	8002106 <RTC_WriteAlarmCounter>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d007      	beq.n	8001faa <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e006      	b.n	8001fb8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	91a2b3c5 	.word	0x91a2b3c5
 8001fc4:	aaaaaaab 	.word	0xaaaaaaab
 8001fc8:	00015180 	.word	0x00015180

08001fcc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e01d      	b.n	800201e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0208 	bic.w	r2, r2, #8
 8001ff0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001ff2:	f7fe fd99 	bl	8000b28 <HAL_GetTick>
 8001ff6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001ff8:	e009      	b.n	800200e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001ffa:	f7fe fd95 	bl	8000b28 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002008:	d901      	bls.n	800200e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e007      	b.n	800201e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ee      	beq.n	8001ffa <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002026:	b480      	push	{r7}
 8002028:	b087      	sub	sp, #28
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	827b      	strh	r3, [r7, #18]
 8002032:	2300      	movs	r3, #0
 8002034:	823b      	strh	r3, [r7, #16]
 8002036:	2300      	movs	r3, #0
 8002038:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002056:	8a7a      	ldrh	r2, [r7, #18]
 8002058:	8a3b      	ldrh	r3, [r7, #16]
 800205a:	429a      	cmp	r2, r3
 800205c:	d008      	beq.n	8002070 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800205e:	8a3b      	ldrh	r3, [r7, #16]
 8002060:	041a      	lsls	r2, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	b29b      	uxth	r3, r3
 800206a:	4313      	orrs	r3, r2
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	e004      	b.n	800207a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002070:	8a7b      	ldrh	r3, [r7, #18]
 8002072:	041a      	lsls	r2, r3, #16
 8002074:	89fb      	ldrh	r3, [r7, #14]
 8002076:	4313      	orrs	r3, r2
 8002078:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800207a:	697b      	ldr	r3, [r7, #20]
}
 800207c:	4618      	mov	r0, r3
 800207e:	371c      	adds	r7, #28
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f85d 	bl	8002154 <RTC_EnterInitMode>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e011      	b.n	80020ca <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	0c12      	lsrs	r2, r2, #16
 80020ae:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	b292      	uxth	r2, r2
 80020b8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f872 	bl	80021a4 <RTC_ExitInitMode>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	81fb      	strh	r3, [r7, #14]
 80020e0:	2300      	movs	r3, #0
 80020e2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80020f4:	89fb      	ldrh	r3, [r7, #14]
 80020f6:	041a      	lsls	r2, r3, #16
 80020f8:	89bb      	ldrh	r3, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f81d 	bl	8002154 <RTC_EnterInitMode>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	e011      	b.n	800214a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	0c12      	lsrs	r2, r2, #16
 800212e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	b292      	uxth	r2, r2
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f832 	bl	80021a4 <RTC_ExitInitMode>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002160:	f7fe fce2 	bl	8000b28 <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002166:	e009      	b.n	800217c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002168:	f7fe fcde 	bl	8000b28 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002176:	d901      	bls.n	800217c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e00f      	b.n	800219c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0ee      	beq.n	8002168 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0210 	orr.w	r2, r2, #16
 8002198:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0210 	bic.w	r2, r2, #16
 80021be:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80021c0:	f7fe fcb2 	bl	8000b28 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80021c6:	e009      	b.n	80021dc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80021c8:	f7fe fcae 	bl	8000b28 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021d6:	d901      	bls.n	80021dc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e007      	b.n	80021ec <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0ee      	beq.n	80021c8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	b2da      	uxtb	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4413      	add	r3, r2
 8002222:	b2db      	uxtb	r3, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
	...

08002230 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
 800223c:	4613      	mov	r3, r2
 800223e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800224e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d82d      	bhi.n	80022b2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	4a2c      	ldr	r2, [pc, #176]	; (8002314 <RTC_WeekDayNum+0xe4>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	085a      	lsrs	r2, r3, #1
 800226a:	78bb      	ldrb	r3, [r7, #2]
 800226c:	441a      	add	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	441a      	add	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	3b01      	subs	r3, #1
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	441a      	add	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	3b01      	subs	r3, #1
 800227e:	4926      	ldr	r1, [pc, #152]	; (8002318 <RTC_WeekDayNum+0xe8>)
 8002280:	fba1 1303 	umull	r1, r3, r1, r3
 8002284:	095b      	lsrs	r3, r3, #5
 8002286:	1ad2      	subs	r2, r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	3b01      	subs	r3, #1
 800228c:	4922      	ldr	r1, [pc, #136]	; (8002318 <RTC_WeekDayNum+0xe8>)
 800228e:	fba1 1303 	umull	r1, r3, r1, r3
 8002292:	09db      	lsrs	r3, r3, #7
 8002294:	4413      	add	r3, r2
 8002296:	1d1a      	adds	r2, r3, #4
 8002298:	4b20      	ldr	r3, [pc, #128]	; (800231c <RTC_WeekDayNum+0xec>)
 800229a:	fba3 1302 	umull	r1, r3, r3, r2
 800229e:	1ad1      	subs	r1, r2, r3
 80022a0:	0849      	lsrs	r1, r1, #1
 80022a2:	440b      	add	r3, r1
 80022a4:	0899      	lsrs	r1, r3, #2
 80022a6:	460b      	mov	r3, r1
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	1a5b      	subs	r3, r3, r1
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e029      	b.n	8002306 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <RTC_WeekDayNum+0xe4>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	085a      	lsrs	r2, r3, #1
 80022c6:	78bb      	ldrb	r3, [r7, #2]
 80022c8:	441a      	add	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	441a      	add	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	441a      	add	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4910      	ldr	r1, [pc, #64]	; (8002318 <RTC_WeekDayNum+0xe8>)
 80022d8:	fba1 1303 	umull	r1, r3, r1, r3
 80022dc:	095b      	lsrs	r3, r3, #5
 80022de:	1ad2      	subs	r2, r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	490d      	ldr	r1, [pc, #52]	; (8002318 <RTC_WeekDayNum+0xe8>)
 80022e4:	fba1 1303 	umull	r1, r3, r1, r3
 80022e8:	09db      	lsrs	r3, r3, #7
 80022ea:	4413      	add	r3, r2
 80022ec:	1c9a      	adds	r2, r3, #2
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <RTC_WeekDayNum+0xec>)
 80022f0:	fba3 1302 	umull	r1, r3, r3, r2
 80022f4:	1ad1      	subs	r1, r2, r3
 80022f6:	0849      	lsrs	r1, r1, #1
 80022f8:	440b      	add	r3, r1
 80022fa:	0899      	lsrs	r1, r3, #2
 80022fc:	460b      	mov	r3, r1
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	1a5b      	subs	r3, r3, r1
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	b2db      	uxtb	r3, r3
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	38e38e39 	.word	0x38e38e39
 8002318:	51eb851f 	.word	0x51eb851f
 800231c:	24924925 	.word	0x24924925

08002320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e041      	b.n	80023b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe fade 	bl	8000908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3304      	adds	r3, #4
 800235c:	4619      	mov	r1, r3
 800235e:	4610      	mov	r0, r2
 8002360:	f000 faca 	bl	80028f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d001      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e03a      	b.n	800244e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a18      	ldr	r2, [pc, #96]	; (8002458 <HAL_TIM_Base_Start_IT+0x98>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00e      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0x58>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002402:	d009      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0x58>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <HAL_TIM_Base_Start_IT+0x9c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d004      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0x58>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a13      	ldr	r2, [pc, #76]	; (8002460 <HAL_TIM_Base_Start_IT+0xa0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d111      	bne.n	800243c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b06      	cmp	r3, #6
 8002428:	d010      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800243a:	e007      	b.n	800244c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	40012c00 	.word	0x40012c00
 800245c:	40000400 	.word	0x40000400
 8002460:	40000800 	.word	0x40000800

08002464 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e041      	b.n	80024fc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f839 	bl	8002504 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3304      	adds	r3, #4
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f000 fa27 	bl	80028f8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0208 	bic.w	r2, r2, #8
 80024b8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6819      	ldr	r1, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b02      	cmp	r3, #2
 800252a:	d122      	bne.n	8002572 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d11b      	bne.n	8002572 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f06f 0202 	mvn.w	r2, #2
 8002542:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f9b1 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 800255e:	e005      	b.n	800256c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f9a4 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f9b3 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b04      	cmp	r3, #4
 800257e:	d122      	bne.n	80025c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b04      	cmp	r3, #4
 800258c:	d11b      	bne.n	80025c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f06f 0204 	mvn.w	r2, #4
 8002596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f987 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 80025b2:	e005      	b.n	80025c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f97a 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f989 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d122      	bne.n	800261a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d11b      	bne.n	800261a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f06f 0208 	mvn.w	r2, #8
 80025ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2204      	movs	r2, #4
 80025f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f95d 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 8002606:	e005      	b.n	8002614 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f950 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f95f 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b10      	cmp	r3, #16
 8002626:	d122      	bne.n	800266e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b10      	cmp	r3, #16
 8002634:	d11b      	bne.n	800266e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f06f 0210 	mvn.w	r2, #16
 800263e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2208      	movs	r2, #8
 8002644:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f933 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 800265a:	e005      	b.n	8002668 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f926 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f935 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10e      	bne.n	800269a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d107      	bne.n	800269a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f06f 0201 	mvn.w	r2, #1
 8002692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7fe f8c3 	bl	8000820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d10e      	bne.n	80026c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b2:	2b80      	cmp	r3, #128	; 0x80
 80026b4:	d107      	bne.n	80026c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fa78 	bl	8002bb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d10e      	bne.n	80026f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	2b40      	cmp	r3, #64	; 0x40
 80026e0:	d107      	bne.n	80026f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f8f9 	bl	80028e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d10e      	bne.n	800271e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b20      	cmp	r3, #32
 800270c:	d107      	bne.n	800271e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f06f 0220 	mvn.w	r2, #32
 8002716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fa43 	bl	8002ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_TIM_ConfigClockSource+0x18>
 800273a:	2302      	movs	r3, #2
 800273c:	e0b3      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x180>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2202      	movs	r2, #2
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800275c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002764:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002776:	d03e      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0xd0>
 8002778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277c:	f200 8087 	bhi.w	800288e <HAL_TIM_ConfigClockSource+0x168>
 8002780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002784:	f000 8085 	beq.w	8002892 <HAL_TIM_ConfigClockSource+0x16c>
 8002788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278c:	d87f      	bhi.n	800288e <HAL_TIM_ConfigClockSource+0x168>
 800278e:	2b70      	cmp	r3, #112	; 0x70
 8002790:	d01a      	beq.n	80027c8 <HAL_TIM_ConfigClockSource+0xa2>
 8002792:	2b70      	cmp	r3, #112	; 0x70
 8002794:	d87b      	bhi.n	800288e <HAL_TIM_ConfigClockSource+0x168>
 8002796:	2b60      	cmp	r3, #96	; 0x60
 8002798:	d050      	beq.n	800283c <HAL_TIM_ConfigClockSource+0x116>
 800279a:	2b60      	cmp	r3, #96	; 0x60
 800279c:	d877      	bhi.n	800288e <HAL_TIM_ConfigClockSource+0x168>
 800279e:	2b50      	cmp	r3, #80	; 0x50
 80027a0:	d03c      	beq.n	800281c <HAL_TIM_ConfigClockSource+0xf6>
 80027a2:	2b50      	cmp	r3, #80	; 0x50
 80027a4:	d873      	bhi.n	800288e <HAL_TIM_ConfigClockSource+0x168>
 80027a6:	2b40      	cmp	r3, #64	; 0x40
 80027a8:	d058      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x136>
 80027aa:	2b40      	cmp	r3, #64	; 0x40
 80027ac:	d86f      	bhi.n	800288e <HAL_TIM_ConfigClockSource+0x168>
 80027ae:	2b30      	cmp	r3, #48	; 0x30
 80027b0:	d064      	beq.n	800287c <HAL_TIM_ConfigClockSource+0x156>
 80027b2:	2b30      	cmp	r3, #48	; 0x30
 80027b4:	d86b      	bhi.n	800288e <HAL_TIM_ConfigClockSource+0x168>
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	d060      	beq.n	800287c <HAL_TIM_ConfigClockSource+0x156>
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d867      	bhi.n	800288e <HAL_TIM_ConfigClockSource+0x168>
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d05c      	beq.n	800287c <HAL_TIM_ConfigClockSource+0x156>
 80027c2:	2b10      	cmp	r3, #16
 80027c4:	d05a      	beq.n	800287c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027c6:	e062      	b.n	800288e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	6899      	ldr	r1, [r3, #8]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f000 f967 	bl	8002aaa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	609a      	str	r2, [r3, #8]
      break;
 80027f4:	e04e      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6899      	ldr	r1, [r3, #8]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f000 f950 	bl	8002aaa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002818:	609a      	str	r2, [r3, #8]
      break;
 800281a:	e03b      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	461a      	mov	r2, r3
 800282a:	f000 f8c7 	bl	80029bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2150      	movs	r1, #80	; 0x50
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f91e 	bl	8002a76 <TIM_ITRx_SetConfig>
      break;
 800283a:	e02b      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	461a      	mov	r2, r3
 800284a:	f000 f8e5 	bl	8002a18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2160      	movs	r1, #96	; 0x60
 8002854:	4618      	mov	r0, r3
 8002856:	f000 f90e 	bl	8002a76 <TIM_ITRx_SetConfig>
      break;
 800285a:	e01b      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	461a      	mov	r2, r3
 800286a:	f000 f8a7 	bl	80029bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2140      	movs	r1, #64	; 0x40
 8002874:	4618      	mov	r0, r3
 8002876:	f000 f8fe 	bl	8002a76 <TIM_ITRx_SetConfig>
      break;
 800287a:	e00b      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f000 f8f5 	bl	8002a76 <TIM_ITRx_SetConfig>
        break;
 800288c:	e002      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800288e:	bf00      	nop
 8002890:	e000      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
	...

080028f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a29      	ldr	r2, [pc, #164]	; (80029b0 <TIM_Base_SetConfig+0xb8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00b      	beq.n	8002928 <TIM_Base_SetConfig+0x30>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002916:	d007      	beq.n	8002928 <TIM_Base_SetConfig+0x30>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a26      	ldr	r2, [pc, #152]	; (80029b4 <TIM_Base_SetConfig+0xbc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d003      	beq.n	8002928 <TIM_Base_SetConfig+0x30>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a25      	ldr	r2, [pc, #148]	; (80029b8 <TIM_Base_SetConfig+0xc0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d108      	bne.n	800293a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <TIM_Base_SetConfig+0xb8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00b      	beq.n	800295a <TIM_Base_SetConfig+0x62>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002948:	d007      	beq.n	800295a <TIM_Base_SetConfig+0x62>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a19      	ldr	r2, [pc, #100]	; (80029b4 <TIM_Base_SetConfig+0xbc>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <TIM_Base_SetConfig+0x62>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <TIM_Base_SetConfig+0xc0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d108      	bne.n	800296c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <TIM_Base_SetConfig+0xb8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d103      	bne.n	80029a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	615a      	str	r2, [r3, #20]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40000400 	.word	0x40000400
 80029b8:	40000800 	.word	0x40000800

080029bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f023 0201 	bic.w	r2, r3, #1
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f023 030a 	bic.w	r3, r3, #10
 80029f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	621a      	str	r2, [r3, #32]
}
 8002a0e:	bf00      	nop
 8002a10:	371c      	adds	r7, #28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f023 0210 	bic.w	r2, r3, #16
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	031b      	lsls	r3, r3, #12
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	621a      	str	r2, [r3, #32]
}
 8002a6c:	bf00      	nop
 8002a6e:	371c      	adds	r7, #28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b085      	sub	sp, #20
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f043 0307 	orr.w	r3, r3, #7
 8002a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	609a      	str	r2, [r3, #8]
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b087      	sub	sp, #28
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	021a      	lsls	r2, r3, #8
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	609a      	str	r2, [r3, #8]
}
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e046      	b.n	8002b8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00e      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4c:	d009      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a10      	ldr	r2, [pc, #64]	; (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d10c      	bne.n	8002b7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	40012c00 	.word	0x40012c00
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	40000800 	.word	0x40000800

08002ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bda:	2b84      	cmp	r3, #132	; 0x84
 8002bdc:	d005      	beq.n	8002bea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002bde:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4413      	add	r3, r2
 8002be6:	3303      	adds	r3, #3
 8002be8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002bea:	68fb      	ldr	r3, [r7, #12]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002bfa:	f000 fae7 	bl	80031cc <vTaskStartScheduler>
  
  return osOK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d020      	beq.n	8002c58 <osThreadCreate+0x54>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01c      	beq.n	8002c58 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685c      	ldr	r4, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681d      	ldr	r5, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691e      	ldr	r6, [r3, #16]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ffc9 	bl	8002bc8 <makeFreeRtosPriority>
 8002c36:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c40:	9202      	str	r2, [sp, #8]
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	9100      	str	r1, [sp, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	4632      	mov	r2, r6
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	f000 f8e8 	bl	8002e22 <xTaskCreateStatic>
 8002c52:	4603      	mov	r3, r0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e01c      	b.n	8002c92 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685c      	ldr	r4, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c64:	b29e      	uxth	r6, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ffab 	bl	8002bc8 <makeFreeRtosPriority>
 8002c72:	4602      	mov	r2, r0
 8002c74:	f107 030c 	add.w	r3, r7, #12
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	9200      	str	r2, [sp, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	4632      	mov	r2, r6
 8002c80:	4629      	mov	r1, r5
 8002c82:	4620      	mov	r0, r4
 8002c84:	f000 f929 	bl	8002eda <xTaskCreate>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d001      	beq.n	8002c92 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e000      	b.n	8002c94 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002c92:	68fb      	ldr	r3, [r7, #12]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c9c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <osDelay+0x16>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	e000      	b.n	8002cb4 <osDelay+0x18>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fa55 	bl	8003164 <vTaskDelay>
  
  return osOK;
 8002cba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f103 0208 	add.w	r2, r3, #8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f103 0208 	add.w	r2, r3, #8
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f103 0208 	add.w	r2, r3, #8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	601a      	str	r2, [r3, #0]
}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d76:	d103      	bne.n	8002d80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	e00c      	b.n	8002d9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3308      	adds	r3, #8
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	e002      	b.n	8002d8e <vListInsert+0x2e>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d2f6      	bcs.n	8002d88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	601a      	str	r2, [r3, #0]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6892      	ldr	r2, [r2, #8]
 8002de6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6852      	ldr	r2, [r2, #4]
 8002df0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d103      	bne.n	8002e04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	1e5a      	subs	r2, r3, #1
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b08e      	sub	sp, #56	; 0x38
 8002e26:	af04      	add	r7, sp, #16
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e48:	bf00      	nop
 8002e4a:	e7fe      	b.n	8002e4a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <xTaskCreateStatic+0x46>
	__asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	61fb      	str	r3, [r7, #28]
}
 8002e64:	bf00      	nop
 8002e66:	e7fe      	b.n	8002e66 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e68:	23b4      	movs	r3, #180	; 0xb4
 8002e6a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	2bb4      	cmp	r3, #180	; 0xb4
 8002e70:	d00a      	beq.n	8002e88 <xTaskCreateStatic+0x66>
	__asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	61bb      	str	r3, [r7, #24]
}
 8002e84:	bf00      	nop
 8002e86:	e7fe      	b.n	8002e86 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d01e      	beq.n	8002ecc <xTaskCreateStatic+0xaa>
 8002e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01b      	beq.n	8002ecc <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	9303      	str	r3, [sp, #12]
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	9302      	str	r3, [sp, #8]
 8002eae:	f107 0314 	add.w	r3, r7, #20
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f850 	bl	8002f64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ec6:	f000 f8e3 	bl	8003090 <prvAddNewTaskToReadyList>
 8002eca:	e001      	b.n	8002ed0 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ed0:	697b      	ldr	r3, [r7, #20]
	}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3728      	adds	r7, #40	; 0x28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b08c      	sub	sp, #48	; 0x30
 8002ede:	af04      	add	r7, sp, #16
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fe96 	bl	8003c20 <pvPortMalloc>
 8002ef4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00e      	beq.n	8002f1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002efc:	20b4      	movs	r0, #180	; 0xb4
 8002efe:	f000 fe8f 	bl	8003c20 <pvPortMalloc>
 8002f02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f10:	e005      	b.n	8002f1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f12:	6978      	ldr	r0, [r7, #20]
 8002f14:	f000 ff48 	bl	8003da8 <vPortFree>
 8002f18:	e001      	b.n	8002f1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d017      	beq.n	8002f54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f2c:	88fa      	ldrh	r2, [r7, #6]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	9303      	str	r3, [sp, #12]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	9302      	str	r3, [sp, #8]
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f80e 	bl	8002f64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f48:	69f8      	ldr	r0, [r7, #28]
 8002f4a:	f000 f8a1 	bl	8003090 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	e002      	b.n	8002f5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f54:	f04f 33ff 	mov.w	r3, #4294967295
 8002f58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f5a:	69bb      	ldr	r3, [r7, #24]
	}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f023 0307 	bic.w	r3, r3, #7
 8002f8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <prvInitialiseNewTask+0x48>
	__asm volatile
 8002f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	617b      	str	r3, [r7, #20]
}
 8002fa8:	bf00      	nop
 8002faa:	e7fe      	b.n	8002faa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	e012      	b.n	8002fd8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	7819      	ldrb	r1, [r3, #0]
 8002fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3334      	adds	r3, #52	; 0x34
 8002fc2:	460a      	mov	r2, r1
 8002fc4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	4413      	add	r3, r2
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d006      	beq.n	8002fe0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	61fb      	str	r3, [r7, #28]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b0f      	cmp	r3, #15
 8002fdc:	d9e9      	bls.n	8002fb2 <prvInitialiseNewTask+0x4e>
 8002fde:	e000      	b.n	8002fe2 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002fe0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	2b06      	cmp	r3, #6
 8002fee:	d901      	bls.n	8002ff4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ff0:	2306      	movs	r3, #6
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ffe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	2200      	movs	r2, #0
 8003004:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	3304      	adds	r3, #4
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fe79 	bl	8002d02 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	3318      	adds	r3, #24
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fe74 	bl	8002d02 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800301e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	f1c3 0207 	rsb	r2, r3, #7
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800302e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003032:	2200      	movs	r2, #0
 8003034:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	2200      	movs	r2, #0
 800303c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	334c      	adds	r3, #76	; 0x4c
 8003044:	2260      	movs	r2, #96	; 0x60
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f000 ffe7 	bl	800401c <memset>
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	4a0c      	ldr	r2, [pc, #48]	; (8003084 <prvInitialiseNewTask+0x120>)
 8003052:	651a      	str	r2, [r3, #80]	; 0x50
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <prvInitialiseNewTask+0x124>)
 8003058:	655a      	str	r2, [r3, #84]	; 0x54
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	4a0b      	ldr	r2, [pc, #44]	; (800308c <prvInitialiseNewTask+0x128>)
 800305e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	68f9      	ldr	r1, [r7, #12]
 8003064:	69b8      	ldr	r0, [r7, #24]
 8003066:	f000 fc29 	bl	80038bc <pxPortInitialiseStack>
 800306a:	4602      	mov	r2, r0
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800307a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800307c:	bf00      	nop
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	0800424c 	.word	0x0800424c
 8003088:	0800426c 	.word	0x0800426c
 800308c:	0800422c 	.word	0x0800422c

08003090 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003098:	f000 fd00 	bl	8003a9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800309c:	4b2a      	ldr	r3, [pc, #168]	; (8003148 <prvAddNewTaskToReadyList+0xb8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	4a29      	ldr	r2, [pc, #164]	; (8003148 <prvAddNewTaskToReadyList+0xb8>)
 80030a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80030a6:	4b29      	ldr	r3, [pc, #164]	; (800314c <prvAddNewTaskToReadyList+0xbc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80030ae:	4a27      	ldr	r2, [pc, #156]	; (800314c <prvAddNewTaskToReadyList+0xbc>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030b4:	4b24      	ldr	r3, [pc, #144]	; (8003148 <prvAddNewTaskToReadyList+0xb8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d110      	bne.n	80030de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80030bc:	f000 fad2 	bl	8003664 <prvInitialiseTaskLists>
 80030c0:	e00d      	b.n	80030de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80030c2:	4b23      	ldr	r3, [pc, #140]	; (8003150 <prvAddNewTaskToReadyList+0xc0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030ca:	4b20      	ldr	r3, [pc, #128]	; (800314c <prvAddNewTaskToReadyList+0xbc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d802      	bhi.n	80030de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80030d8:	4a1c      	ldr	r2, [pc, #112]	; (800314c <prvAddNewTaskToReadyList+0xbc>)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80030de:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <prvAddNewTaskToReadyList+0xc4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3301      	adds	r3, #1
 80030e4:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <prvAddNewTaskToReadyList+0xc4>)
 80030e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	2201      	movs	r2, #1
 80030ee:	409a      	lsls	r2, r3
 80030f0:	4b19      	ldr	r3, [pc, #100]	; (8003158 <prvAddNewTaskToReadyList+0xc8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	4a18      	ldr	r2, [pc, #96]	; (8003158 <prvAddNewTaskToReadyList+0xc8>)
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4a15      	ldr	r2, [pc, #84]	; (800315c <prvAddNewTaskToReadyList+0xcc>)
 8003108:	441a      	add	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3304      	adds	r3, #4
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f7ff fe02 	bl	8002d1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003116:	f000 fcf1 	bl	8003afc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <prvAddNewTaskToReadyList+0xc0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00e      	beq.n	8003140 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <prvAddNewTaskToReadyList+0xbc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	429a      	cmp	r2, r3
 800312e:	d207      	bcs.n	8003140 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <prvAddNewTaskToReadyList+0xd0>)
 8003132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	200004f8 	.word	0x200004f8
 800314c:	200003f8 	.word	0x200003f8
 8003150:	20000504 	.word	0x20000504
 8003154:	20000514 	.word	0x20000514
 8003158:	20000500 	.word	0x20000500
 800315c:	200003fc 	.word	0x200003fc
 8003160:	e000ed04 	.word	0xe000ed04

08003164 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d017      	beq.n	80031a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <vTaskDelay+0x60>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <vTaskDelay+0x30>
	__asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	60bb      	str	r3, [r7, #8]
}
 8003190:	bf00      	nop
 8003192:	e7fe      	b.n	8003192 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003194:	f000 f884 	bl	80032a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003198:	2100      	movs	r1, #0
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fb28 	bl	80037f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80031a0:	f000 f88c 	bl	80032bc <xTaskResumeAll>
 80031a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <vTaskDelay+0x64>)
 80031ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000520 	.word	0x20000520
 80031c8:	e000ed04 	.word	0xe000ed04

080031cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	; 0x28
 80031d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80031da:	463a      	mov	r2, r7
 80031dc:	1d39      	adds	r1, r7, #4
 80031de:	f107 0308 	add.w	r3, r7, #8
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fc ffb4 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031e8:	6839      	ldr	r1, [r7, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	9202      	str	r2, [sp, #8]
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	2300      	movs	r3, #0
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	2300      	movs	r3, #0
 80031f8:	460a      	mov	r2, r1
 80031fa:	4921      	ldr	r1, [pc, #132]	; (8003280 <vTaskStartScheduler+0xb4>)
 80031fc:	4821      	ldr	r0, [pc, #132]	; (8003284 <vTaskStartScheduler+0xb8>)
 80031fe:	f7ff fe10 	bl	8002e22 <xTaskCreateStatic>
 8003202:	4603      	mov	r3, r0
 8003204:	4a20      	ldr	r2, [pc, #128]	; (8003288 <vTaskStartScheduler+0xbc>)
 8003206:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003208:	4b1f      	ldr	r3, [pc, #124]	; (8003288 <vTaskStartScheduler+0xbc>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003210:	2301      	movs	r3, #1
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	e001      	b.n	800321a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d11b      	bne.n	8003258 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	613b      	str	r3, [r7, #16]
}
 8003232:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003234:	4b15      	ldr	r3, [pc, #84]	; (800328c <vTaskStartScheduler+0xc0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	334c      	adds	r3, #76	; 0x4c
 800323a:	4a15      	ldr	r2, [pc, #84]	; (8003290 <vTaskStartScheduler+0xc4>)
 800323c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800323e:	4b15      	ldr	r3, [pc, #84]	; (8003294 <vTaskStartScheduler+0xc8>)
 8003240:	f04f 32ff 	mov.w	r2, #4294967295
 8003244:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <vTaskStartScheduler+0xcc>)
 8003248:	2201      	movs	r2, #1
 800324a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800324c:	4b13      	ldr	r3, [pc, #76]	; (800329c <vTaskStartScheduler+0xd0>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003252:	f000 fbb1 	bl	80039b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003256:	e00e      	b.n	8003276 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325e:	d10a      	bne.n	8003276 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	60fb      	str	r3, [r7, #12]
}
 8003272:	bf00      	nop
 8003274:	e7fe      	b.n	8003274 <vTaskStartScheduler+0xa8>
}
 8003276:	bf00      	nop
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	0800420c 	.word	0x0800420c
 8003284:	08003635 	.word	0x08003635
 8003288:	2000051c 	.word	0x2000051c
 800328c:	200003f8 	.word	0x200003f8
 8003290:	20000010 	.word	0x20000010
 8003294:	20000518 	.word	0x20000518
 8003298:	20000504 	.word	0x20000504
 800329c:	200004fc 	.word	0x200004fc

080032a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80032a4:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <vTaskSuspendAll+0x18>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	4a03      	ldr	r2, [pc, #12]	; (80032b8 <vTaskSuspendAll+0x18>)
 80032ac:	6013      	str	r3, [r2, #0]
}
 80032ae:	bf00      	nop
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000520 	.word	0x20000520

080032bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80032ca:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <xTaskResumeAll+0x114>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10a      	bne.n	80032e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80032d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d6:	f383 8811 	msr	BASEPRI, r3
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	603b      	str	r3, [r7, #0]
}
 80032e4:	bf00      	nop
 80032e6:	e7fe      	b.n	80032e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80032e8:	f000 fbd8 	bl	8003a9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80032ec:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <xTaskResumeAll+0x114>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	4a37      	ldr	r2, [pc, #220]	; (80033d0 <xTaskResumeAll+0x114>)
 80032f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032f6:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <xTaskResumeAll+0x114>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d161      	bne.n	80033c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032fe:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <xTaskResumeAll+0x118>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d05d      	beq.n	80033c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003306:	e02e      	b.n	8003366 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003308:	4b33      	ldr	r3, [pc, #204]	; (80033d8 <xTaskResumeAll+0x11c>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3318      	adds	r3, #24
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fd5b 	bl	8002dd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3304      	adds	r3, #4
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fd56 	bl	8002dd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	2201      	movs	r2, #1
 800332a:	409a      	lsls	r2, r3
 800332c:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <xTaskResumeAll+0x120>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4313      	orrs	r3, r2
 8003332:	4a2a      	ldr	r2, [pc, #168]	; (80033dc <xTaskResumeAll+0x120>)
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4a27      	ldr	r2, [pc, #156]	; (80033e0 <xTaskResumeAll+0x124>)
 8003344:	441a      	add	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3304      	adds	r3, #4
 800334a:	4619      	mov	r1, r3
 800334c:	4610      	mov	r0, r2
 800334e:	f7ff fce4 	bl	8002d1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003356:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <xTaskResumeAll+0x128>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	429a      	cmp	r2, r3
 800335e:	d302      	bcc.n	8003366 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003360:	4b21      	ldr	r3, [pc, #132]	; (80033e8 <xTaskResumeAll+0x12c>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003366:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <xTaskResumeAll+0x11c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1cc      	bne.n	8003308 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003374:	f000 fa18 	bl	80037a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003378:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <xTaskResumeAll+0x130>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d010      	beq.n	80033a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003384:	f000 f836 	bl	80033f4 <xTaskIncrementTick>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800338e:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <xTaskResumeAll+0x12c>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3b01      	subs	r3, #1
 8003398:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f1      	bne.n	8003384 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80033a0:	4b12      	ldr	r3, [pc, #72]	; (80033ec <xTaskResumeAll+0x130>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033a6:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <xTaskResumeAll+0x12c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033ae:	2301      	movs	r3, #1
 80033b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033b2:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <xTaskResumeAll+0x134>)
 80033b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033c2:	f000 fb9b 	bl	8003afc <vPortExitCritical>

	return xAlreadyYielded;
 80033c6:	68bb      	ldr	r3, [r7, #8]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20000520 	.word	0x20000520
 80033d4:	200004f8 	.word	0x200004f8
 80033d8:	200004b8 	.word	0x200004b8
 80033dc:	20000500 	.word	0x20000500
 80033e0:	200003fc 	.word	0x200003fc
 80033e4:	200003f8 	.word	0x200003f8
 80033e8:	2000050c 	.word	0x2000050c
 80033ec:	20000508 	.word	0x20000508
 80033f0:	e000ed04 	.word	0xe000ed04

080033f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033fe:	4b51      	ldr	r3, [pc, #324]	; (8003544 <xTaskIncrementTick+0x150>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	f040 808d 	bne.w	8003522 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003408:	4b4f      	ldr	r3, [pc, #316]	; (8003548 <xTaskIncrementTick+0x154>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003410:	4a4d      	ldr	r2, [pc, #308]	; (8003548 <xTaskIncrementTick+0x154>)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d120      	bne.n	800345e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800341c:	4b4b      	ldr	r3, [pc, #300]	; (800354c <xTaskIncrementTick+0x158>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <xTaskIncrementTick+0x48>
	__asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	603b      	str	r3, [r7, #0]
}
 8003438:	bf00      	nop
 800343a:	e7fe      	b.n	800343a <xTaskIncrementTick+0x46>
 800343c:	4b43      	ldr	r3, [pc, #268]	; (800354c <xTaskIncrementTick+0x158>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	4b43      	ldr	r3, [pc, #268]	; (8003550 <xTaskIncrementTick+0x15c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a41      	ldr	r2, [pc, #260]	; (800354c <xTaskIncrementTick+0x158>)
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	4a41      	ldr	r2, [pc, #260]	; (8003550 <xTaskIncrementTick+0x15c>)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b40      	ldr	r3, [pc, #256]	; (8003554 <xTaskIncrementTick+0x160>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3301      	adds	r3, #1
 8003456:	4a3f      	ldr	r2, [pc, #252]	; (8003554 <xTaskIncrementTick+0x160>)
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	f000 f9a5 	bl	80037a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800345e:	4b3e      	ldr	r3, [pc, #248]	; (8003558 <xTaskIncrementTick+0x164>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	429a      	cmp	r2, r3
 8003466:	d34d      	bcc.n	8003504 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003468:	4b38      	ldr	r3, [pc, #224]	; (800354c <xTaskIncrementTick+0x158>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <xTaskIncrementTick+0x82>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <xTaskIncrementTick+0x84>
 8003476:	2300      	movs	r3, #0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d004      	beq.n	8003486 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800347c:	4b36      	ldr	r3, [pc, #216]	; (8003558 <xTaskIncrementTick+0x164>)
 800347e:	f04f 32ff 	mov.w	r2, #4294967295
 8003482:	601a      	str	r2, [r3, #0]
					break;
 8003484:	e03e      	b.n	8003504 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003486:	4b31      	ldr	r3, [pc, #196]	; (800354c <xTaskIncrementTick+0x158>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	d203      	bcs.n	80034a6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800349e:	4a2e      	ldr	r2, [pc, #184]	; (8003558 <xTaskIncrementTick+0x164>)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6013      	str	r3, [r2, #0]
						break;
 80034a4:	e02e      	b.n	8003504 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	3304      	adds	r3, #4
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fc90 	bl	8002dd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	3318      	adds	r3, #24
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fc87 	bl	8002dd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	2201      	movs	r2, #1
 80034c8:	409a      	lsls	r2, r3
 80034ca:	4b24      	ldr	r3, [pc, #144]	; (800355c <xTaskIncrementTick+0x168>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	4a22      	ldr	r2, [pc, #136]	; (800355c <xTaskIncrementTick+0x168>)
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4a1f      	ldr	r2, [pc, #124]	; (8003560 <xTaskIncrementTick+0x16c>)
 80034e2:	441a      	add	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	3304      	adds	r3, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	4610      	mov	r0, r2
 80034ec:	f7ff fc15 	bl	8002d1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f4:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <xTaskIncrementTick+0x170>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d3b4      	bcc.n	8003468 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80034fe:	2301      	movs	r3, #1
 8003500:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003502:	e7b1      	b.n	8003468 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003504:	4b17      	ldr	r3, [pc, #92]	; (8003564 <xTaskIncrementTick+0x170>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350a:	4915      	ldr	r1, [pc, #84]	; (8003560 <xTaskIncrementTick+0x16c>)
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d907      	bls.n	800352c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800351c:	2301      	movs	r3, #1
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	e004      	b.n	800352c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <xTaskIncrementTick+0x174>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3301      	adds	r3, #1
 8003528:	4a0f      	ldr	r2, [pc, #60]	; (8003568 <xTaskIncrementTick+0x174>)
 800352a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800352c:	4b0f      	ldr	r3, [pc, #60]	; (800356c <xTaskIncrementTick+0x178>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003534:	2301      	movs	r3, #1
 8003536:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003538:	697b      	ldr	r3, [r7, #20]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000520 	.word	0x20000520
 8003548:	200004fc 	.word	0x200004fc
 800354c:	200004b0 	.word	0x200004b0
 8003550:	200004b4 	.word	0x200004b4
 8003554:	20000510 	.word	0x20000510
 8003558:	20000518 	.word	0x20000518
 800355c:	20000500 	.word	0x20000500
 8003560:	200003fc 	.word	0x200003fc
 8003564:	200003f8 	.word	0x200003f8
 8003568:	20000508 	.word	0x20000508
 800356c:	2000050c 	.word	0x2000050c

08003570 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003576:	4b29      	ldr	r3, [pc, #164]	; (800361c <vTaskSwitchContext+0xac>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800357e:	4b28      	ldr	r3, [pc, #160]	; (8003620 <vTaskSwitchContext+0xb0>)
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003584:	e044      	b.n	8003610 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003586:	4b26      	ldr	r3, [pc, #152]	; (8003620 <vTaskSwitchContext+0xb0>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800358c:	4b25      	ldr	r3, [pc, #148]	; (8003624 <vTaskSwitchContext+0xb4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	fab3 f383 	clz	r3, r3
 8003598:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800359a:	7afb      	ldrb	r3, [r7, #11]
 800359c:	f1c3 031f 	rsb	r3, r3, #31
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	4921      	ldr	r1, [pc, #132]	; (8003628 <vTaskSwitchContext+0xb8>)
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10a      	bne.n	80035cc <vTaskSwitchContext+0x5c>
	__asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	607b      	str	r3, [r7, #4]
}
 80035c8:	bf00      	nop
 80035ca:	e7fe      	b.n	80035ca <vTaskSwitchContext+0x5a>
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4a14      	ldr	r2, [pc, #80]	; (8003628 <vTaskSwitchContext+0xb8>)
 80035d8:	4413      	add	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	3308      	adds	r3, #8
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d104      	bne.n	80035fc <vTaskSwitchContext+0x8c>
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	4a0a      	ldr	r2, [pc, #40]	; (800362c <vTaskSwitchContext+0xbc>)
 8003604:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <vTaskSwitchContext+0xbc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	334c      	adds	r3, #76	; 0x4c
 800360c:	4a08      	ldr	r2, [pc, #32]	; (8003630 <vTaskSwitchContext+0xc0>)
 800360e:	6013      	str	r3, [r2, #0]
}
 8003610:	bf00      	nop
 8003612:	371c      	adds	r7, #28
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000520 	.word	0x20000520
 8003620:	2000050c 	.word	0x2000050c
 8003624:	20000500 	.word	0x20000500
 8003628:	200003fc 	.word	0x200003fc
 800362c:	200003f8 	.word	0x200003f8
 8003630:	20000010 	.word	0x20000010

08003634 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800363c:	f000 f852 	bl	80036e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003640:	4b06      	ldr	r3, [pc, #24]	; (800365c <prvIdleTask+0x28>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d9f9      	bls.n	800363c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <prvIdleTask+0x2c>)
 800364a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003658:	e7f0      	b.n	800363c <prvIdleTask+0x8>
 800365a:	bf00      	nop
 800365c:	200003fc 	.word	0x200003fc
 8003660:	e000ed04 	.word	0xe000ed04

08003664 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800366a:	2300      	movs	r3, #0
 800366c:	607b      	str	r3, [r7, #4]
 800366e:	e00c      	b.n	800368a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <prvInitialiseTaskLists+0x60>)
 800367c:	4413      	add	r3, r2
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff fb20 	bl	8002cc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3301      	adds	r3, #1
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b06      	cmp	r3, #6
 800368e:	d9ef      	bls.n	8003670 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003690:	480d      	ldr	r0, [pc, #52]	; (80036c8 <prvInitialiseTaskLists+0x64>)
 8003692:	f7ff fb17 	bl	8002cc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003696:	480d      	ldr	r0, [pc, #52]	; (80036cc <prvInitialiseTaskLists+0x68>)
 8003698:	f7ff fb14 	bl	8002cc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800369c:	480c      	ldr	r0, [pc, #48]	; (80036d0 <prvInitialiseTaskLists+0x6c>)
 800369e:	f7ff fb11 	bl	8002cc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036a2:	480c      	ldr	r0, [pc, #48]	; (80036d4 <prvInitialiseTaskLists+0x70>)
 80036a4:	f7ff fb0e 	bl	8002cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036a8:	480b      	ldr	r0, [pc, #44]	; (80036d8 <prvInitialiseTaskLists+0x74>)
 80036aa:	f7ff fb0b 	bl	8002cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <prvInitialiseTaskLists+0x78>)
 80036b0:	4a05      	ldr	r2, [pc, #20]	; (80036c8 <prvInitialiseTaskLists+0x64>)
 80036b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036b4:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <prvInitialiseTaskLists+0x7c>)
 80036b6:	4a05      	ldr	r2, [pc, #20]	; (80036cc <prvInitialiseTaskLists+0x68>)
 80036b8:	601a      	str	r2, [r3, #0]
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	200003fc 	.word	0x200003fc
 80036c8:	20000488 	.word	0x20000488
 80036cc:	2000049c 	.word	0x2000049c
 80036d0:	200004b8 	.word	0x200004b8
 80036d4:	200004cc 	.word	0x200004cc
 80036d8:	200004e4 	.word	0x200004e4
 80036dc:	200004b0 	.word	0x200004b0
 80036e0:	200004b4 	.word	0x200004b4

080036e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036ea:	e019      	b.n	8003720 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80036ec:	f000 f9d6 	bl	8003a9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80036f0:	4b10      	ldr	r3, [pc, #64]	; (8003734 <prvCheckTasksWaitingTermination+0x50>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3304      	adds	r3, #4
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fb67 	bl	8002dd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003702:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <prvCheckTasksWaitingTermination+0x54>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3b01      	subs	r3, #1
 8003708:	4a0b      	ldr	r2, [pc, #44]	; (8003738 <prvCheckTasksWaitingTermination+0x54>)
 800370a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <prvCheckTasksWaitingTermination+0x58>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3b01      	subs	r3, #1
 8003712:	4a0a      	ldr	r2, [pc, #40]	; (800373c <prvCheckTasksWaitingTermination+0x58>)
 8003714:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003716:	f000 f9f1 	bl	8003afc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f810 	bl	8003740 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <prvCheckTasksWaitingTermination+0x58>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e1      	bne.n	80036ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	200004cc 	.word	0x200004cc
 8003738:	200004f8 	.word	0x200004f8
 800373c:	200004e0 	.word	0x200004e0

08003740 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	334c      	adds	r3, #76	; 0x4c
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fc7b 	bl	8004048 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d108      	bne.n	800376e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fb21 	bl	8003da8 <vPortFree>
				vPortFree( pxTCB );
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fb1e 	bl	8003da8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800376c:	e018      	b.n	80037a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d103      	bne.n	8003780 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fb15 	bl	8003da8 <vPortFree>
	}
 800377e:	e00f      	b.n	80037a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003786:	2b02      	cmp	r3, #2
 8003788:	d00a      	beq.n	80037a0 <prvDeleteTCB+0x60>
	__asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	60fb      	str	r3, [r7, #12]
}
 800379c:	bf00      	nop
 800379e:	e7fe      	b.n	800379e <prvDeleteTCB+0x5e>
	}
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037ae:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <prvResetNextTaskUnblockTime+0x40>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <prvResetNextTaskUnblockTime+0x14>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <prvResetNextTaskUnblockTime+0x16>
 80037bc:	2300      	movs	r3, #0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d004      	beq.n	80037cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <prvResetNextTaskUnblockTime+0x44>)
 80037c4:	f04f 32ff 	mov.w	r2, #4294967295
 80037c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037ca:	e008      	b.n	80037de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <prvResetNextTaskUnblockTime+0x40>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4a04      	ldr	r2, [pc, #16]	; (80037ec <prvResetNextTaskUnblockTime+0x44>)
 80037dc:	6013      	str	r3, [r2, #0]
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr
 80037e8:	200004b0 	.word	0x200004b0
 80037ec:	20000518 	.word	0x20000518

080037f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037fa:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003800:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3304      	adds	r3, #4
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fae2 	bl	8002dd0 <uxListRemove>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003812:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	2201      	movs	r2, #1
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43da      	mvns	r2, r3
 8003820:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4013      	ands	r3, r2
 8003826:	4a20      	ldr	r2, [pc, #128]	; (80038a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003828:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d10a      	bne.n	8003848 <prvAddCurrentTaskToDelayedList+0x58>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d007      	beq.n	8003848 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003838:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3304      	adds	r3, #4
 800383e:	4619      	mov	r1, r3
 8003840:	481a      	ldr	r0, [pc, #104]	; (80038ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8003842:	f7ff fa6a 	bl	8002d1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003846:	e026      	b.n	8003896 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4413      	add	r3, r2
 800384e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003850:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	429a      	cmp	r2, r3
 800385e:	d209      	bcs.n	8003874 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3304      	adds	r3, #4
 800386a:	4619      	mov	r1, r3
 800386c:	4610      	mov	r0, r2
 800386e:	f7ff fa77 	bl	8002d60 <vListInsert>
}
 8003872:	e010      	b.n	8003896 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3304      	adds	r3, #4
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f7ff fa6d 	bl	8002d60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003886:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	429a      	cmp	r2, r3
 800388e:	d202      	bcs.n	8003896 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003890:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	6013      	str	r3, [r2, #0]
}
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	200004fc 	.word	0x200004fc
 80038a4:	200003f8 	.word	0x200003f8
 80038a8:	20000500 	.word	0x20000500
 80038ac:	200004e4 	.word	0x200004e4
 80038b0:	200004b4 	.word	0x200004b4
 80038b4:	200004b0 	.word	0x200004b0
 80038b8:	20000518 	.word	0x20000518

080038bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3b04      	subs	r3, #4
 80038cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3b04      	subs	r3, #4
 80038da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f023 0201 	bic.w	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	3b04      	subs	r3, #4
 80038ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038ec:	4a08      	ldr	r2, [pc, #32]	; (8003910 <pxPortInitialiseStack+0x54>)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3b14      	subs	r3, #20
 80038f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3b20      	subs	r3, #32
 8003902:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003904:	68fb      	ldr	r3, [r7, #12]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr
 8003910:	08003915 	.word	0x08003915

08003914 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <prvTaskExitError+0x54>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003926:	d00a      	beq.n	800393e <prvTaskExitError+0x2a>
	__asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	60fb      	str	r3, [r7, #12]
}
 800393a:	bf00      	nop
 800393c:	e7fe      	b.n	800393c <prvTaskExitError+0x28>
	__asm volatile
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	60bb      	str	r3, [r7, #8]
}
 8003950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003952:	bf00      	nop
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0fc      	beq.n	8003954 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800395a:	bf00      	nop
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	2000000c 	.word	0x2000000c
 800396c:	00000000 	.word	0x00000000

08003970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <pxCurrentTCBConst2>)
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	6808      	ldr	r0, [r1, #0]
 8003976:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800397a:	f380 8809 	msr	PSP, r0
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f04f 0000 	mov.w	r0, #0
 8003986:	f380 8811 	msr	BASEPRI, r0
 800398a:	f04e 0e0d 	orr.w	lr, lr, #13
 800398e:	4770      	bx	lr

08003990 <pxCurrentTCBConst2>:
 8003990:	200003f8 	.word	0x200003f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop

08003998 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003998:	4806      	ldr	r0, [pc, #24]	; (80039b4 <prvPortStartFirstTask+0x1c>)
 800399a:	6800      	ldr	r0, [r0, #0]
 800399c:	6800      	ldr	r0, [r0, #0]
 800399e:	f380 8808 	msr	MSP, r0
 80039a2:	b662      	cpsie	i
 80039a4:	b661      	cpsie	f
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	df00      	svc	0
 80039b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80039b2:	bf00      	nop
 80039b4:	e000ed08 	.word	0xe000ed08

080039b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039be:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <xPortStartScheduler+0xd0>)
 80039c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	22ff      	movs	r2, #255	; 0xff
 80039ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	4b2a      	ldr	r3, [pc, #168]	; (8003a8c <xPortStartScheduler+0xd4>)
 80039e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039e6:	4b2a      	ldr	r3, [pc, #168]	; (8003a90 <xPortStartScheduler+0xd8>)
 80039e8:	2207      	movs	r2, #7
 80039ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039ec:	e009      	b.n	8003a02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80039ee:	4b28      	ldr	r3, [pc, #160]	; (8003a90 <xPortStartScheduler+0xd8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	4a26      	ldr	r2, [pc, #152]	; (8003a90 <xPortStartScheduler+0xd8>)
 80039f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0a:	2b80      	cmp	r3, #128	; 0x80
 8003a0c:	d0ef      	beq.n	80039ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a0e:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <xPortStartScheduler+0xd8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f1c3 0307 	rsb	r3, r3, #7
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d00a      	beq.n	8003a30 <xPortStartScheduler+0x78>
	__asm volatile
 8003a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	60bb      	str	r3, [r7, #8]
}
 8003a2c:	bf00      	nop
 8003a2e:	e7fe      	b.n	8003a2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a30:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <xPortStartScheduler+0xd8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <xPortStartScheduler+0xd8>)
 8003a38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <xPortStartScheduler+0xd8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a42:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <xPortStartScheduler+0xd8>)
 8003a44:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <xPortStartScheduler+0xdc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a10      	ldr	r2, [pc, #64]	; (8003a94 <xPortStartScheduler+0xdc>)
 8003a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <xPortStartScheduler+0xdc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a0d      	ldr	r2, [pc, #52]	; (8003a94 <xPortStartScheduler+0xdc>)
 8003a60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a64:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a66:	f000 f8b9 	bl	8003bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <xPortStartScheduler+0xe0>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a70:	f7ff ff92 	bl	8003998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a74:	f7ff fd7c 	bl	8003570 <vTaskSwitchContext>
	prvTaskExitError();
 8003a78:	f7ff ff4c 	bl	8003914 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	e000e400 	.word	0xe000e400
 8003a8c:	20000524 	.word	0x20000524
 8003a90:	20000528 	.word	0x20000528
 8003a94:	e000ed20 	.word	0xe000ed20
 8003a98:	2000000c 	.word	0x2000000c

08003a9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
	__asm volatile
 8003aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	607b      	str	r3, [r7, #4]
}
 8003ab4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <vPortEnterCritical+0x58>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3301      	adds	r3, #1
 8003abc:	4a0d      	ldr	r2, [pc, #52]	; (8003af4 <vPortEnterCritical+0x58>)
 8003abe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <vPortEnterCritical+0x58>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d10f      	bne.n	8003ae8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <vPortEnterCritical+0x5c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <vPortEnterCritical+0x4c>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	603b      	str	r3, [r7, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	e7fe      	b.n	8003ae6 <vPortEnterCritical+0x4a>
	}
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	2000000c 	.word	0x2000000c
 8003af8:	e000ed04 	.word	0xe000ed04

08003afc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <vPortExitCritical+0x4c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <vPortExitCritical+0x24>
	__asm volatile
 8003b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	607b      	str	r3, [r7, #4]
}
 8003b1c:	bf00      	nop
 8003b1e:	e7fe      	b.n	8003b1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <vPortExitCritical+0x4c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	4a08      	ldr	r2, [pc, #32]	; (8003b48 <vPortExitCritical+0x4c>)
 8003b28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <vPortExitCritical+0x4c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d105      	bne.n	8003b3e <vPortExitCritical+0x42>
 8003b32:	2300      	movs	r3, #0
 8003b34:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	2000000c 	.word	0x2000000c
 8003b4c:	00000000 	.word	0x00000000

08003b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b50:	f3ef 8009 	mrs	r0, PSP
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <pxCurrentTCBConst>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b60:	6010      	str	r0, [r2, #0]
 8003b62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003b66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b6a:	f380 8811 	msr	BASEPRI, r0
 8003b6e:	f7ff fcff 	bl	8003570 <vTaskSwitchContext>
 8003b72:	f04f 0000 	mov.w	r0, #0
 8003b76:	f380 8811 	msr	BASEPRI, r0
 8003b7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b7e:	6819      	ldr	r1, [r3, #0]
 8003b80:	6808      	ldr	r0, [r1, #0]
 8003b82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b86:	f380 8809 	msr	PSP, r0
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	4770      	bx	lr

08003b90 <pxCurrentTCBConst>:
 8003b90:	200003f8 	.word	0x200003f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop

08003b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	607b      	str	r3, [r7, #4]
}
 8003bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003bb2:	f7ff fc1f 	bl	80033f4 <xTaskIncrementTick>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <SysTick_Handler+0x40>)
 8003bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	f383 8811 	msr	BASEPRI, r3
}
 8003bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003be0:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <vPortSetupTimerInterrupt+0x30>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003be6:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <vPortSetupTimerInterrupt+0x34>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <vPortSetupTimerInterrupt+0x38>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a09      	ldr	r2, [pc, #36]	; (8003c18 <vPortSetupTimerInterrupt+0x3c>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	099b      	lsrs	r3, r3, #6
 8003bf8:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <vPortSetupTimerInterrupt+0x40>)
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bfe:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <vPortSetupTimerInterrupt+0x30>)
 8003c00:	2207      	movs	r2, #7
 8003c02:	601a      	str	r2, [r3, #0]
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	e000e010 	.word	0xe000e010
 8003c10:	e000e018 	.word	0xe000e018
 8003c14:	20000000 	.word	0x20000000
 8003c18:	10624dd3 	.word	0x10624dd3
 8003c1c:	e000e014 	.word	0xe000e014

08003c20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	; 0x28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c2c:	f7ff fb38 	bl	80032a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c30:	4b58      	ldr	r3, [pc, #352]	; (8003d94 <pvPortMalloc+0x174>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c38:	f000 f910 	bl	8003e5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c3c:	4b56      	ldr	r3, [pc, #344]	; (8003d98 <pvPortMalloc+0x178>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f040 808e 	bne.w	8003d66 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01d      	beq.n	8003c8c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003c50:	2208      	movs	r2, #8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d014      	beq.n	8003c8c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f023 0307 	bic.w	r3, r3, #7
 8003c68:	3308      	adds	r3, #8
 8003c6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <pvPortMalloc+0x6c>
	__asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	617b      	str	r3, [r7, #20]
}
 8003c88:	bf00      	nop
 8003c8a:	e7fe      	b.n	8003c8a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d069      	beq.n	8003d66 <pvPortMalloc+0x146>
 8003c92:	4b42      	ldr	r3, [pc, #264]	; (8003d9c <pvPortMalloc+0x17c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d864      	bhi.n	8003d66 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c9c:	4b40      	ldr	r3, [pc, #256]	; (8003da0 <pvPortMalloc+0x180>)
 8003c9e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ca0:	4b3f      	ldr	r3, [pc, #252]	; (8003da0 <pvPortMalloc+0x180>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ca6:	e004      	b.n	8003cb2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d903      	bls.n	8003cc4 <pvPortMalloc+0xa4>
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f1      	bne.n	8003ca8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003cc4:	4b33      	ldr	r3, [pc, #204]	; (8003d94 <pvPortMalloc+0x174>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d04b      	beq.n	8003d66 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	4413      	add	r3, r2
 8003cd6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	1ad2      	subs	r2, r2, r3
 8003ce8:	2308      	movs	r3, #8
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d91f      	bls.n	8003d30 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <pvPortMalloc+0xf8>
	__asm volatile
 8003d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	613b      	str	r3, [r7, #16]
}
 8003d14:	bf00      	nop
 8003d16:	e7fe      	b.n	8003d16 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	1ad2      	subs	r2, r2, r3
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d2a:	69b8      	ldr	r0, [r7, #24]
 8003d2c:	f000 f8f8 	bl	8003f20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d30:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <pvPortMalloc+0x17c>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	4a18      	ldr	r2, [pc, #96]	; (8003d9c <pvPortMalloc+0x17c>)
 8003d3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <pvPortMalloc+0x17c>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b18      	ldr	r3, [pc, #96]	; (8003da4 <pvPortMalloc+0x184>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d203      	bcs.n	8003d52 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d4a:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <pvPortMalloc+0x17c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a15      	ldr	r2, [pc, #84]	; (8003da4 <pvPortMalloc+0x184>)
 8003d50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <pvPortMalloc+0x178>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d66:	f7ff faa9 	bl	80032bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <pvPortMalloc+0x16a>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	60fb      	str	r3, [r7, #12]
}
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <pvPortMalloc+0x168>
	return pvReturn;
 8003d8a:	69fb      	ldr	r3, [r7, #28]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3728      	adds	r7, #40	; 0x28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20001134 	.word	0x20001134
 8003d98:	20001140 	.word	0x20001140
 8003d9c:	20001138 	.word	0x20001138
 8003da0:	2000112c 	.word	0x2000112c
 8003da4:	2000113c 	.word	0x2000113c

08003da8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d048      	beq.n	8003e4c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003dba:	2308      	movs	r3, #8
 8003dbc:	425b      	negs	r3, r3
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	4b21      	ldr	r3, [pc, #132]	; (8003e54 <vPortFree+0xac>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <vPortFree+0x44>
	__asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	60fb      	str	r3, [r7, #12]
}
 8003de8:	bf00      	nop
 8003dea:	e7fe      	b.n	8003dea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <vPortFree+0x62>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	60bb      	str	r3, [r7, #8]
}
 8003e06:	bf00      	nop
 8003e08:	e7fe      	b.n	8003e08 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <vPortFree+0xac>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d019      	beq.n	8003e4c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d115      	bne.n	8003e4c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <vPortFree+0xac>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e30:	f7ff fa36 	bl	80032a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <vPortFree+0xb0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	4a06      	ldr	r2, [pc, #24]	; (8003e58 <vPortFree+0xb0>)
 8003e40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e42:	6938      	ldr	r0, [r7, #16]
 8003e44:	f000 f86c 	bl	8003f20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003e48:	f7ff fa38 	bl	80032bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e4c:	bf00      	nop
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20001140 	.word	0x20001140
 8003e58:	20001138 	.word	0x20001138

08003e5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e68:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <prvHeapInit+0xac>)
 8003e6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00c      	beq.n	8003e90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3307      	adds	r3, #7
 8003e7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0307 	bic.w	r3, r3, #7
 8003e82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	4a1f      	ldr	r2, [pc, #124]	; (8003f08 <prvHeapInit+0xac>)
 8003e8c:	4413      	add	r3, r2
 8003e8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e94:	4a1d      	ldr	r2, [pc, #116]	; (8003f0c <prvHeapInit+0xb0>)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e9a:	4b1c      	ldr	r3, [pc, #112]	; (8003f0c <prvHeapInit+0xb0>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0307 	bic.w	r3, r3, #7
 8003eb6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a15      	ldr	r2, [pc, #84]	; (8003f10 <prvHeapInit+0xb4>)
 8003ebc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ebe:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <prvHeapInit+0xb4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <prvHeapInit+0xb4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	1ad2      	subs	r2, r2, r3
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <prvHeapInit+0xb4>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <prvHeapInit+0xb8>)
 8003eea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <prvHeapInit+0xbc>)
 8003ef2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <prvHeapInit+0xc0>)
 8003ef6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003efa:	601a      	str	r2, [r3, #0]
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	2000052c 	.word	0x2000052c
 8003f0c:	2000112c 	.word	0x2000112c
 8003f10:	20001134 	.word	0x20001134
 8003f14:	2000113c 	.word	0x2000113c
 8003f18:	20001138 	.word	0x20001138
 8003f1c:	20001140 	.word	0x20001140

08003f20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f28:	4b27      	ldr	r3, [pc, #156]	; (8003fc8 <prvInsertBlockIntoFreeList+0xa8>)
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e002      	b.n	8003f34 <prvInsertBlockIntoFreeList+0x14>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d8f7      	bhi.n	8003f2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	4413      	add	r3, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d108      	bne.n	8003f62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	441a      	add	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	441a      	add	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d118      	bne.n	8003fa8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <prvInsertBlockIntoFreeList+0xac>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d00d      	beq.n	8003f9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	441a      	add	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	e008      	b.n	8003fb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <prvInsertBlockIntoFreeList+0xac>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e003      	b.n	8003fb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d002      	beq.n	8003fbe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	2000112c 	.word	0x2000112c
 8003fcc:	20001134 	.word	0x20001134

08003fd0 <__libc_init_array>:
 8003fd0:	b570      	push	{r4, r5, r6, lr}
 8003fd2:	2600      	movs	r6, #0
 8003fd4:	4d0c      	ldr	r5, [pc, #48]	; (8004008 <__libc_init_array+0x38>)
 8003fd6:	4c0d      	ldr	r4, [pc, #52]	; (800400c <__libc_init_array+0x3c>)
 8003fd8:	1b64      	subs	r4, r4, r5
 8003fda:	10a4      	asrs	r4, r4, #2
 8003fdc:	42a6      	cmp	r6, r4
 8003fde:	d109      	bne.n	8003ff4 <__libc_init_array+0x24>
 8003fe0:	f000 f8e2 	bl	80041a8 <_init>
 8003fe4:	2600      	movs	r6, #0
 8003fe6:	4d0a      	ldr	r5, [pc, #40]	; (8004010 <__libc_init_array+0x40>)
 8003fe8:	4c0a      	ldr	r4, [pc, #40]	; (8004014 <__libc_init_array+0x44>)
 8003fea:	1b64      	subs	r4, r4, r5
 8003fec:	10a4      	asrs	r4, r4, #2
 8003fee:	42a6      	cmp	r6, r4
 8003ff0:	d105      	bne.n	8003ffe <__libc_init_array+0x2e>
 8003ff2:	bd70      	pop	{r4, r5, r6, pc}
 8003ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff8:	4798      	blx	r3
 8003ffa:	3601      	adds	r6, #1
 8003ffc:	e7ee      	b.n	8003fdc <__libc_init_array+0xc>
 8003ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004002:	4798      	blx	r3
 8004004:	3601      	adds	r6, #1
 8004006:	e7f2      	b.n	8003fee <__libc_init_array+0x1e>
 8004008:	0800428c 	.word	0x0800428c
 800400c:	0800428c 	.word	0x0800428c
 8004010:	0800428c 	.word	0x0800428c
 8004014:	08004290 	.word	0x08004290

08004018 <__retarget_lock_acquire_recursive>:
 8004018:	4770      	bx	lr

0800401a <__retarget_lock_release_recursive>:
 800401a:	4770      	bx	lr

0800401c <memset>:
 800401c:	4603      	mov	r3, r0
 800401e:	4402      	add	r2, r0
 8004020:	4293      	cmp	r3, r2
 8004022:	d100      	bne.n	8004026 <memset+0xa>
 8004024:	4770      	bx	lr
 8004026:	f803 1b01 	strb.w	r1, [r3], #1
 800402a:	e7f9      	b.n	8004020 <memset+0x4>

0800402c <cleanup_glue>:
 800402c:	b538      	push	{r3, r4, r5, lr}
 800402e:	460c      	mov	r4, r1
 8004030:	6809      	ldr	r1, [r1, #0]
 8004032:	4605      	mov	r5, r0
 8004034:	b109      	cbz	r1, 800403a <cleanup_glue+0xe>
 8004036:	f7ff fff9 	bl	800402c <cleanup_glue>
 800403a:	4621      	mov	r1, r4
 800403c:	4628      	mov	r0, r5
 800403e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004042:	f000 b869 	b.w	8004118 <_free_r>
	...

08004048 <_reclaim_reent>:
 8004048:	4b2c      	ldr	r3, [pc, #176]	; (80040fc <_reclaim_reent+0xb4>)
 800404a:	b570      	push	{r4, r5, r6, lr}
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4604      	mov	r4, r0
 8004050:	4283      	cmp	r3, r0
 8004052:	d051      	beq.n	80040f8 <_reclaim_reent+0xb0>
 8004054:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004056:	b143      	cbz	r3, 800406a <_reclaim_reent+0x22>
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d14a      	bne.n	80040f4 <_reclaim_reent+0xac>
 800405e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004060:	6819      	ldr	r1, [r3, #0]
 8004062:	b111      	cbz	r1, 800406a <_reclaim_reent+0x22>
 8004064:	4620      	mov	r0, r4
 8004066:	f000 f857 	bl	8004118 <_free_r>
 800406a:	6961      	ldr	r1, [r4, #20]
 800406c:	b111      	cbz	r1, 8004074 <_reclaim_reent+0x2c>
 800406e:	4620      	mov	r0, r4
 8004070:	f000 f852 	bl	8004118 <_free_r>
 8004074:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004076:	b111      	cbz	r1, 800407e <_reclaim_reent+0x36>
 8004078:	4620      	mov	r0, r4
 800407a:	f000 f84d 	bl	8004118 <_free_r>
 800407e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004080:	b111      	cbz	r1, 8004088 <_reclaim_reent+0x40>
 8004082:	4620      	mov	r0, r4
 8004084:	f000 f848 	bl	8004118 <_free_r>
 8004088:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800408a:	b111      	cbz	r1, 8004092 <_reclaim_reent+0x4a>
 800408c:	4620      	mov	r0, r4
 800408e:	f000 f843 	bl	8004118 <_free_r>
 8004092:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004094:	b111      	cbz	r1, 800409c <_reclaim_reent+0x54>
 8004096:	4620      	mov	r0, r4
 8004098:	f000 f83e 	bl	8004118 <_free_r>
 800409c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800409e:	b111      	cbz	r1, 80040a6 <_reclaim_reent+0x5e>
 80040a0:	4620      	mov	r0, r4
 80040a2:	f000 f839 	bl	8004118 <_free_r>
 80040a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80040a8:	b111      	cbz	r1, 80040b0 <_reclaim_reent+0x68>
 80040aa:	4620      	mov	r0, r4
 80040ac:	f000 f834 	bl	8004118 <_free_r>
 80040b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040b2:	b111      	cbz	r1, 80040ba <_reclaim_reent+0x72>
 80040b4:	4620      	mov	r0, r4
 80040b6:	f000 f82f 	bl	8004118 <_free_r>
 80040ba:	69a3      	ldr	r3, [r4, #24]
 80040bc:	b1e3      	cbz	r3, 80040f8 <_reclaim_reent+0xb0>
 80040be:	4620      	mov	r0, r4
 80040c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040c2:	4798      	blx	r3
 80040c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80040c6:	b1b9      	cbz	r1, 80040f8 <_reclaim_reent+0xb0>
 80040c8:	4620      	mov	r0, r4
 80040ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040ce:	f7ff bfad 	b.w	800402c <cleanup_glue>
 80040d2:	5949      	ldr	r1, [r1, r5]
 80040d4:	b941      	cbnz	r1, 80040e8 <_reclaim_reent+0xa0>
 80040d6:	3504      	adds	r5, #4
 80040d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040da:	2d80      	cmp	r5, #128	; 0x80
 80040dc:	68d9      	ldr	r1, [r3, #12]
 80040de:	d1f8      	bne.n	80040d2 <_reclaim_reent+0x8a>
 80040e0:	4620      	mov	r0, r4
 80040e2:	f000 f819 	bl	8004118 <_free_r>
 80040e6:	e7ba      	b.n	800405e <_reclaim_reent+0x16>
 80040e8:	680e      	ldr	r6, [r1, #0]
 80040ea:	4620      	mov	r0, r4
 80040ec:	f000 f814 	bl	8004118 <_free_r>
 80040f0:	4631      	mov	r1, r6
 80040f2:	e7ef      	b.n	80040d4 <_reclaim_reent+0x8c>
 80040f4:	2500      	movs	r5, #0
 80040f6:	e7ef      	b.n	80040d8 <_reclaim_reent+0x90>
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
 80040fa:	bf00      	nop
 80040fc:	20000010 	.word	0x20000010

08004100 <__malloc_lock>:
 8004100:	4801      	ldr	r0, [pc, #4]	; (8004108 <__malloc_lock+0x8>)
 8004102:	f7ff bf89 	b.w	8004018 <__retarget_lock_acquire_recursive>
 8004106:	bf00      	nop
 8004108:	20001144 	.word	0x20001144

0800410c <__malloc_unlock>:
 800410c:	4801      	ldr	r0, [pc, #4]	; (8004114 <__malloc_unlock+0x8>)
 800410e:	f7ff bf84 	b.w	800401a <__retarget_lock_release_recursive>
 8004112:	bf00      	nop
 8004114:	20001144 	.word	0x20001144

08004118 <_free_r>:
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	4605      	mov	r5, r0
 800411c:	2900      	cmp	r1, #0
 800411e:	d040      	beq.n	80041a2 <_free_r+0x8a>
 8004120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004124:	1f0c      	subs	r4, r1, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	bfb8      	it	lt
 800412a:	18e4      	addlt	r4, r4, r3
 800412c:	f7ff ffe8 	bl	8004100 <__malloc_lock>
 8004130:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <_free_r+0x8c>)
 8004132:	6813      	ldr	r3, [r2, #0]
 8004134:	b933      	cbnz	r3, 8004144 <_free_r+0x2c>
 8004136:	6063      	str	r3, [r4, #4]
 8004138:	6014      	str	r4, [r2, #0]
 800413a:	4628      	mov	r0, r5
 800413c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004140:	f7ff bfe4 	b.w	800410c <__malloc_unlock>
 8004144:	42a3      	cmp	r3, r4
 8004146:	d908      	bls.n	800415a <_free_r+0x42>
 8004148:	6820      	ldr	r0, [r4, #0]
 800414a:	1821      	adds	r1, r4, r0
 800414c:	428b      	cmp	r3, r1
 800414e:	bf01      	itttt	eq
 8004150:	6819      	ldreq	r1, [r3, #0]
 8004152:	685b      	ldreq	r3, [r3, #4]
 8004154:	1809      	addeq	r1, r1, r0
 8004156:	6021      	streq	r1, [r4, #0]
 8004158:	e7ed      	b.n	8004136 <_free_r+0x1e>
 800415a:	461a      	mov	r2, r3
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	b10b      	cbz	r3, 8004164 <_free_r+0x4c>
 8004160:	42a3      	cmp	r3, r4
 8004162:	d9fa      	bls.n	800415a <_free_r+0x42>
 8004164:	6811      	ldr	r1, [r2, #0]
 8004166:	1850      	adds	r0, r2, r1
 8004168:	42a0      	cmp	r0, r4
 800416a:	d10b      	bne.n	8004184 <_free_r+0x6c>
 800416c:	6820      	ldr	r0, [r4, #0]
 800416e:	4401      	add	r1, r0
 8004170:	1850      	adds	r0, r2, r1
 8004172:	4283      	cmp	r3, r0
 8004174:	6011      	str	r1, [r2, #0]
 8004176:	d1e0      	bne.n	800413a <_free_r+0x22>
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4401      	add	r1, r0
 800417e:	6011      	str	r1, [r2, #0]
 8004180:	6053      	str	r3, [r2, #4]
 8004182:	e7da      	b.n	800413a <_free_r+0x22>
 8004184:	d902      	bls.n	800418c <_free_r+0x74>
 8004186:	230c      	movs	r3, #12
 8004188:	602b      	str	r3, [r5, #0]
 800418a:	e7d6      	b.n	800413a <_free_r+0x22>
 800418c:	6820      	ldr	r0, [r4, #0]
 800418e:	1821      	adds	r1, r4, r0
 8004190:	428b      	cmp	r3, r1
 8004192:	bf01      	itttt	eq
 8004194:	6819      	ldreq	r1, [r3, #0]
 8004196:	685b      	ldreq	r3, [r3, #4]
 8004198:	1809      	addeq	r1, r1, r0
 800419a:	6021      	streq	r1, [r4, #0]
 800419c:	6063      	str	r3, [r4, #4]
 800419e:	6054      	str	r4, [r2, #4]
 80041a0:	e7cb      	b.n	800413a <_free_r+0x22>
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
 80041a4:	20001148 	.word	0x20001148

080041a8 <_init>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr

080041b4 <_fini>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	bf00      	nop
 80041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ba:	bc08      	pop	{r3}
 80041bc:	469e      	mov	lr, r3
 80041be:	4770      	bx	lr
